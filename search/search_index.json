{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to Jam documentation!</p>"},{"location":"#about","title":"About","text":"<p>Jam(Jeneric auth module) - a simple library that makes implementing authentication in your application effortless.</p>"},{"location":"#installation","title":"Installation","text":"pip install jamlibInstalled! <p>How to install dev version: -&gt; Jam Unstable</p>"},{"location":"#asynchronous-support","title":"Asynchronous support","text":"<p>Note</p> <p>You can use <code>jam.aio</code> module to work with async functions. The methods are the same, but you need to use <code>await</code> keyword.</p> <pre><code>from jam.aio import Jam\n\nconfig = {\n    \"auth_type\": \"jwt\",\n    \"alg\": \"HS256\",\n    \"secret_key\": \"secret\",\n    \"expire\": 2600\n}\njam = Jam(config=config)\npayload = await jam.make_payload(**{\"user_id\": 1})\ntoken = await jam.gen_jwt_token(payload)\n</code></pre>"},{"location":"#why-jam","title":"Why Jam?","text":"<p>Jam is a library that provides the most popular AUTH* mechanisms right out of the box.</p> <ul> <li>JWT</li> <li>Server side sessions</li> <li>OTP<ul> <li>TOTP</li> <li>HOTP</li> </ul> </li> <li>OAuth2</li> </ul>"},{"location":"#framework-integrations","title":"Framework integrations","text":"<p>Jam provides ready-to-use integrations for the most popular frameworks:</p> <ul> <li>FastAPI</li> <li>Starlette</li> <li>Litestar</li> <li>Flask</li> </ul> <p>Each integration offers built-in middleware or plugin support for JWT and session-based authentication.</p>"},{"location":"#why-choose-jam","title":"Why choose Jam?","text":"<p>Jam supports many authentication methods out of the box with minimal dependencies. Here is a comparison with other libraries:</p> Features / Library Jam Authx PyJWT AuthLib OTP Auth JWT \u2705 \u2705 \u2705 \u2705 \u274c JWT black/white lists \u2705 \u274c \u274c \u274c \u274c Server side sessions \u2705 \u2705 \u274c \u274c \u274c OTP \u2705 \u274c \u274c \u274c \u2705 OAuth2 \u2705 \u2705 \u274c \u2705 \u274c Flexible config \u2705 \u274c \u274c \u274c \u274c Modularity \u2705 \u274c \u274c \u274c \u274c"},{"location":"api/","title":"API Reference","text":"<p>JAM - Universal auth* library</p> <p>Source code: https://github.com/lyaguxafrog/jam</p> <p>Documentation: https://jam.makridenko.ru</p>"},{"location":"api/#instances","title":"Instances","text":"<ul> <li><code>BaseJam</code></li> <li><code>Jam</code></li> </ul>"},{"location":"api/#modules","title":"Modules","text":"<ul> <li><code>aio</code></li> <li><code>exceptions</code></li> <li><code>ext</code></li> <li><code>jwt</code></li> <li><code>oauth2</code></li> <li><code>otp</code></li> <li><code>sessions</code></li> <li><code>tests</code></li> <li><code>utils</code></li> <li><code>modules</code></li> </ul> <p>FILE PATH: <code>jam/__init__.py</code></p>"},{"location":"config/","title":"Jam configuration","text":"<p>There are several ways to configure Jam:</p> <ul> <li>yaml file</li> <li>toml file (recommended)</li> <li>python-dict</li> </ul> <p>The configuration follows this pattern: <code>&lt;auth_type&gt;: &lt;config&gt;</code></p> <p>Note</p> <p>This version of the config only works on jam&gt;=2.5.1. For older versions, use the old config. Backward compatibility is not broken, you can still use the old config.</p>"},{"location":"config/#ymlyaml-example","title":"YML/YAML Example","text":"<p>To configure via yml, you need to install the <code>pyyaml</code> module: <code>pip install jamlib[yaml]</code> and describe all configuration parameters in the <code>jam</code> block, for example: <pre><code>jam:\n  jwt:\n    alg: HS256\n    secret_key: SECRET\n  session:\n    sessions_type: redis\n    redis_uri: redis://0.0.0.0:6379/0\n</code></pre></p> <p>And specify the path to the file in the instance: <pre><code>from jam import Jam\n\njam = Jam(config=\"my_config.yml\")\n</code></pre></p>"},{"location":"config/#toml-example","title":"TOML Example","text":"<p>To configure via toml, you need to describe all parameters in the config in the <code>jam</code> block, for example:</p> <p>Tip</p> <p>For <code>python &lt; 3.11</code> you need to install the <code>toml</code> module: <code>pip intall jamlib[toml]</code></p> <pre><code>[jam.jwt]\nalg = \"HS256\"\nsecret_key = \"SECRET\"\n\n[jam.session]\nsession_type = \"redis\"\nredis_uri = \"redis://0.0.0.0:6379/0\"\n</code></pre> <p>And specify the path to the file in the instance: <pre><code>from jam import Jam\n\njam = Jam(config=\"my_config.toml\") # By default config=pyproject.toml\n</code></pre></p>"},{"location":"config/#dict-example","title":"Dict Example","text":"<p>To configure via dict, you need to describe all parameters in dict and pass it to the instance: <pre><code>from jam import Jam\n\nconfig = {\n    \"jwt\": {\n        \"alg\": \"HS256\",\n        \"secret_key\": \"SECRET\"\n    },\n    \"session\": {\n        \"sessions_type\": \"redis\",\n        \"redis_uri\": \"redis://0.0.0.0:6379/0\"\n    }\n}\n\njam = Jam(config=config)\n</code></pre></p>"},{"location":"contributing/","title":"Contributing","text":"<p>If you want to help develop Jam, there are a few rules to follow.</p>"},{"location":"contributing/#code-style","title":"Code style","text":"<p><pre><code># -*- coding: utf-8 -*-\n\n# Built-in libraries\nfrom typing import Literal\n\n# Third-party libraries\nfrom Crypto import Hash\n\n# Library modules\nfrom jam.jwt.__utils__ import __base64url_decode__\n\n\nclass SomeClass:\n    \"\"\"Long class description.\"\"\"\n\n    def __init__(self, some_value: str) -&gt; None:\n        \"\"\"Class constructor.\n\n        Args:\n            some_value (str): Some value\n        \"\"\"\n        self.sv = some_value\n\n    def some_method(self, something: int) -&gt; int:\n        \"\"\"Method Description.\n\n        Args:\n            something (int): Argument description\n\n        Raises:\n            ValueError: if something &lt; 1\n\n        Returns:\n            (int)\n        \"\"\"\n        if something &lt; 1:\n            raise ValueError(\"something &lt; 1\")\n\n        return something + 1\n</code></pre> Line length 80 characters, indented 4 spaces.</p>"},{"location":"contributing/#gitflow","title":"Gitflow","text":""},{"location":"contributing/#commits","title":"Commits:","text":"<p>The project must have <code>pre-commit</code></p> <ul> <li><code>[+]</code> Adding new functionality.</li> <li><code>[-]</code> Removing something, e.g. removing a function or deleting a file.</li> <li><code>[*]</code> Changing the logic.</li> <li><code>[~]</code> Changes that do not affect the logic, documentation, linters, etc.</li> </ul> <p>The keys in the commit body are also used: * <code>R</code>(reason): Reason for change, deletion, etc * <code>FB</code>(fix by): How it was made or fixed * <code>N</code>(note): A note of some kind</p> <p>Example of a correct commit <pre><code>[*] Changed JWT decryption logic\nR: Used a third-party heavy dependency that slowed down the code\nFB: Removed the dependency and wrote independently \n</code></pre></p>"},{"location":"contributing/#branches","title":"Branches","text":"<p>The project has one main branche: * <code>master</code> - Stable code of the latest release</p> <p>All branches are created from <code>master</code> and adhere to strict branch naming:</p> <ul> <li>New feature: <code>feature/&lt;id-issue-if-it-is&gt;-&lt;pair-words-about-feature&gt;</code></li> <li>Bug fixes: <code>fix/&lt;id-issue-if-it-is&gt;-&lt;pair-words-about-bug&gt;</code></li> <li>Refactoring: <code>refactor/&lt;id-issue-if-it-is&gt;-&lt;what-exactly-you-do&gt;</code></li> <li>Writing documentation: <code>docs/&lt;what-exactly-you-do&gt;</code>.</li> </ul> <p>Examples:</p> <ul> <li><code>feature/validate-redis-session</code></li> <li><code>fix/18-jwt-making</code></li> </ul>"},{"location":"contributing/#pull-requests","title":"Pull requests","text":"<p>The title of the pull request must contain a keyword: * <code>FEAT</code> Adding a new feature * <code>BUGFIX</code> Bug fix * <code>HOTFIX</code> Urgent bug fix * <code>DOCS</code> Edits/additions to documentation</p> <p>There is a template for the poolquest,  in it clearly describe what you did and why.</p> <p>Example: <pre><code>&lt;!--this is a title --&gt;\nFEAT Validation of a redis session\n\n## What was done\n* &lt;!--A brief description of what we've done--&gt;\n*\n\n## Test report\n&lt;!-- Describe how you tested --&gt;\n</code></pre></p>"},{"location":"install_unstable/","title":"Installing unstable Jam","text":"<p>If you need to install a non-stable/dev version of Jam, for example, to help with testing during the development of a new version, or if you need functionality that is not yet fully ready/tested right now.</p> <pre><code>pip install git+https://github.com/lyaguxafrog/jam.git\n</code></pre> <p>Warning</p> <p>By installing Jam in this way, you agree that everything can break, explode, you can be kidnapped by aliens, everything is at your own risk :D</p>"},{"location":"old_config/","title":"Jam configuration (old)","text":"<p>Warning</p> <p>This configuration method is obsolete and will be removed in the next major version. We recommend updating.</p> <p>There are several ways to configure Jam:</p> <ul> <li>yaml file</li> <li>toml file (recommended)</li> <li>python-dict</li> </ul>"},{"location":"old_config/#ymlyaml","title":"YML/YAML","text":"<p>To configure via yml, you need to install the <code>pyyaml</code> module: <code>pip install jamlib[yaml]</code> and describe all configuration parameters in the <code>jam</code> block, for example:</p> <pre><code>jam:\n  auth_type: \"jwt\"\n  alg: HS256\n  secret_key: my_secret\n  expire: 3600\n</code></pre> <p>And specify the path to the file in the instance: <pre><code>from jam import Jam\n\njam = Jam(config=\"my_config.yml\")\n</code></pre></p>"},{"location":"old_config/#toml","title":"TOML","text":"<p>To configure via toml, you need to describe all parameters in the config in the <code>jam</code> block, for example:</p> <p>Tip</p> <p>For <code>python &lt; 3.11</code> you need to install the <code>toml</code> module: <code>pip intall jamlib[toml]</code></p> <pre><code>[jam]\nauth_type = \"jwt\"\nalg = \"HS256\"\nsecret_key = \"my_secret\"\nexpire = 3600\n</code></pre> <p>And specify the path to the file in the instance: <pre><code>from jam import Jam\n\njam = Jam(config=\"my_config.toml\") # By default config=pyproject.toml\n</code></pre></p>"},{"location":"old_config/#dict","title":"Dict","text":"<p>To configure via dict, you need to describe all parameters in dict and pass it to the instance: <pre><code>from jam import Jam\n\nconfig = {\n    \"auth_type\": \"jwt\",\n    \"alg\": \"HS256\",\n    \"secret_key\": \"my_secret\",\n    \"expire\": 3600\n}\n\njam = Jam(config=config)\n</code></pre></p>"},{"location":"philosophy/","title":"Philosophy","text":"<p>Minimalism. Flexibility. Control.</p> <p>Jam is a lightweight Python authorization library designed to put you in full control:</p> <ul> <li>Simple types \u2014 methods return only standard Python objects (<code>str</code>, <code>int</code>, <code>dict</code>, <code>list</code>, etc.).  </li> <li>Fully replaceable modules \u2014 any component, including <code>jam.Jam</code>, can be extended via inheritance.</li> </ul> <p>Trade-offs for your control:</p> Choice Benefit Manual configuration Transparency and control Inheritance over DI Easy extension without hidden magic Simple types Compatibility and easy serialization <p></p>"},{"location":"quick/","title":"Quick","text":"<p>Sometimes it's not always convenient to use instance-class, so Jam has quick commands to work with auth.</p>"},{"location":"quick/#jwt","title":"JWT","text":"<p><pre><code>from jam.quick import (\n    get_jwt_token, decode_jwt_token, verify_jwt_token    \n)\n\ntoken: str = get_jwt_token(\n    alg=\"HS256\",\n    payload={\"user_id\": 1},\n    secret_key=\"SOME_KEY\"\n)\n\npayload: dict[str, Any] = decode_jwt_token(\n    token=token,\n    secret_key=\"SOME_KEY\"\n)\n\nresult: bool = verify_jwt_token(\n    token=token,\n    secret_key=\"SOME_KEY\"\n)\n\n# async version\n\nfrom jam.quick import (\n    aget_jwt_token, adecode_jwt_token, averify_jwt_token\n)\n\ntoken: str = await aget_jwt_token(\n    alg=\"HS256\",\n    payload={\"user_id\": 1},\n    secret=key=\"SOME_KEY\"\n)\n\npayload: dict[str, Any] = await adecode_jwt_token(\n    token=token,\n    secret_key=\"SOME_KEY\"\n)\n\nresult: bool = await averify_jwt_token(\n    token=token,\n    secret_key=\"SOME_KEY\"\n)\n</code></pre> See API/jam.quick/jwt for more details.</p>"},{"location":"testing/","title":"Jam testing","text":"<p>For convenient testing of your services that use Jam, you can easily replace the main Jam instance with a test instance that has the same interface but  works according to its own rules (for example, always succeeds).</p> <p>For example, you have a service for generating JWT tokens.</p> <p>Tip</p> <p>For async services, you can use <code>TestAsyncJam</code> instead of <code>TestJam</code>.</p> <pre><code>from jam import Jam\n\nclass AuthService:\n    def __init__(\n            self,\n            jam_instance: Jam\n    ) -&gt; None:\n        self.jam = jam_instance\n\n    # Generate new token\n    def generate_token(self, user: User) -&gt; str:\n        payload = self.jam.jwt_make_payload(exp=None, data=user.to_payload())\n        token = self.jam.jwt_create_token(payload)\n        return token\n\n    # Validate token and return user or None\n    def validate_token(self, token) -&gt; User | None:\n        try:\n            payload = self.jam.jwt_verify_token(\n                token, check_exp=True, check_list=False\n            )\n        except ValueError:\n            return None\n</code></pre> <p>And you need to write tests for it. <pre><code>import pytest\nfrom jam.tests import TestJam\n\nfrom your_app.services import AuthService\n\n\n@pytest.fixture\ndef auth_service() -&gt; AuthService:\n    return AuthService(\n        jam_instance=TestJam()  # Use TestJam instance here\n    )\n\ndef test_auth_user(auth_service):\n    user = User(id=1, username=\"test_user\")\n    token = auth_service.generate_token(user)  # Generate token\n    assert token is not None\n\n    validated_user = auth_service.validate_token(token)  # Validate token\n    assert validated_user is not None\n    assert validated_user.id == user.id\n    assert validated_user.username == user.username\n\n    # if you want to test invalid token\n    from jam.tests.fakers import invalid_token\n    invalid_user = auth_service.validate_token(invalid_token())\n    assert invalid_user is None\n</code></pre></p>"},{"location":"api/aio/","title":"jam.aio","text":"<p>Async jam version.</p>"},{"location":"api/aio/#instances","title":"Instances","text":"<ul> <li><code>Jam</code></li> </ul>"},{"location":"api/aio/#modules","title":"Modules","text":"<ul> <li><code>jwt</code></li> <li><code>oauth2</code></li> <li><code>sessions</code></li> <li><code>modules</code></li> </ul> <p>FILE PATH: <code>jam/aio/__init__.py</code></p>"},{"location":"api/base_jam/","title":"jam.BaseJam","text":""},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam","title":"BaseJam","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract Instance object.</p> <p>Methods:</p> Name Description <code>build_module</code> <p>Method for building module from config.</p> <code>clear_sessions</code> <p>Clear all sessions associated with a specific session key.</p> <code>create_session</code> <p>Create new session.</p> <code>delete_session</code> <p>Delete a session by its ID.</p> <code>gen_jwt_token</code> <p>Generate new JWT token.</p> <code>get_otp_code</code> <p>Generates a OTP code.</p> <code>get_otp_uri</code> <p>Generates an otpauth:// URI for Google Authenticator.</p> <code>get_session</code> <p>Retrieve session data by session ID.</p> <code>jwt_create_token</code> <p>Create JWT token.</p> <code>jwt_make_payload</code> <p>Make JWT-specific payload.</p> <code>jwt_verify_token</code> <p>Verify and decode JWT token.</p> <code>make_payload</code> <p>Generate new template.</p> <code>oauth2_client_credentials_flow</code> <p>Obtain access token using client credentials flow (no user interaction).</p> <code>oauth2_fetch_token</code> <p>Exchange authorization code for access token.</p> <code>oauth2_get_authorized_url</code> <p>Generate full OAuth2 authorization URL.</p> <code>oauth2_refresh_token</code> <p>Use refresh token to obtain a new access token.</p> <code>otp_code</code> <p>Generates an OTP.</p> <code>otp_uri</code> <p>Generates an otpauth:// URI for Google Authenticator.</p> <code>otp_verify_code</code> <p>Checks the OTP code, taking into account the acceptable window.</p> <code>rework_session</code> <p>Rework an existing session key to a new one.</p> <code>session_clear</code> <p>Delete all sessions by key.</p> <code>session_create</code> <p>Create new session.</p> <code>session_delete</code> <p>Delete session.</p> <code>session_get</code> <p>Get data from session.</p> <code>session_rework</code> <p>Rework session.</p> <code>session_update</code> <p>Update session data.</p> <code>update_session</code> <p>Update session data by session ID.</p> <code>verify_jwt_token</code> <p>Verify JWT token.</p> <code>verify_otp_code</code> <p>Verify TOTP code.</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.build_module","title":"build_module","text":"<pre><code>build_module(\n    name: str,\n    cfg: dict[str, Any],\n    _jam_modules: dict[str, str],\n)\n</code></pre> <p>Method for building module from config.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Module name</p> required <code>cfg</code> <code>dict[str, Any]</code> <p>Config</p> required <code>_jam_modules</code> <code>dict[str, str]</code> <p>Jam modules</p> required"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.clear_sessions","title":"clear_sessions  <code>abstractmethod</code>","text":"<pre><code>clear_sessions(session_key: str) -&gt; None\n</code></pre> <p>Clear all sessions associated with a specific session key.</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.create_session","title":"create_session  <code>abstractmethod</code>","text":"<pre><code>create_session(session_key: str, data: dict) -&gt; str\n</code></pre> <p>Create new session.</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.delete_session","title":"delete_session  <code>abstractmethod</code>","text":"<pre><code>delete_session(session_id: str) -&gt; None\n</code></pre> <p>Delete a session by its ID.</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.gen_jwt_token","title":"gen_jwt_token  <code>abstractmethod</code>","text":"<pre><code>gen_jwt_token(payload) -&gt; str\n</code></pre> <p>Generate new JWT token.</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.get_otp_code","title":"get_otp_code  <code>abstractmethod</code>","text":"<pre><code>get_otp_code(\n    secret: str, factor: Optional[int] = None\n) -&gt; str\n</code></pre> <p>Generates a OTP code.</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.get_otp_uri","title":"get_otp_uri  <code>abstractmethod</code>","text":"<pre><code>get_otp_uri(\n    secret: str,\n    name: Optional[str] = None,\n    issuer: Optional[str] = None,\n    counter: Optional[int] = None,\n) -&gt; str\n</code></pre> <p>Generates an otpauth:// URI for Google Authenticator.</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.get_session","title":"get_session  <code>abstractmethod</code>","text":"<pre><code>get_session(session_id: str) -&gt; Optional[dict]\n</code></pre> <p>Retrieve session data by session ID.</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.jwt_create_token","title":"jwt_create_token  <code>abstractmethod</code>","text":"<pre><code>jwt_create_token(payload: dict[str, Any]) -&gt; str\n</code></pre> <p>Create JWT token.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>dict[str, Any]</code> <p>Data payload</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>New token</p> <p>Raises:</p> Type Description <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None</p> <code>EmtpyPrivateKey</code> <p>If RSA algorithm is selected, but private key None</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.jwt_make_payload","title":"jwt_make_payload  <code>abstractmethod</code>","text":"<pre><code>jwt_make_payload(\n    exp: Optional[int], data: dict[str, Any]\n) -&gt; dict[str, Any]\n</code></pre> <p>Make JWT-specific payload.</p> <p>Parameters:</p> Name Type Description Default <code>exp</code> <code>int | None</code> <p>Token expire, if None -&gt; use default</p> required <code>data</code> <code>dict[str, Any]</code> <p>Data to payload</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Payload</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.jwt_verify_token","title":"jwt_verify_token  <code>abstractmethod</code>","text":"<pre><code>jwt_verify_token(\n    token: str,\n    check_exp: bool = True,\n    check_list: bool = True,\n) -&gt; dict[str, Any]\n</code></pre> <p>Verify and decode JWT token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>JWT token</p> required <code>check_exp</code> <code>bool</code> <p>Check expire</p> <code>True</code> <code>check_list</code> <code>bool</code> <p>Check white/black list. Docs: https://jam.makridenko.ru/jwt/lists/what/</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Decoded payload</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the token is invalid.</p> <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None.</p> <code>EmtpyPublicKey</code> <p>If RSA algorithm is selected, but public key None.</p> <code>NotFoundSomeInPayload</code> <p>If 'exp' not found in payload.</p> <code>TokenLifeTimeExpired</code> <p>If token has expired.</p> <code>TokenNotInWhiteList</code> <p>If the list type is white, but the token is  not there</p> <code>TokenInBlackList</code> <p>If the list type is black and the token is there</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.make_payload","title":"make_payload  <code>abstractmethod</code>","text":"<pre><code>make_payload(**payload) -&gt; dict[str, Any]\n</code></pre> <p>Generate new template.</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.oauth2_client_credentials_flow","title":"oauth2_client_credentials_flow  <code>abstractmethod</code>","text":"<pre><code>oauth2_client_credentials_flow(\n    provider: str,\n    scope: Optional[list[str]] = None,\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Obtain access token using client credentials flow (no user interaction).</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>scope</code> <code>list[str] | None</code> <p>Auth scope</p> <code>None</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>JSON with access token</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.oauth2_fetch_token","title":"oauth2_fetch_token  <code>abstractmethod</code>","text":"<pre><code>oauth2_fetch_token(\n    provider: str,\n    code: str,\n    grant_type: str = \"authorization_code\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Exchange authorization code for access token.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>code</code> <code>str</code> <p>OAuth2 code</p> required <code>grant_type</code> <code>str</code> <p>Type of oauth2 grant</p> <code>'authorization_code'</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>OAuth2 token</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.oauth2_get_authorized_url","title":"oauth2_get_authorized_url  <code>abstractmethod</code>","text":"<pre><code>oauth2_get_authorized_url(\n    provider: str, scope: list[str], **extra_params: Any\n) -&gt; str\n</code></pre> <p>Generate full OAuth2 authorization URL.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>scope</code> <code>list[str]</code> <p>Auth scope</p> required <code>extra_params</code> <code>Any</code> <p>Extra ath params</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Authorization url</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.oauth2_refresh_token","title":"oauth2_refresh_token  <code>abstractmethod</code>","text":"<pre><code>oauth2_refresh_token(\n    provider: str,\n    refresh_token: str,\n    grant_type: str = \"refresh_token\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Use refresh token to obtain a new access token.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>refresh_token</code> <code>str</code> <p>Refresh token</p> required <code>grant_type</code> <code>str</code> <p>Grant type</p> <code>'refresh_token'</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>Refresh token</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.otp_code","title":"otp_code  <code>abstractmethod</code>","text":"<pre><code>otp_code(\n    secret: Union[str, bytes], factor: Optional[int] = None\n) -&gt; str\n</code></pre> <p>Generates an OTP.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str | bytes</code> <p>User secret key.</p> required <code>factor</code> <code>int | None</code> <p>Unixtime for TOTP(if none, use now time) / Counter for HOTP.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>OTP code (fixed-length string).</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.otp_uri","title":"otp_uri  <code>abstractmethod</code>","text":"<pre><code>otp_uri(\n    secret: str,\n    name: Optional[str] = None,\n    issuer: Optional[str] = None,\n    counter: Optional[int] = None,\n) -&gt; str\n</code></pre> <p>Generates an otpauth:// URI for Google Authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>User secret key.</p> required <code>name</code> <code>str</code> <p>Account name (e.g., email).</p> <code>None</code> <code>issuer</code> <code>str</code> <p>Service name (e.g., \"GitHub\").</p> <code>None</code> <code>counter</code> <code>int | None</code> <p>Counter (for HOTP). Default is None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string of the form \"otpauth://...\"</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.otp_verify_code","title":"otp_verify_code  <code>abstractmethod</code>","text":"<pre><code>otp_verify_code(\n    secret: Union[str, bytes],\n    code: str,\n    factor: Optional[int] = None,\n    look_ahead: Optional[int] = 1,\n) -&gt; bool\n</code></pre> <p>Checks the OTP code, taking into account the acceptable window.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str | bytes</code> <p>User secret key.</p> required <code>code</code> <code>str</code> <p>The code entered.</p> required <code>factor</code> <code>int | None</code> <p>Unixtime for TOTP(if none, use now time) / Counter for HOTP.</p> <code>None</code> <code>look_ahead</code> <code>int</code> <p>Acceptable deviation in intervals (\u00b1window(totp) / \u00b1look ahead(hotp)). Default is 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the code matches, otherwise False.</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.rework_session","title":"rework_session  <code>abstractmethod</code>","text":"<pre><code>rework_session(old_session_key: str) -&gt; str\n</code></pre> <p>Rework an existing session key to a new one.</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.session_clear","title":"session_clear  <code>abstractmethod</code>","text":"<pre><code>session_clear(session_key: str) -&gt; None\n</code></pre> <p>Delete all sessions by key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>Key of session</p> required"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.session_create","title":"session_create  <code>abstractmethod</code>","text":"<pre><code>session_create(\n    session_key: str, data: dict[str, Any]\n) -&gt; str\n</code></pre> <p>Create new session.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>Key for session</p> required <code>data</code> <code>dict[str, Any]</code> <p>Session data</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>New session ID</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.session_delete","title":"session_delete  <code>abstractmethod</code>","text":"<pre><code>session_delete(session_id: str) -&gt; None\n</code></pre> <p>Delete session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.session_get","title":"session_get  <code>abstractmethod</code>","text":"<pre><code>session_get(session_id: str) -&gt; Optional[dict[str, Any]]\n</code></pre> <p>Get data from session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required <p>Returns:</p> Type Description <code>Optional[dict[str, Any]]</code> <p>dict[str, Any] | None: Session data if exist</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.session_rework","title":"session_rework  <code>abstractmethod</code>","text":"<pre><code>session_rework(old_session_id: str) -&gt; str\n</code></pre> <p>Rework session.</p> <p>Parameters:</p> Name Type Description Default <code>old_session_id</code> <code>str</code> <p>Old session id</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>New session id</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.session_update","title":"session_update  <code>abstractmethod</code>","text":"<pre><code>session_update(\n    session_id: str, data: dict[str, Any]\n) -&gt; None\n</code></pre> <p>Update session data.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required <code>data</code> <code>dict[str, Any]</code> <p>New data</p> required"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.update_session","title":"update_session  <code>abstractmethod</code>","text":"<pre><code>update_session(session_id: str, data: dict) -&gt; None\n</code></pre> <p>Update session data by session ID.</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.verify_jwt_token","title":"verify_jwt_token  <code>abstractmethod</code>","text":"<pre><code>verify_jwt_token(\n    token: str, check_exp: bool, check_list: bool\n) -&gt; dict[str, Any]\n</code></pre> <p>Verify JWT token.</p>"},{"location":"api/base_jam/#jam.__abc_instances__.BaseJam.verify_otp_code","title":"verify_otp_code  <code>abstractmethod</code>","text":"<pre><code>verify_otp_code(\n    secret: str,\n    code: str,\n    factor: Optional[int] = None,\n    look_ahead: Optional[int] = None,\n) -&gt; bool\n</code></pre> <p>Verify TOTP code.</p>"},{"location":"api/exceptions/","title":"jam.exceptions","text":"<ul> <li><code>EmptyPublicKey</code></li> <li><code>EmptySecretKey</code></li> <li><code>EmptyPrivateKey</code></li> <li><code>NotFoundSomeInPayload</code></li> <li><code>TokenInBlackList</code></li> <li><code>TokenLifeTimeExpired</code></li> <li><code>TokenNotInWhiteList</code></li> <li><code>SessionNotFound</code></li> </ul> <p>FILE PATH: <code>jam/exceptions/__init__.py</code></p>"},{"location":"api/ext/","title":"jam.ext","text":"<p>Extensions and integrations.</p>"},{"location":"api/ext/#modules","title":"Modules","text":"<ul> <li><code>fastapi</code></li> <li><code>flask</code></li> <li><code>litestar</code></li> <li><code>starlette</code></li> </ul> <p>FILE PATH: <code>jam/ext/__init__.py</code></p>"},{"location":"api/jam/","title":"jam.Jam","text":""},{"location":"api/jam/#jam.instance.Jam","title":"Jam","text":"<pre><code>Jam(\n    config: Union[dict[str, Any], str] = \"pyproject.toml\",\n    pointer: str = \"jam\",\n)\n</code></pre> <p>               Bases: <code>BaseJam</code></p> <p>Main instance.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[str, Any] | str</code> <p>dict or path to config file</p> <code>'pyproject.toml'</code> <code>pointer</code> <code>str</code> <p>Config read point</p> <code>'jam'</code> <p>Methods:</p> Name Description <code>clear_sessions</code> <p>Clear all sessions associated with a specific session key.</p> <code>create_session</code> <p>Create a new session.</p> <code>delete_session</code> <p>Delete a session by its ID.</p> <code>gen_jwt_token</code> <p>Creating a new token.</p> <code>get_otp_code</code> <p>Generates an OTP.</p> <code>get_otp_uri</code> <p>Generates an otpauth:// URI for Google Authenticator.</p> <code>get_session</code> <p>Retrieve session data by session ID.</p> <code>jwt_create_token</code> <p>Create JWT token.</p> <code>jwt_make_payload</code> <p>Make JWT-specific payload.</p> <code>jwt_verify_token</code> <p>Verify and decode JWT token.</p> <code>make_payload</code> <p>Payload maker tool.</p> <code>oauth2_client_credentials_flow</code> <p>Obtain access token using client credentials flow (no user interaction).</p> <code>oauth2_fetch_token</code> <p>Exchange authorization code for access token.</p> <code>oauth2_get_authorized_url</code> <p>Generate full OAuth2 authorization URL.</p> <code>oauth2_refresh_token</code> <p>Use refresh token to obtain a new access token.</p> <code>otp_code</code> <p>Generates an OTP.</p> <code>otp_uri</code> <p>Generates an otpauth:// URI for Google Authenticator.</p> <code>otp_verify_code</code> <p>Checks the OTP code, taking into account the acceptable window.</p> <code>rework_session</code> <p>Rework an existing session key to a new one.</p> <code>session_clear</code> <p>Delete all sessions by key.</p> <code>session_create</code> <p>Create new session.</p> <code>session_delete</code> <p>Delete session.</p> <code>session_get</code> <p>Get data from session.</p> <code>session_rework</code> <p>Rework session.</p> <code>session_update</code> <p>Update session data.</p> <code>update_session</code> <p>Update session data by session ID.</p> <code>verify_jwt_token</code> <p>A method for verifying a token.</p> <code>verify_otp_code</code> <p>Checks the OTP code, taking into account the acceptable window.</p>"},{"location":"api/jam/#jam.instance.Jam.clear_sessions","title":"clear_sessions","text":"<pre><code>clear_sessions(session_key: str) -&gt; None\n</code></pre> <p>Clear all sessions associated with a specific session key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The session key whose sessions are to be cleared.</p> required Deprecated <p>Use: <code>Jam.session_clear</code></p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the auth type is not \"session\".</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/jam/#jam.instance.Jam.create_session","title":"create_session","text":"<pre><code>create_session(session_key: str, data: dict) -&gt; str\n</code></pre> <p>Create a new session.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>Session key</p> required <code>data</code> <code>dict</code> <p>Data to store in session</p> required Deprecated <p>Use: <code>Jam.session_create</code></p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the auth type is not \"session\"</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The created session key</p>"},{"location":"api/jam/#jam.instance.Jam.delete_session","title":"delete_session","text":"<pre><code>delete_session(session_id: str) -&gt; None\n</code></pre> <p>Delete a session by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to delete.</p> required Deprecated <p>Use: <code>Jam.session_delete</code></p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the auth type is not \"session\".</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/jam/#jam.instance.Jam.gen_jwt_token","title":"gen_jwt_token","text":"<pre><code>gen_jwt_token(payload: dict[str, Any]) -&gt; str\n</code></pre> <p>Creating a new token.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>dict[str, Any]</code> <p>Payload with information</p> required Deprecated <p>Use <code>Jam.jwt_create_token</code></p> <p>Raises:</p> Type Description <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None</p> <code>EmtpyPrivateKey</code> <p>If RSA algorithm is selected, but private key None</p>"},{"location":"api/jam/#jam.instance.Jam.get_otp_code","title":"get_otp_code","text":"<pre><code>get_otp_code(\n    secret: Union[str, bytes], factor: Optional[int] = None\n) -&gt; str\n</code></pre> <p>Generates an OTP.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str | bytes</code> <p>User secret key.</p> required <code>factor</code> <code>int | None</code> <p>Unixtime for TOTP(if none, use now time) / Counter for HOTP.</p> <code>None</code> Deprecated <p>Use: Jam.otp_code</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>OTP code (fixed-length string).</p>"},{"location":"api/jam/#jam.instance.Jam.get_otp_uri","title":"get_otp_uri","text":"<pre><code>get_otp_uri(\n    secret: str,\n    name: Optional[str] = None,\n    issuer: Optional[str] = None,\n    counter: Optional[int] = None,\n) -&gt; str\n</code></pre> <p>Generates an otpauth:// URI for Google Authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>User secret key.</p> required <code>name</code> <code>str</code> <p>Account name (e.g., email).</p> <code>None</code> <code>issuer</code> <code>str</code> <p>Service name (e.g., \"GitHub\").</p> <code>None</code> <code>counter</code> <code>int | None</code> <p>Counter (for HOTP). Default is None.</p> <code>None</code> Deprecated <p>Use: <code>Jam.otp_uri</code></p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string of the form \"otpauth://...\"</p>"},{"location":"api/jam/#jam.instance.Jam.get_session","title":"get_session","text":"<pre><code>get_session(session_id: str) -&gt; Optional[dict]\n</code></pre> <p>Retrieve session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to retrieve.</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the auth type is not \"session\".</p> Deprecated <p>Use: <code>Jam.session_get</code></p> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>dict | None: The session data if found, otherwise None.</p>"},{"location":"api/jam/#jam.instance.Jam.jwt_create_token","title":"jwt_create_token","text":"<pre><code>jwt_create_token(payload: dict[str, Any]) -&gt; str\n</code></pre> <p>Create JWT token.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>dict[str, Any]</code> <p>Data payload</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>New token</p> <p>Raises:</p> Type Description <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None</p> <code>EmtpyPrivateKey</code> <p>If RSA algorithm is selected, but private key None</p>"},{"location":"api/jam/#jam.instance.Jam.jwt_make_payload","title":"jwt_make_payload","text":"<pre><code>jwt_make_payload(\n    exp: Optional[int], data: dict[str, Any]\n) -&gt; dict[str, Any]\n</code></pre> <p>Make JWT-specific payload.</p> <p>Parameters:</p> Name Type Description Default <code>exp</code> <code>int | None</code> <p>Token expire, if None -&gt; use default</p> required <code>data</code> <code>dict[str, Any]</code> <p>Data to payload</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Payload</p>"},{"location":"api/jam/#jam.instance.Jam.jwt_verify_token","title":"jwt_verify_token","text":"<pre><code>jwt_verify_token(\n    token: str,\n    check_exp: bool = True,\n    check_list: bool = True,\n) -&gt; dict[str, Any]\n</code></pre> <p>Verify and decode JWT token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>JWT token</p> required <code>check_exp</code> <code>bool</code> <p>Check expire</p> <code>True</code> <code>check_list</code> <code>bool</code> <p>Check white/black list. Docs: https://jam.makridenko.ru/jwt/lists/what/</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Decoded payload</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the token is invalid.</p> <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None.</p> <code>EmtpyPublicKey</code> <p>If RSA algorithm is selected, but public key None.</p> <code>NotFoundSomeInPayload</code> <p>If 'exp' not found in payload.</p> <code>TokenLifeTimeExpired</code> <p>If token has expired.</p> <code>TokenNotInWhiteList</code> <p>If the list type is white, but the token is  not there</p> <code>TokenInBlackList</code> <p>If the list type is black and the token is there</p>"},{"location":"api/jam/#jam.instance.Jam.make_payload","title":"make_payload","text":"<pre><code>make_payload(\n    exp: Optional[int] = None, **data\n) -&gt; dict[str, Any]\n</code></pre> <p>Payload maker tool.</p> <p>Parameters:</p> Name Type Description Default <code>exp</code> <code>int | None</code> <p>If none exp = JWTModule.exp</p> <code>None</code> <code>**data</code> <p>Custom data</p> <code>{}</code> Deprecated <p>Use <code>Jam.jwt_make_payload</code></p>"},{"location":"api/jam/#jam.instance.Jam.oauth2_client_credentials_flow","title":"oauth2_client_credentials_flow","text":"<pre><code>oauth2_client_credentials_flow(\n    provider: str,\n    scope: Optional[list[str]] = None,\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Obtain access token using client credentials flow (no user interaction).</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>OAuth2 provider</p> required <code>scope</code> <code>list[str] | None</code> <p>Auth scope</p> <code>None</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>JSON with access token</p>"},{"location":"api/jam/#jam.instance.Jam.oauth2_fetch_token","title":"oauth2_fetch_token","text":"<pre><code>oauth2_fetch_token(\n    provider: str,\n    code: str,\n    grant_type: str = \"authorization_code\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Exchange authorization code for access token.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>code</code> <code>str</code> <p>OAuth2 code</p> required <code>grant_type</code> <code>str</code> <p>Type of oauth2 grant</p> <code>'authorization_code'</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>OAuth2 token</p>"},{"location":"api/jam/#jam.instance.Jam.oauth2_get_authorized_url","title":"oauth2_get_authorized_url","text":"<pre><code>oauth2_get_authorized_url(\n    provider: str, scope: list[str], **extra_params: Any\n) -&gt; str\n</code></pre> <p>Generate full OAuth2 authorization URL.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>scope</code> <code>list[str]</code> <p>Auth scope</p> required <code>extra_params</code> <code>Any</code> <p>Extra ath params</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Authorization url</p>"},{"location":"api/jam/#jam.instance.Jam.oauth2_refresh_token","title":"oauth2_refresh_token","text":"<pre><code>oauth2_refresh_token(\n    provider: str,\n    refresh_token: str,\n    grant_type: str = \"refresh_token\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Use refresh token to obtain a new access token.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>refresh_token</code> <code>str</code> <p>Refresh token</p> required <code>grant_type</code> <code>str</code> <p>Grant type</p> <code>'refresh_token'</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>Refresh token</p>"},{"location":"api/jam/#jam.instance.Jam.otp_code","title":"otp_code","text":"<pre><code>otp_code(\n    secret: Union[str, bytes], factor: Optional[int] = None\n) -&gt; str\n</code></pre> <p>Generates an OTP.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str | bytes</code> <p>User secret key.</p> required <code>factor</code> <code>int | None</code> <p>Unixtime for TOTP(if none, use now time) / Counter for HOTP.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>OTP code (fixed-length string).</p>"},{"location":"api/jam/#jam.instance.Jam.otp_uri","title":"otp_uri","text":"<pre><code>otp_uri(\n    secret: str,\n    name: Optional[str] = None,\n    issuer: Optional[str] = None,\n    counter: Optional[int] = None,\n) -&gt; str\n</code></pre> <p>Generates an otpauth:// URI for Google Authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>User secret key.</p> required <code>name</code> <code>str</code> <p>Account name (e.g., email).</p> <code>None</code> <code>issuer</code> <code>str</code> <p>Service name (e.g., \"GitHub\").</p> <code>None</code> <code>counter</code> <code>int | None</code> <p>Counter (for HOTP). Default is None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string of the form \"otpauth://...\"</p>"},{"location":"api/jam/#jam.instance.Jam.otp_verify_code","title":"otp_verify_code","text":"<pre><code>otp_verify_code(\n    secret: Union[str, bytes],\n    code: str,\n    factor: Optional[int] = None,\n    look_ahead: Optional[int] = 1,\n) -&gt; bool\n</code></pre> <p>Checks the OTP code, taking into account the acceptable window.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str | bytes</code> <p>User secret key.</p> required <code>code</code> <code>str</code> <p>The code entered.</p> required <code>factor</code> <code>int | None</code> <p>Unixtime for TOTP(if none, use now time) / Counter for HOTP.</p> <code>None</code> <code>look_ahead</code> <code>int</code> <p>Acceptable deviation in intervals (\u00b1window(totp) / \u00b1look ahead(hotp)). Default is 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the code matches, otherwise False.</p>"},{"location":"api/jam/#jam.instance.Jam.rework_session","title":"rework_session","text":"<pre><code>rework_session(old_session_key: str) -&gt; str\n</code></pre> <p>Rework an existing session key to a new one.</p> <p>Parameters:</p> Name Type Description Default <code>old_session_key</code> <code>str</code> <p>The old session key to be reworked.</p> required Deprecated <p>Use: <code>Jam.session_rework</code></p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the auth type is not \"session\".</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The new session key.</p>"},{"location":"api/jam/#jam.instance.Jam.session_clear","title":"session_clear","text":"<pre><code>session_clear(session_key: str) -&gt; None\n</code></pre> <p>Delete all sessions by key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>Key of session</p> required"},{"location":"api/jam/#jam.instance.Jam.session_create","title":"session_create","text":"<pre><code>session_create(\n    session_key: str, data: dict[str, Any]\n) -&gt; str\n</code></pre> <p>Create new session.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>Key for session</p> required <code>data</code> <code>dict[str, Any]</code> <p>Session data</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>New session ID</p>"},{"location":"api/jam/#jam.instance.Jam.session_delete","title":"session_delete","text":"<pre><code>session_delete(session_id: str) -&gt; None\n</code></pre> <p>Delete session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required"},{"location":"api/jam/#jam.instance.Jam.session_get","title":"session_get","text":"<pre><code>session_get(session_id: str) -&gt; Optional[dict[str, Any]]\n</code></pre> <p>Get data from session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required <p>Returns:</p> Type Description <code>Optional[dict[str, Any]]</code> <p>dict[str, Any] | None: Session data if exist</p>"},{"location":"api/jam/#jam.instance.Jam.session_rework","title":"session_rework","text":"<pre><code>session_rework(old_session_id: str) -&gt; str\n</code></pre> <p>Rework session.</p> <p>Parameters:</p> Name Type Description Default <code>old_session_id</code> <code>str</code> <p>Old session id</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>New session id</p>"},{"location":"api/jam/#jam.instance.Jam.session_update","title":"session_update","text":"<pre><code>session_update(\n    session_id: str, data: dict[str, Any]\n) -&gt; None\n</code></pre> <p>Update session data.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required <code>data</code> <code>dict[str, Any]</code> <p>New data</p> required"},{"location":"api/jam/#jam.instance.Jam.update_session","title":"update_session","text":"<pre><code>update_session(session_id: str, data: dict) -&gt; None\n</code></pre> <p>Update session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to update.</p> required <code>data</code> <code>dict</code> <p>The new data to update the session with.</p> required Deprecated <p>Use: <code>Jam.session_update</code></p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the auth type is not \"session\".</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/jam/#jam.instance.Jam.verify_jwt_token","title":"verify_jwt_token","text":"<pre><code>verify_jwt_token(\n    token: str,\n    check_exp: bool = True,\n    check_list: bool = True,\n) -&gt; dict[str, Any]\n</code></pre> <p>A method for verifying a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The token to check</p> required <code>check_exp</code> <code>bool</code> <p>Check for expiration?</p> <code>True</code> <code>check_list</code> <code>bool</code> <p>Check if there is a black/white list</p> <code>True</code> Deprecated <p>Use <code>Jam.jwt_verify_token</code></p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the token is invalid.</p> <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None.</p> <code>EmtpyPublicKey</code> <p>If RSA algorithm is selected, but public key None.</p> <code>NotFoundSomeInPayload</code> <p>If 'exp' not found in payload.</p> <code>TokenLifeTimeExpired</code> <p>If token has expired.</p> <code>TokenNotInWhiteList</code> <p>If the list type is white, but the token is  not there</p> <code>TokenInBlackList</code> <p>If the list type is black and the token is there</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Payload from token</p>"},{"location":"api/jam/#jam.instance.Jam.verify_otp_code","title":"verify_otp_code","text":"<pre><code>verify_otp_code(\n    secret: Union[str, bytes],\n    code: str,\n    factor: Optional[int] = None,\n    look_ahead: Optional[int] = 1,\n) -&gt; bool\n</code></pre> <p>Checks the OTP code, taking into account the acceptable window.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str | bytes</code> <p>User secret key.</p> required <code>code</code> <code>str</code> <p>The code entered.</p> required <code>factor</code> <code>int | None</code> <p>Unixtime for TOTP(if none, use now time) / Counter for HOTP.</p> <code>None</code> <code>look_ahead</code> <code>int</code> <p>Acceptable deviation in intervals (\u00b1window(totp) / \u00b1look ahead(hotp)). Default is 1.</p> <code>1</code> Deprecated <p>Use: <code>Jam.otp_verify_code</code></p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the code matches, otherwise False.</p>"},{"location":"api/jwt/","title":"jam.jwt","text":""},{"location":"api/jwt/#modules","title":"Modules","text":"<ul> <li><code>lists</code></li> <li><code>__utils__</code></li> <li><code>tools</code></li> <li><code>types</code></li> </ul> <p>FILE PATH: <code>jam/jwt/__init__.py</code></p>"},{"location":"api/modules/","title":"jam.modules","text":"<ul> <li><code>BaseModule</code></li> <li><code>JWTModule</code></li> <li><code>SessionModule</code></li> </ul>"},{"location":"api/oauth2/","title":"jam.oath2","text":"<p>OAuth2 module.</p>"},{"location":"api/oauth2/#instances","title":"Instances","text":"<ul> <li><code>BaseOAuth2Client</code></li> <li><code>GitHubOAuth2Client</code></li> <li><code>GitLabOAuth2Client</code></li> <li><code>GoogleOAuth2Client</code></li> <li><code>YandexOAuth2Client</code></li> </ul>"},{"location":"api/oauth2/#modules","title":"Modules","text":"<ul> <li><code>buitin</code></li> <li><code>__abc_oauth2_repo__</code></li> <li><code>client</code></li> </ul> <p>FILE PATH: <code>jam/oauth2/__init__.py</code></p>"},{"location":"api/otp/","title":"jam.otp","text":"<p>*OTP auth module</p>"},{"location":"api/otp/#instances","title":"Instances","text":"<ul> <li><code>BaseOTP</code></li> <li><code>HOTP</code></li> <li><code>TOTP</code></li> </ul> <p>FILE PATH: <code>jam/otp/__init__.py</code></p>"},{"location":"api/sessions/","title":"jam.sessions","text":"<p>Module for making server auth sessions.</p>"},{"location":"api/sessions/#instances","title":"Instances","text":"<ul> <li><code>BaseSessionModule</code></li> </ul>"},{"location":"api/sessions/#modules","title":"Modules","text":"<ul> <li><code>json</code></li> <li><code>redis</code></li> </ul> <p>FILE PATH: <code>jam/sessions/__init__.py</code></p>"},{"location":"api/tests/","title":"jam.tests","text":"<p>Test clients for simplified unit and integration testing.</p>"},{"location":"api/tests/#instances","title":"Instances","text":"<ul> <li><code>TestAsyncJam</code></li> <li><code>TestJam</code></li> </ul>"},{"location":"api/tests/#modules","title":"Modules","text":"<ul> <li><code>clients</code></li> <li><code>fakers</code></li> </ul> <p>FILE PATH: <code>jam/tests/__init__.py</code></p>"},{"location":"api/utils/","title":"jam.utils","text":"<p>Various utilities that help with authorization.</p>"},{"location":"api/utils/#functions","title":"Functions","text":"<ul> <li><code>generate_aes_key</code></li> <li><code>generate_otp_key</code></li> <li><code>otp_key_from_string</code></li> <li><code>generate_rsa_key_pair</code></li> <li><code>check_password</code></li> <li><code>deserialize_hash</code></li> <li><code>hash_password</code></li> <li><code>serialize_hash</code></li> <li><code>xor_my_data</code></li> </ul>"},{"location":"api/utils/#modules","title":"Modules","text":"<ul> <li><code>aes</code></li> <li><code>config_maker</code></li> <li><code>otp_keys</code></li> <li><code>rsa</code></li> <li><code>salt_hash</code></li> <li><code>xor</code></li> </ul> <p>FILE PATH: <code>jam/utils/__init__.py</code></p>"},{"location":"api/aio/jam/","title":"jam.aio.Jam","text":"<p>FILE PATH: <code>jam/aio/instance.py</code></p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam","title":"Jam","text":"<pre><code>Jam(\n    config: Union[dict[str, Any], str] = \"pyproject.toml\",\n    pointer: str = \"jam\",\n)\n</code></pre> <p>               Bases: <code>BaseJam</code></p> <p>Main instance for aio.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[str, Any] | str</code> <p>dict or path to config file</p> <code>'pyproject.toml'</code> <code>pointer</code> <code>str</code> <p>Config read point</p> <code>'jam'</code> <p>Methods:</p> Name Description <code>clear_sessions</code> <p>Clear all sessions associated with a specific session key.</p> <code>create_session</code> <p>Create new session.</p> <code>delete_session</code> <p>Delete a session by its ID.</p> <code>gen_jwt_token</code> <p>Creating a new token.</p> <code>get_otp_code</code> <p>Generates an OTP.</p> <code>get_otp_uri</code> <p>Generates an otpauth:// URI for Google Authenticator.</p> <code>get_session</code> <p>Retrieve session data by session ID.</p> <code>jwt_create_token</code> <p>Create JWT token.</p> <code>jwt_make_payload</code> <p>Make JWT-specific payload.</p> <code>jwt_verify_token</code> <p>Verify and decode JWT token.</p> <code>make_payload</code> <p>Payload maker tool.</p> <code>oauth2_client_credentials_flow</code> <p>Obtain access token using client credentials flow (no user interaction).</p> <code>oauth2_fetch_token</code> <p>Exchange authorization code for access token.</p> <code>oauth2_get_authorized_url</code> <p>Generate full OAuth2 authorization URL.</p> <code>oauth2_refresh_token</code> <p>Use refresh token to obtain a new access token.</p> <code>otp_code</code> <p>Generates an OTP.</p> <code>otp_uri</code> <p>Generates an otpauth:// URI for Google Authenticator.</p> <code>otp_verify_code</code> <p>Checks the OTP code, taking into account the acceptable window.</p> <code>rework_session</code> <p>Rework an existing session key to a new one.</p> <code>session_clear</code> <p>Delete all sessions by key.</p> <code>session_create</code> <p>Create new session.</p> <code>session_delete</code> <p>Delete session.</p> <code>session_get</code> <p>Get data from session.</p> <code>session_rework</code> <p>Rework session.</p> <code>session_update</code> <p>Update session data.</p> <code>update_session</code> <p>Update session data by session ID.</p> <code>verify_jwt_token</code> <p>A method for verifying a token.</p> <code>verify_otp_code</code> <p>Checks the OTP code, taking into account the acceptable window.</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.clear_sessions","title":"clear_sessions  <code>async</code>","text":"<pre><code>clear_sessions(session_key: str) -&gt; None\n</code></pre> <p>Clear all sessions associated with a specific session key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>Key for session scope</p> required Deprecated <p>Use: <code>Jam.session_clear</code></p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.create_session","title":"create_session  <code>async</code>","text":"<pre><code>create_session(\n    session_key: str, data: dict[str, Any]\n) -&gt; str\n</code></pre> <p>Create new session.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>Key for sessions</p> required <code>data</code> <code>dict[str, Any]</code> <p>Session payload</p> required Deprecated <p>Use: <code>Jam.session_create</code></p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>New session ID</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.delete_session","title":"delete_session  <code>async</code>","text":"<pre><code>delete_session(session_id: str) -&gt; None\n</code></pre> <p>Delete a session by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required Deprecated <p>Use: <code>Jam.session_delete</code></p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.gen_jwt_token","title":"gen_jwt_token  <code>async</code>","text":"<pre><code>gen_jwt_token(payload: dict[str, Any]) -&gt; str\n</code></pre> <p>Creating a new token.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>dict[str, Any]</code> <p>Payload with information</p> required Deprecated <p>Use: <code>Jam.jwt_create_token</code></p> <p>Raises:</p> Type Description <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None</p> <code>EmtpyPrivateKey</code> <p>If RSA algorithm is selected, but private key None</p> <p>Returns:</p> Type Description <code>str</code> <p>Generated token</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.get_otp_code","title":"get_otp_code  <code>async</code>","text":"<pre><code>get_otp_code(\n    secret: Union[str, bytes], factor: Optional[int] = None\n) -&gt; str\n</code></pre> <p>Generates an OTP.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str | bytes</code> <p>User secret key.</p> required <code>factor</code> <code>int | None</code> <p>Unixtime for TOTP(if none, use now time) / Counter for HOTP.</p> <code>None</code> Deprecated <p>Use: <code>Jam.otp_code</code></p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>OTP code (fixed-length string).</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.get_otp_uri","title":"get_otp_uri  <code>async</code>","text":"<pre><code>get_otp_uri(\n    secret: str,\n    name: Optional[str] = None,\n    issuer: Optional[str] = None,\n    counter: Optional[int] = None,\n) -&gt; str\n</code></pre> <p>Generates an otpauth:// URI for Google Authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>User secret key.</p> required <code>name</code> <code>str</code> <p>Account name (e.g., email).</p> <code>None</code> <code>issuer</code> <code>str</code> <p>Service name (e.g., \"GitHub\").</p> <code>None</code> <code>counter</code> <code>int | None</code> <p>Counter (for HOTP). Default is None.</p> <code>None</code> Deprecated <p>Use: <code>Jam.otp_uri</code></p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string of the form \"otpauth://...\"</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.get_session","title":"get_session  <code>async</code>","text":"<pre><code>get_session(session_id: str) -&gt; Optional[dict[str, Any]]\n</code></pre> <p>Retrieve session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required Deprecated <p>Use: <code>Jam.session_get</code></p> <p>Returns:</p> Type Description <code>Optional[dict[str, Any]]</code> <p>dict | None: Session payload if exists</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.jwt_create_token","title":"jwt_create_token  <code>async</code>","text":"<pre><code>jwt_create_token(payload: dict[str, Any]) -&gt; str\n</code></pre> <p>Create JWT token.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>dict[str, Any]</code> <p>Data payload</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>New token</p> <p>Raises:</p> Type Description <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None</p> <code>EmtpyPrivateKey</code> <p>If RSA algorithm is selected, but private key None</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.jwt_make_payload","title":"jwt_make_payload  <code>async</code>","text":"<pre><code>jwt_make_payload(\n    exp: Optional[int], data: dict[str, Any]\n) -&gt; dict[str, Any]\n</code></pre> <p>Make JWT-specific payload.</p> <p>Parameters:</p> Name Type Description Default <code>exp</code> <code>int | None</code> <p>Token expire, if None -&gt; use default</p> required <code>data</code> <code>dict[str, Any]</code> <p>Data to payload</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Payload</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.jwt_verify_token","title":"jwt_verify_token  <code>async</code>","text":"<pre><code>jwt_verify_token(\n    token: str,\n    check_exp: bool = True,\n    check_list: bool = True,\n) -&gt; dict[str, Any]\n</code></pre> <p>Verify and decode JWT token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>JWT token</p> required <code>check_exp</code> <code>bool</code> <p>Check expire</p> <code>True</code> <code>check_list</code> <code>bool</code> <p>Check white/black list. Docs: https://jam.makridenko.ru/jwt/lists/what/</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Decoded payload</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the token is invalid.</p> <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None.</p> <code>EmtpyPublicKey</code> <p>If RSA algorithm is selected, but public key None.</p> <code>NotFoundSomeInPayload</code> <p>If 'exp' not found in payload.</p> <code>TokenLifeTimeExpired</code> <p>If token has expired.</p> <code>TokenNotInWhiteList</code> <p>If the list type is white, but the token is  not there</p> <code>TokenInBlackList</code> <p>If the list type is black and the token is there</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.make_payload","title":"make_payload  <code>async</code>","text":"<pre><code>make_payload(\n    exp: Optional[int] = None, **data: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Payload maker tool.</p> <p>Parameters:</p> Name Type Description Default <code>exp</code> <code>int | None</code> <p>If none exp = JWTModule.exp</p> <code>None</code> <code>**data</code> <code>Any</code> <p>Custom data</p> <code>{}</code> Deprecated <p>Use: <code>Jam.jwt_make_payload</code></p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.oauth2_client_credentials_flow","title":"oauth2_client_credentials_flow  <code>async</code>","text":"<pre><code>oauth2_client_credentials_flow(\n    provider: str,\n    scope: Optional[list[str]] = None,\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Obtain access token using client credentials flow (no user interaction).</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>scope</code> <code>list[str] | None</code> <p>Auth scope</p> <code>None</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>JSON with access token</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.oauth2_fetch_token","title":"oauth2_fetch_token  <code>async</code>","text":"<pre><code>oauth2_fetch_token(\n    provider: str,\n    code: str,\n    grant_type: str = \"authorization_code\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Exchange authorization code for access token.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>code</code> <code>str</code> <p>OAuth2 code</p> required <code>grant_type</code> <code>str</code> <p>Type of oauth2 grant</p> <code>'authorization_code'</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>OAuth2 token</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.oauth2_get_authorized_url","title":"oauth2_get_authorized_url  <code>async</code>","text":"<pre><code>oauth2_get_authorized_url(\n    provider: str, scope: list[str], **extra_params: Any\n) -&gt; str\n</code></pre> <p>Generate full OAuth2 authorization URL.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>scope</code> <code>list[str]</code> <p>Auth scope</p> required <code>extra_params</code> <code>Any</code> <p>Extra ath params</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Authorization url</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.oauth2_refresh_token","title":"oauth2_refresh_token  <code>async</code>","text":"<pre><code>oauth2_refresh_token(\n    provider: str,\n    refresh_token: str,\n    grant_type: str = \"refresh_token\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Use refresh token to obtain a new access token.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>refresh_token</code> <code>str</code> <p>Refresh token</p> required <code>grant_type</code> <code>str</code> <p>Grant type</p> <code>'refresh_token'</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>Refresh token</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.otp_code","title":"otp_code","text":"<pre><code>otp_code(\n    secret: Union[str, bytes], factor: Optional[int] = None\n) -&gt; str\n</code></pre> <p>Generates an OTP.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str | bytes</code> <p>User secret key.</p> required <code>factor</code> <code>int | None</code> <p>Unixtime for TOTP(if none, use now time) / Counter for HOTP.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>OTP code (fixed-length string).</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.otp_uri","title":"otp_uri","text":"<pre><code>otp_uri(\n    secret: str,\n    name: Optional[str] = None,\n    issuer: Optional[str] = None,\n    counter: Optional[int] = None,\n) -&gt; str\n</code></pre> <p>Generates an otpauth:// URI for Google Authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>User secret key.</p> required <code>name</code> <code>str</code> <p>Account name (e.g., email).</p> <code>None</code> <code>issuer</code> <code>str</code> <p>Service name (e.g., \"GitHub\").</p> <code>None</code> <code>counter</code> <code>int | None</code> <p>Counter (for HOTP). Default is None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string of the form \"otpauth://...\"</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.otp_verify_code","title":"otp_verify_code","text":"<pre><code>otp_verify_code(\n    secret: Union[str, bytes],\n    code: str,\n    factor: Optional[int] = None,\n    look_ahead: Optional[int] = 1,\n) -&gt; bool\n</code></pre> <p>Checks the OTP code, taking into account the acceptable window.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str | bytes</code> <p>User secret key.</p> required <code>code</code> <code>str</code> <p>The code entered.</p> required <code>factor</code> <code>int | None</code> <p>Unixtime for TOTP(if none, use now time) / Counter for HOTP.</p> <code>None</code> <code>look_ahead</code> <code>int</code> <p>Acceptable deviation in intervals (\u00b1window(totp) / \u00b1look ahead(hotp)). Default is 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the code matches, otherwise False.</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.rework_session","title":"rework_session  <code>async</code>","text":"<pre><code>rework_session(old_session_key: str) -&gt; str\n</code></pre> <p>Rework an existing session key to a new one.</p> <p>Parameters:</p> Name Type Description Default <code>old_session_key</code> <code>str</code> <p>Rework session</p> required Deprecated <p>Use: <code>Jam.session_rework</code></p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>New session ID</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.session_clear","title":"session_clear  <code>async</code>","text":"<pre><code>session_clear(session_key: str) -&gt; None\n</code></pre> <p>Delete all sessions by key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>Key of session</p> required"},{"location":"api/aio/jam/#jam.aio.instance.Jam.session_create","title":"session_create  <code>async</code>","text":"<pre><code>session_create(\n    session_key: str, data: dict[str, Any]\n) -&gt; str\n</code></pre> <p>Create new session.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>Key for session</p> required <code>data</code> <code>dict[str, Any]</code> <p>Session data</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>New session ID</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.session_delete","title":"session_delete  <code>async</code>","text":"<pre><code>session_delete(session_id: str) -&gt; None\n</code></pre> <p>Delete session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required"},{"location":"api/aio/jam/#jam.aio.instance.Jam.session_get","title":"session_get  <code>async</code>","text":"<pre><code>session_get(session_id: str) -&gt; Optional[dict[str, Any]]\n</code></pre> <p>Get data from session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required <p>Returns:</p> Type Description <code>Optional[dict[str, Any]]</code> <p>dict[str, Any] | None: Session data if exist</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.session_rework","title":"session_rework  <code>async</code>","text":"<pre><code>session_rework(old_session_id: str) -&gt; str\n</code></pre> <p>Rework session.</p> <p>Parameters:</p> Name Type Description Default <code>old_session_id</code> <code>str</code> <p>Old session id</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>New session id</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.session_update","title":"session_update  <code>async</code>","text":"<pre><code>session_update(\n    session_id: str, data: dict[str, Any]\n) -&gt; None\n</code></pre> <p>Update session data.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required <code>data</code> <code>dict[str, Any]</code> <p>New data</p> required"},{"location":"api/aio/jam/#jam.aio.instance.Jam.update_session","title":"update_session  <code>async</code>","text":"<pre><code>update_session(\n    session_id: str, data: dict[str, Any]\n) -&gt; None\n</code></pre> <p>Update session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required <code>data</code> <code>dict[str, Any]</code> <p>Data for update</p> required Deprecated <p>Use: <code>Jam.session_update</code></p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.verify_jwt_token","title":"verify_jwt_token  <code>async</code>","text":"<pre><code>verify_jwt_token(\n    token: str,\n    check_exp: bool = True,\n    check_list: bool = True,\n) -&gt; dict[str, Any]\n</code></pre> <p>A method for verifying a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The token to check</p> required <code>check_exp</code> <code>bool</code> <p>Check for expiration?</p> <code>True</code> <code>check_list</code> <code>bool</code> <p>Check if there is a black/white list</p> <code>True</code> Deprecated <p>Use: <code>Jam.jwt_verify_token</code></p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the token is invalid.</p> <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None.</p> <code>EmtpyPublicKey</code> <p>If RSA algorithm is selected, but public key None.</p> <code>NotFoundSomeInPayload</code> <p>If 'exp' not found in payload.</p> <code>TokenLifeTimeExpired</code> <p>If token has expired.</p> <code>TokenNotInWhiteList</code> <p>If the list type is white, but the token is  not there</p> <code>TokenInBlackList</code> <p>If the list type is black and the token is there</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Payload from token</p>"},{"location":"api/aio/jam/#jam.aio.instance.Jam.verify_otp_code","title":"verify_otp_code  <code>async</code>","text":"<pre><code>verify_otp_code(\n    secret: Union[str, bytes],\n    code: str,\n    factor: Optional[int] = None,\n    look_ahead: Optional[int] = 1,\n) -&gt; bool\n</code></pre> <p>Checks the OTP code, taking into account the acceptable window.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str | bytes</code> <p>User secret key.</p> required <code>code</code> <code>str</code> <p>The code entered.</p> required <code>factor</code> <code>int | None</code> <p>Unixtime for TOTP(if none, use now time) / Counter for HOTP.</p> <code>None</code> <code>look_ahead</code> <code>int</code> <p>Acceptable deviation in intervals (\u00b1window(totp) / \u00b1look ahead(hotp)). Default is 1.</p> <code>1</code> Deprecated <p>Use: <code>Jam.otp_verify_code</code></p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the code matches, otherwise False.</p>"},{"location":"api/aio/jwt/","title":"jam.aio.jwt","text":""},{"location":"api/aio/jwt/#modules","title":"Modules","text":"<ul> <li><code>lists</code></li> <li><code>tools</code></li> </ul> <p>FILE PATH: <code>jam/aio/jwt/__init__.py</code></p>"},{"location":"api/aio/modules/","title":"jam.aio.modules","text":""},{"location":"api/aio/modules/#instances","title":"Instances","text":"<ul> <li><code>JWTModule</code></li> <li><code>SessionModule</code></li> </ul> <p>FILE PATH: <code>jam/aio/modules.py</code></p>"},{"location":"api/aio/oauth2/","title":"jam.aio.oauth2","text":"<p>Async OAuth2 modules.</p>"},{"location":"api/aio/oauth2/#instances","title":"Instances","text":"<ul> <li><code>GitHubOAuth2Client</code></li> <li><code>GitLabOAuth2Client</code></li> <li><code>GoogleOAuth2Client</code></li> <li><code>YandexOAuth2Client</code></li> </ul>"},{"location":"api/aio/oauth2/#modules","title":"Modules","text":"<ul> <li><code>builtin</code></li> </ul> <p>FILE PATH: <code>jam/aio/oauth2/__init__.py</code></p>"},{"location":"api/aio/sessions/","title":"jam.aio.sessions","text":"<p>Async sessions methods</p>"},{"location":"api/aio/sessions/#modules","title":"Modules","text":"<ul> <li><code>json</code></li> <li><code>redis</code></li> </ul> <p>FILE PATH: <code>jam/aio/sessions/__init__.py</code></p>"},{"location":"api/aio/jwt/lists/","title":"jam.aio.jwt.lists","text":""},{"location":"api/aio/jwt/lists/#modules","title":"Modules","text":"<ul> <li><code>json</code></li> <li><code>redis</code></li> </ul> <p>FILE PATH: <code>jam/aio/jwt/lists/__init__.py</code></p>"},{"location":"api/aio/jwt/tools/","title":"jam.aio.jwt.tools","text":"<p>FILE PATH: <code>jam/aio/jwt/tools.py</code></p>"},{"location":"api/aio/jwt/tools/#jam.aio.jwt.tools","title":"tools","text":"<p>Functions:</p> Name Description <code>__gen_jwt_async__</code> <p>Method for generating JWT token with different algorithms.</p> <code>__payload_maker_async__</code> <p>Tool for making base payload.</p> <code>__validate_jwt_async__</code> <p>Validate a JWT token and return the payload if valid.</p>"},{"location":"api/aio/jwt/tools/#jam.aio.jwt.tools.__gen_jwt_async__","title":"__gen_jwt_async__  <code>async</code>","text":"<pre><code>__gen_jwt_async__(\n    header: dict[str, Any],\n    payload: dict[str, Any],\n    secret: Optional[str] = None,\n    private_key: Optional[str] = None,\n) -&gt; str\n</code></pre> <p>Method for generating JWT token with different algorithms.</p> <p>Example: <pre><code>token = await __gen_jwt_async__(\n    header={\n        \"alg\": \"HS256\",\n        \"type\": \"jwt\"\n    },\n    payload={\n        \"id\": 1\n    },\n    secret=\"SUPER_SECRET\"\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>dict[str, str]</code> <p>Dict with JWT headers</p> required <code>payload</code> <code>dict[str, Any]</code> <p>Custom JWT payload</p> required <code>secret</code> <code>str | None</code> <p>Secret key for HMAC algorithms</p> <code>None</code> <code>private_key</code> <code>str | None</code> <p>Private key for RSA algorithms</p> <code>None</code> <p>Raises:</p> Type Description <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None</p> <code>EmtpyPrivateKey</code> <p>If RSA algorithm is selected, but private key None</p> <p>Returns:</p> Type Description <code>str</code> <p>Access/refresh token</p>"},{"location":"api/aio/jwt/tools/#jam.aio.jwt.tools.__payload_maker_async__","title":"__payload_maker_async__  <code>async</code>","text":"<pre><code>__payload_maker_async__(\n    exp: Optional[int] = None, **data: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Tool for making base payload.</p> <p>Parameters:</p> Name Type Description Default <code>exp</code> <code>int | None</code> <p>Token expire</p> <code>None</code> <code>**data</code> <code>Any</code> <p>Data for payload</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>(dict[str, Any])</p>"},{"location":"api/aio/jwt/tools/#jam.aio.jwt.tools.__validate_jwt_async__","title":"__validate_jwt_async__  <code>async</code>","text":"<pre><code>__validate_jwt_async__(\n    token: str,\n    check_exp: bool = False,\n    secret: Optional[str] = None,\n    public_key: Optional[str] = None,\n) -&gt; dict[str, Any]\n</code></pre> <p>Validate a JWT token and return the payload if valid.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The JWT token to validate.</p> required <code>check_exp</code> <code>bool</code> <p>true to check token lifetime.</p> <code>False</code> <code>secret</code> <code>str | None</code> <p>Secret key for HMAC algorithms.</p> <code>None</code> <code>public_key</code> <code>str | None</code> <p>Public key for RSA algorithms.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The payload if the token is valid.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the token is invalid.</p> <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None.</p> <code>EmtpyPublicKey</code> <p>If RSA algorithm is selected, but public key None.</p> <code>NotFoundSomeInPayload</code> <p>If 'exp' not found in payload.</p> <code>TokenLifeTimeExpired</code> <p>If token has expired.</p>"},{"location":"api/aio/jwt/lists/json/","title":"jam.aio.jwt.lists.json","text":"<p>FILE PATH: <code>jam/aio/jwt/lists/json.py</code></p>"},{"location":"api/aio/jwt/lists/json/#jam.aio.jwt.lists.json","title":"json","text":"<p>Classes:</p> Name Description <code>JSONList</code> <p>Black/White list in JSON format, not recommended for blacklists because it is not convenient to control token lifetime.</p>"},{"location":"api/aio/jwt/lists/json/#jam.aio.jwt.lists.json.JSONList","title":"JSONList","text":"<pre><code>JSONList(\n    type: Literal[\"white\", \"black\"],\n    json_path: str = \"whitelist.json\",\n)\n</code></pre> <p>               Bases: <code>BaseJWTList</code></p> <p>Black/White list in JSON format, not recommended for blacklists because it is not convenient to control token lifetime.</p> <p>Dependency required: <code>pip install jamlib[json]</code></p> <p>Attributes:</p> Name Type Description <code>__list__</code> <code>TinyDB</code> <p>TinyDB instance</p> <p>Methods:</p> Name Description <code>add</code> <p>adding token to list</p> <code>check</code> <p>check token in list</p> <code>delete</code> <p>removing token from list</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['white', 'black']</code> <p>Type of list</p> required <code>json_path</code> <code>str</code> <p>Path to .json file</p> <code>'whitelist.json'</code>"},{"location":"api/aio/jwt/lists/json/#jam.aio.jwt.lists.json.JSONList.add","title":"add  <code>async</code>","text":"<pre><code>add(token: str) -&gt; None\n</code></pre> <p>Method for adding token to list.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Your JWT token</p> required <p>Returns:</p> Type Description <code>None</code> <p>(None)</p>"},{"location":"api/aio/jwt/lists/json/#jam.aio.jwt.lists.json.JSONList.check","title":"check  <code>async</code>","text":"<pre><code>check(token: str) -&gt; bool\n</code></pre> <p>Method for checking if a token is present in list.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Your jwt token</p> required <p>Returns:</p> Type Description <code>bool</code> <p>(bool)</p>"},{"location":"api/aio/jwt/lists/json/#jam.aio.jwt.lists.json.JSONList.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(token: str) -&gt; None\n</code></pre> <p>Method for removing token from list.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Your jwt token</p> required <p>Returns:</p> Type Description <code>None</code> <p>(None)</p>"},{"location":"api/aio/jwt/lists/redis/","title":"jam.aio.jwt.lists.redis","text":"<p>FILE PATH: <code>jam/aio/jwt/lists/redis.py</code></p>"},{"location":"api/aio/jwt/lists/redis/#jam.aio.jwt.lists.redis","title":"redis","text":"<p>Classes:</p> Name Description <code>RedisList</code> <p>Black/White lists in Redis, most optimal format.</p>"},{"location":"api/aio/jwt/lists/redis/#jam.aio.jwt.lists.redis.RedisList","title":"RedisList","text":"<pre><code>RedisList(\n    type: Literal[\"white\", \"black\"],\n    redis_uri: Union[str, Redis],\n    in_list_life_time: Optional[int] = None,\n)\n</code></pre> <p>               Bases: <code>BaseJWTList</code></p> <p>Black/White lists in Redis, most optimal format.</p> <p>Dependency required: <code>pip install jamlib[redis]</code></p> <p>Attributes:</p> Name Type Description <code>__list__</code> <code>Redis</code> <p>Redis instance</p> <code>exp</code> <code>int | None</code> <p>Token lifetime</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['white', 'black']</code> <p>Type of list</p> required <code>redis_uri</code> <code>str</code> <p>Uri to redis connect</p> required <code>in_list_life_time</code> <code>int | None</code> <p>The lifetime of a token in the list</p> <code>None</code> <p>Methods:</p> Name Description <code>add</code> <p>Method for adding token to list.</p> <code>check</code> <p>Method for checking if a token is present in the list.</p> <code>delete</code> <p>Method for removing a token from a list.</p>"},{"location":"api/aio/jwt/lists/redis/#jam.aio.jwt.lists.redis.RedisList.add","title":"add  <code>async</code>","text":"<pre><code>add(token: str) -&gt; None\n</code></pre> <p>Method for adding token to list.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Your JWT token</p> required <p>Returns:</p> Type Description <code>None</code> <p>(None)</p>"},{"location":"api/aio/jwt/lists/redis/#jam.aio.jwt.lists.redis.RedisList.check","title":"check  <code>async</code>","text":"<pre><code>check(token: str) -&gt; bool\n</code></pre> <p>Method for checking if a token is present in the list.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Your JWT token</p> required <p>Returns:</p> Type Description <code>bool</code> <p>(bool)</p>"},{"location":"api/aio/jwt/lists/redis/#jam.aio.jwt.lists.redis.RedisList.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(token: str) -&gt; None\n</code></pre> <p>Method for removing a token from a list.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Your JWT token</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/aio/modules/jwt_module/","title":"jam.aio.modules.JWTModule","text":"<p>FILE PATH: <code>jam/aio/modules.py</code></p>"},{"location":"api/aio/modules/jwt_module/#jam.aio.modules.JWTModule","title":"JWTModule","text":"<pre><code>JWTModule(\n    alg: Literal[\n        \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\"\n    ] = \"HS256\",\n    secret_key: Optional[str] = None,\n    public_key: Optional[str] = None,\n    private_key: Optional[str] = None,\n    expire: int = 3600,\n    list: Optional[dict[str, Any]] = None,\n)\n</code></pre> <p>               Bases: <code>BaseModule</code></p> <p>Module for JWT auth.</p> <p>Parameters:</p> Name Type Description Default <code>alg</code> <code>Literal['HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512', 'PS512', 'PS384', 'PS512']</code> <p>Algorithm for token encryption</p> <code>'HS256'</code> <code>secret_key</code> <code>str | None</code> <p>Secret key for HMAC enecryption</p> <code>None</code> <code>private_key</code> <code>str | None</code> <p>Private key for RSA enecryption</p> <code>None</code> <code>public_key</code> <code>str | None</code> <p>Public key for RSA</p> <code>None</code> <code>expire</code> <code>int</code> <p>Token lifetime in seconds</p> <code>3600</code> <code>list</code> <code>dict[str, Any]</code> <p>List config</p> <code>None</code> <p>Methods:</p> Name Description <code>gen_token</code> <p>Creating a new token.</p> <code>make_payload</code> <p>Payload maker tool.</p> <code>validate_payload</code> <p>A method for verifying a token.</p>"},{"location":"api/aio/modules/jwt_module/#jam.aio.modules.JWTModule.gen_token","title":"gen_token  <code>async</code>","text":"<pre><code>gen_token(**payload) -&gt; str\n</code></pre> <p>Creating a new token.</p> <p>Parameters:</p> Name Type Description Default <code>**payload</code> <p>Payload with information</p> <code>{}</code> <p>Raises:</p> Type Description <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None</p> <code>EmtpyPrivateKey</code> <p>If RSA algorithm is selected, but private key None</p>"},{"location":"api/aio/modules/jwt_module/#jam.aio.modules.JWTModule.make_payload","title":"make_payload  <code>async</code>","text":"<pre><code>make_payload(\n    exp: Optional[int] = None, **data: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Payload maker tool.</p> <p>Parameters:</p> Name Type Description Default <code>exp</code> <code>int | None</code> <p>If none exp = JWTModule.exp</p> <code>None</code> <code>**data</code> <code>Any</code> <p>Custom data</p> <code>{}</code>"},{"location":"api/aio/modules/jwt_module/#jam.aio.modules.JWTModule.validate_payload","title":"validate_payload  <code>async</code>","text":"<pre><code>validate_payload(\n    token: str,\n    check_exp: bool = False,\n    check_list: bool = True,\n) -&gt; dict[str, Any]\n</code></pre> <p>A method for verifying a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The token to check</p> required <code>check_exp</code> <code>bool</code> <p>Check for expiration?</p> <code>False</code> <code>check_list</code> <code>bool</code> <p>Check if there is a black/white list</p> <code>True</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the token is invalid.</p> <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None.</p> <code>EmtpyPublicKey</code> <p>If RSA algorithm is selected, but public key None.</p> <code>NotFoundSomeInPayload</code> <p>If 'exp' not found in payload.</p> <code>TokenLifeTimeExpired</code> <p>If token has expired.</p> <code>TokenNotInWhiteList</code> <p>If the list type is white, but the token is  not there</p> <code>TokenInBlackList</code> <p>If the list type is black and the token is there</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Payload from token</p>"},{"location":"api/aio/modules/session_module/","title":"jam.aio.modules.SessionModule","text":""},{"location":"api/aio/modules/session_module/#jam.aio.modules.SessionModule","title":"SessionModule","text":"<pre><code>SessionModule(\n    sessions_type: Literal[\"redis\", \"json\", \"custom\"],\n    id_factory: Callable[[], str] = lambda: str(uuid4()),\n    is_session_crypt: bool = False,\n    session_aes_secret: Optional[bytes] = None,\n    **module_kwargs: Any\n)\n</code></pre> <p>               Bases: <code>BaseModule</code></p> <p>Module for session management.</p> <p>Parameters:</p> Name Type Description Default <code>sessions_type</code> <code>Literal['redis', 'json']</code> <p>Type of session storage.</p> required <code>id_factory</code> <code>Callable[[], str]</code> <p>A callable that generates unique IDs. Defaults to a UUID factory.</p> <code>lambda: str(uuid4())</code> <code>is_session_crypt</code> <code>bool</code> <p>If True, session keys will be encoded. Defaults to False.</p> <code>False</code> <code>session_aes_secret</code> <code>Optional[bytes]</code> <p>AES secret for encoding session keys.</p> <code>None</code> <code>**module_kwargs</code> <code>Any</code> <p>Additional keyword arguments for the session module. See  <code>{}</code> <p>Methods:</p> Name Description <code>clear</code> <p>Clear all sessions by key.</p> <code>create</code> <p>Create a new session with the given session key and data.</p> <code>delete</code> <p>Delete a session by its key or ID.</p> <code>get</code> <p>Retrieve a session by its key or ID.</p> <code>rework</code> <p>Reworks a session and returns its new ID.</p> <code>update</code> <p>Update an existing session with new data.</p> <p>FILE PATH: <code>jam/aio/modules.py</code></p>"},{"location":"api/aio/modules/session_module/#jam.aio.modules.SessionModule.clear","title":"clear  <code>async</code>","text":"<pre><code>clear(session_key: str) -&gt; None\n</code></pre> <p>Clear all sessions by key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The session key to clear.</p> required <p>Raises:</p> Type Description <code>SessionNotFoundError</code> <p>If the session does not exist.</p>"},{"location":"api/aio/modules/session_module/#jam.aio.modules.SessionModule.create","title":"create  <code>async</code>","text":"<pre><code>create(session_key: str, data: dict) -&gt; str\n</code></pre> <p>Create a new session with the given session key and data.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The key for the session.</p> required <code>data</code> <code>dict</code> <p>The data to be stored in the session.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The ID of the created session.</p>"},{"location":"api/aio/modules/session_module/#jam.aio.modules.SessionModule.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(session_id: str) -&gt; None\n</code></pre> <p>Delete a session by its key or ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to delete.</p> required <p>Raises:</p> Type Description <code>SessionNotFoundError</code> <p>If the session does not exist.</p>"},{"location":"api/aio/modules/session_module/#jam.aio.modules.SessionModule.get","title":"get  <code>async</code>","text":"<pre><code>get(session_id: str) -&gt; Optional[dict]\n</code></pre> <p>Retrieve a session by its key or ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to retrieve.</p> required <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>dict | None: The data stored in the session.</p> <p>Raises:</p> Type Description <code>SessionNotFoundError</code> <p>If the session does not exist.</p>"},{"location":"api/aio/modules/session_module/#jam.aio.modules.SessionModule.rework","title":"rework  <code>async</code>","text":"<pre><code>rework(session_id: str) -&gt; str\n</code></pre> <p>Reworks a session and returns its new ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to rework.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The new ID of the reworked session.</p> <p>Raises:</p> Type Description <code>SessionNotFoundError</code> <p>If the session does not exist.</p>"},{"location":"api/aio/modules/session_module/#jam.aio.modules.SessionModule.update","title":"update  <code>async</code>","text":"<pre><code>update(session_id: str, data: dict) -&gt; None\n</code></pre> <p>Update an existing session with new data.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to update.</p> required <code>data</code> <code>dict</code> <p>The new data to be stored in the session.</p> required <p>Raises:</p> Type Description <code>SessionNotFoundError</code> <p>If the session does not exist.</p>"},{"location":"api/aio/oauth2/builtin/","title":"jam.aio.oauth2.builtin","text":"<p>Built-in OAuth2 providers.</p>"},{"location":"api/aio/oauth2/builtin/#modules","title":"Modules","text":"<ul> <li><code>github</code></li> <li><code>gitlab</code></li> <li><code>google</code></li> <li><code>yandex</code></li> </ul> <p>FILE PATH: <code>jam/aio/oauth2/builtin/__init__.py</code></p>"},{"location":"api/aio/oauth2/client/","title":"jam.aio.oauth2.client","text":"<p>FILE PATH: <code>jam/aio/oauth2/client.py</code></p>"},{"location":"api/aio/oauth2/client/#jam.aio.oauth2.client","title":"client","text":"<p>Classes:</p> Name Description <code>OAuth2Client</code> <p>Async OAuth2 client.</p>"},{"location":"api/aio/oauth2/client/#jam.aio.oauth2.client.OAuth2Client","title":"OAuth2Client","text":"<pre><code>OAuth2Client(\n    client_id: str,\n    client_secret: str,\n    auth_url: str,\n    token_url: str,\n    redirect_url: str,\n)\n</code></pre> <p>               Bases: <code>BaseOAuth2Client</code></p> <p>Async OAuth2 client.</p> <p>Methods:</p> Name Description <code>client_credentials_flow</code> <p>Obtain access token using client credentials flow (no user interaction).</p> <code>fetch_token</code> <p>Exchange authorization code for access token.</p> <code>get_authorization_url</code> <p>Generate full OAuth2 authorization URL.</p> <code>refresh_token</code> <p>Use refresh token to obtain a new access token.</p>"},{"location":"api/aio/oauth2/client/#jam.aio.oauth2.client.OAuth2Client.__http","title":"__http  <code>async</code>","text":"<pre><code>__http(url: str)\n</code></pre> <p>Create HTTPS connection context manager.</p>"},{"location":"api/aio/oauth2/client/#jam.aio.oauth2.client.OAuth2Client.__post_form","title":"__post_form  <code>async</code>","text":"<pre><code>__post_form(\n    url: str, params: dict[str, Any]\n) -&gt; dict[str, Any]\n</code></pre> <p>Send POST form and parse JSON response.</p>"},{"location":"api/aio/oauth2/client/#jam.aio.oauth2.client.OAuth2Client.client_credentials_flow","title":"client_credentials_flow  <code>async</code>","text":"<pre><code>client_credentials_flow(\n    scope: Optional[list[str]] = None, **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Obtain access token using client credentials flow (no user interaction).</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>list[str] | None</code> <p>Auth scope</p> <code>None</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>JSON with access token</p>"},{"location":"api/aio/oauth2/client/#jam.aio.oauth2.client.OAuth2Client.fetch_token","title":"fetch_token  <code>async</code>","text":"<pre><code>fetch_token(\n    code: str,\n    grant_type: str = \"authorization_code\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Exchange authorization code for access token.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>OAuth2 code</p> required <code>grant_type</code> <code>str</code> <p>Type of oauth2 grant</p> <code>'authorization_code'</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>OAuth2 token</p>"},{"location":"api/aio/oauth2/client/#jam.aio.oauth2.client.OAuth2Client.get_authorization_url","title":"get_authorization_url  <code>async</code>","text":"<pre><code>get_authorization_url(\n    scope: list[str], **extra_params: Any\n) -&gt; str\n</code></pre> <p>Generate full OAuth2 authorization URL.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>list[str]</code> <p>Auth scope</p> required <code>extra_params</code> <code>Any</code> <p>Extra ath params</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Authorization url</p>"},{"location":"api/aio/oauth2/client/#jam.aio.oauth2.client.OAuth2Client.refresh_token","title":"refresh_token  <code>async</code>","text":"<pre><code>refresh_token(\n    refresh_token: str,\n    grant_type: str = \"refresh_token\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Use refresh token to obtain a new access token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>Refresh token</p> required <code>grant_type</code> <code>str</code> <p>Grant type</p> <code>'refresh_token'</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>Refresh token</p>"},{"location":"api/aio/oauth2/builtin/github/","title":"jam.aio.oauth2.builtin.github","text":"<p>FILE PATH: <code>jam/aio/oauth2/builtin/github.py</code></p>"},{"location":"api/aio/oauth2/builtin/github/#jam.aio.oauth2.builtin.github","title":"github","text":"<p>Classes:</p> Name Description <code>GitHubOAuth2Client</code> <p>Rady to use GitHub OAuth2 provider.</p>"},{"location":"api/aio/oauth2/builtin/github/#jam.aio.oauth2.builtin.github.GitHubOAuth2Client","title":"GitHubOAuth2Client","text":"<pre><code>GitHubOAuth2Client(\n    client_id: str, client_secret: str, redirect_url: str\n)\n</code></pre> <p>               Bases: <code>OAuth2Client</code></p> <p>Rady to use GitHub OAuth2 provider.</p> <p>See: https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>ID of your app</p> required <code>client_secret</code> <code>str</code> <p>Secret key</p> required <code>redirect_url</code> <code>str</code> <p>URL for your app</p> required"},{"location":"api/aio/oauth2/builtin/gitlab/","title":"jam.aio.oauth2.builtin.gitlab","text":"<p>FILE PATH: <code>jam/aio/oauth2/builtin/gitlab.py</code></p>"},{"location":"api/aio/oauth2/builtin/gitlab/#jam.aio.oauth2.builtin.gitlab","title":"gitlab","text":"<p>Classes:</p> Name Description <code>GitLabOAuth2Client</code> <p>Ready to use GitLab OAuth2 provider.</p>"},{"location":"api/aio/oauth2/builtin/gitlab/#jam.aio.oauth2.builtin.gitlab.GitLabOAuth2Client","title":"GitLabOAuth2Client","text":"<pre><code>GitLabOAuth2Client(\n    client_id: str, client_secret: str, redirect_url: str\n)\n</code></pre> <p>               Bases: <code>OAuth2Client</code></p> <p>Ready to use GitLab OAuth2 provider.</p> <p>See: https://docs.gitlab.com/api/oauth2/</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>Client ID</p> required <code>client_secret</code> <code>str</code> <p>Secret key</p> required <code>redirect_url</code> <code>str</code> <p>Your app url</p> required"},{"location":"api/aio/oauth2/builtin/google/","title":"jam.aio.oauth2.builtin.google","text":"<p>FILE PATH: <code>jam/aio/oauth2/builtin/google.py</code></p>"},{"location":"api/aio/oauth2/builtin/google/#jam.aio.oauth2.builtin.google","title":"google","text":"<p>Classes:</p> Name Description <code>GoogleOAuth2Client</code> <p>Ready to use Google OAuth2 provider.</p>"},{"location":"api/aio/oauth2/builtin/google/#jam.aio.oauth2.builtin.google.GoogleOAuth2Client","title":"GoogleOAuth2Client","text":"<pre><code>GoogleOAuth2Client(\n    client_id: str, client_secret: str, redirect_url: str\n)\n</code></pre> <p>               Bases: <code>OAuth2Client</code></p> <p>Ready to use Google OAuth2 provider.</p> <p>See: https://developers.google.com/identity/protocols/oauth2</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>Client ID</p> required <code>client_secret</code> <code>str</code> <p>Secret key</p> required <code>redirect_url</code> <code>str</code> <p>URL for your app</p> required"},{"location":"api/aio/oauth2/builtin/yandex/","title":"jam.aio.oauth2.builtin.yandex","text":"<p>FILE PATH: <code>jam/aio/oauth2/builtin/yandex.py</code></p>"},{"location":"api/aio/oauth2/builtin/yandex/#jam.aio.oauth2.builtin.yandex","title":"yandex","text":"<p>Classes:</p> Name Description <code>YandexOAuth2Client</code> <p>Ready to use yandex oauth2 client.</p>"},{"location":"api/aio/oauth2/builtin/yandex/#jam.aio.oauth2.builtin.yandex.YandexOAuth2Client","title":"YandexOAuth2Client","text":"<pre><code>YandexOAuth2Client(\n    client_id: str, client_secret: str, redirect_url: str\n)\n</code></pre> <p>               Bases: <code>OAuth2Client</code></p> <p>Ready to use yandex oauth2 client.</p> <p>See: https://yandex.ru/dev/id/doc</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>Client ID</p> required <code>client_secret</code> <code>str</code> <p>Secret key</p> required <code>redirect_url</code> <code>str</code> <p>Your app URL</p> required"},{"location":"api/aio/sessions/json/","title":"jam.aio.sessions.json","text":"<p>FILE PATH: <code>jam/aio/sessions/json.py</code></p>"},{"location":"api/aio/sessions/json/#jam.aio.sessions.json","title":"json","text":"<p>Classes:</p> Name Description <code>JSONSessions</code> <p>Async session management module for JSON storage.</p>"},{"location":"api/aio/sessions/json/#jam.aio.sessions.json.JSONSessions","title":"JSONSessions","text":"<pre><code>JSONSessions(\n    json_path: str = \"sessions.json\",\n    is_session_crypt: bool = False,\n    session_aes_secret: Optional[bytes] = None,\n    id_factory: Callable[[], str] = lambda: str(uuid4()),\n)\n</code></pre> <p>               Bases: <code>JSONSessions</code></p> <p>Async session management module for JSON storage.</p> <p>Dependency required: <code>pip install jamlib[json]</code></p> <p>Methods:</p> Name Description <code>clear</code> <p>Clear all sessions for a given session key.</p> <code>create</code> <p>Create a new session.</p> <code>delete</code> <p>Delete a session by its ID.</p> <code>get</code> <p>Retrieve session data by session ID.</p> <code>rework</code> <p>Rework (regenerate) a session ID.</p> <code>update</code> <p>Update session data by its ID.</p>"},{"location":"api/aio/sessions/json/#jam.aio.sessions.json.JSONSessions.clear","title":"clear  <code>async</code>","text":"<pre><code>clear(session_key: str) -&gt; None\n</code></pre> <p>Clear all sessions for a given session key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The session key to clear.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/aio/sessions/json/#jam.aio.sessions.json.JSONSessions.create","title":"create  <code>async</code>","text":"<pre><code>create(session_key: str, data: dict) -&gt; str\n</code></pre> <p>Create a new session.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The session key.</p> required <code>data</code> <code>dict</code> <p>The data to be stored in the session.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The ID of the created session.</p>"},{"location":"api/aio/sessions/json/#jam.aio.sessions.json.JSONSessions.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(session_id: str) -&gt; None\n</code></pre> <p>Delete a session by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to delete.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/aio/sessions/json/#jam.aio.sessions.json.JSONSessions.get","title":"get  <code>async</code>","text":"<pre><code>get(session_id) -&gt; Optional[dict]\n</code></pre> <p>Retrieve session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to retrieve.</p> required <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>dict | None: The session data if found, otherwise None.</p>"},{"location":"api/aio/sessions/json/#jam.aio.sessions.json.JSONSessions.rework","title":"rework  <code>async</code>","text":"<pre><code>rework(session_id: str) -&gt; str\n</code></pre> <p>Rework (regenerate) a session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The current session ID to be reworked.</p> required <p>Raises:</p> Type Description <code>SessionNotFoundError</code> <p>If session not found</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The new session ID.</p>"},{"location":"api/aio/sessions/json/#jam.aio.sessions.json.JSONSessions.update","title":"update  <code>async</code>","text":"<pre><code>update(session_id: str, data: dict) -&gt; None\n</code></pre> <p>Update session data by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to update.</p> required <code>data</code> <code>dict</code> <p>The new data to store in the session.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/aio/sessions/redis/","title":"jam.aio.sessions.redis","text":"<p>FILE PATH: <code>jam/aio/sessions/redis.py</code></p>"},{"location":"api/aio/sessions/redis/#jam.aio.sessions.redis","title":"redis","text":"<p>Classes:</p> Name Description <code>RedisSessions</code> <p>Async redis sessions module.</p>"},{"location":"api/aio/sessions/redis/#jam.aio.sessions.redis.RedisSessions","title":"RedisSessions","text":"<pre><code>RedisSessions(\n    redis_uri: Union[\n        str, Redis\n    ] = \"redis://localhost:6379/0\",\n    redis_sessions_key: str = \"sessions\",\n    default_ttl: Optional[int] = 3600,\n    is_session_crypt: bool = False,\n    session_aes_secret: Optional[bytes] = None,\n    id_factory: Callable[[], str] = lambda: str(uuid4()),\n)\n</code></pre> <p>               Bases: <code>RedisSessions</code></p> <p>Async redis sessions module.</p> <p>Dependency required: <code>pip install jamlib[redis]</code></p> <p>Parameters:</p> Name Type Description Default <code>redis_uri</code> <code>str | Redis</code> <p>The URI for the Redis server.</p> <code>'redis://localhost:6379/0'</code> <code>redis_sessions_key</code> <code>str</code> <p>The key under which sessions are stored in Redis.</p> <code>'sessions'</code> <code>default_ttl</code> <code>Optional[int]</code> <p>Default time-to-live for sessions in seconds. Defaults to 3600 seconds (1 hour).</p> <code>3600</code> <code>is_session_crypt</code> <code>bool</code> <p>If True, session keys will be encoded.</p> <code>False</code> <code>session_aes_secret</code> <code>Optional[bytes]</code> <p>AES secret for encoding session keys. Required if <code>is_session_key_crypt</code> is True.</p> <code>None</code> <code>id_factory</code> <code>Callable[[], str]</code> <p>A callable that generates unique IDs. Defaults to a UUID factory.</p> <code>lambda: str(uuid4())</code> <p>Methods:</p> Name Description <code>clear</code> <p>Clear all sessions for a given session key.</p> <code>create</code> <p>Create a new session with the given session key and data.</p> <code>delete</code> <p>Delete a session by its ID.</p> <code>get</code> <p>Retrieve a session by its key or ID.</p> <code>rework</code> <p>Rework a session and return its new ID.</p> <code>update</code> <p>Update an existing session with new data.</p>"},{"location":"api/aio/sessions/redis/#jam.aio.sessions.redis.RedisSessions.clear","title":"clear  <code>async</code>","text":"<pre><code>clear(session_key: str) -&gt; None\n</code></pre> <p>Clear all sessions for a given session key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The session key to clear.</p> required"},{"location":"api/aio/sessions/redis/#jam.aio.sessions.redis.RedisSessions.create","title":"create  <code>async</code>","text":"<pre><code>create(session_key: str, data: dict) -&gt; str\n</code></pre> <p>Create a new session with the given session key and data.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The key for the session.</p> required <code>data</code> <code>dict</code> <p>The data to be stored in the session.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The unique ID of the created session.</p>"},{"location":"api/aio/sessions/redis/#jam.aio.sessions.redis.RedisSessions.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(session_id: str) -&gt; None\n</code></pre> <p>Delete a session by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The session ID.</p> required"},{"location":"api/aio/sessions/redis/#jam.aio.sessions.redis.RedisSessions.get","title":"get  <code>async</code>","text":"<pre><code>get(session_id: str) -&gt; Optional[dict]\n</code></pre> <p>Retrieve a session by its key or ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The session key or ID.</p> required <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>dict | None: The session data if found, otherwise None.</p>"},{"location":"api/aio/sessions/redis/#jam.aio.sessions.redis.RedisSessions.rework","title":"rework  <code>async</code>","text":"<pre><code>rework(session_id: str) -&gt; str\n</code></pre> <p>Rework a session and return its new ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to rework.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The new session ID.</p>"},{"location":"api/aio/sessions/redis/#jam.aio.sessions.redis.RedisSessions.update","title":"update  <code>async</code>","text":"<pre><code>update(session_id: str, data: dict) -&gt; None\n</code></pre> <p>Update an existing session with new data.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to update.</p> required <code>data</code> <code>dict</code> <p>The new data to be stored in the session.</p> required"},{"location":"api/ext/fastapi/","title":"jam.ext.fastapi","text":"<p>FastAPI integration.</p> <p>FastAPI docs: https://fastapi.tiangolo.com/</p>"},{"location":"api/ext/fastapi/#instances","title":"Instances","text":"<ul> <li><code>JWTBackend</code></li> <li><code>SessionBackend</code></li> </ul>"},{"location":"api/ext/flask/","title":"jam.ext.flask","text":"<p>Flask integration.</p> <p>Flask docs: https://flask.palletsprojects.com</p>"},{"location":"api/ext/flask/#instances","title":"Instances","text":"<ul> <li><code>extensions</code></li> </ul>"},{"location":"api/ext/flask/#modules","title":"Modules","text":"<ul> <li><code>JamExtension</code></li> <li><code>JWTExtension</code></li> <li><code>SessionExtension</code></li> </ul> <p>FILE PATH: <code>jam/ext/flask/__init__.py</code></p>"},{"location":"api/ext/litestar/","title":"jam.ext.litestar","text":"<p>Litestar integration.</p> <p>Litestar docs: https://docs.litestar.dev</p>"},{"location":"api/ext/litestar/#instances","title":"Instances","text":"<ul> <li><code>JamPlugin</code></li> <li><code>JWTPlugin</code></li> <li><code>User</code></li> <li><code>Auth</code></li> <li><code>SessionPlugin</code></li> </ul>"},{"location":"api/ext/litestar/#modules","title":"Modules","text":"<ul> <li><code>middlewares</code></li> <li><code>plugins</code></li> <li><code>value</code></li> </ul> <p>FILE PATH: <code>jam/ext/litestar/__init__.py</code></p>"},{"location":"api/ext/starlette/","title":"jam.ext.starlette","text":"<p>Starlette integration.</p> <p>Starlette docs: https://starlette.dev</p>"},{"location":"api/ext/starlette/#instances","title":"Instances","text":"<ul> <li><code>JWTBackend</code></li> <li><code>SessionBackend</code></li> </ul>"},{"location":"api/ext/starlette/#modules","title":"Modules","text":"<ul> <li><code>auth_backends</code></li> <li><code>value</code></li> </ul> <p>FILE PATH: <code>jam/ext/starlette/__init__.py</code></p>"},{"location":"api/ext/flask/extensions/","title":"jam.ext.flask.extensions","text":"<p>FILE PATH: <code>jam/ext/flask/extensions.py</code></p>"},{"location":"api/ext/flask/extensions/#jam.ext.flask.extensions","title":"extensions","text":"<p>Classes:</p> Name Description <code>JWTExtension</code> <p>JWT extension fot flask.</p> <code>JamExtension</code> <p>Base jam extension.</p> <code>SessionExtension</code> <p>Session extension for Jam.</p>"},{"location":"api/ext/flask/extensions/#jam.ext.flask.extensions.JWTExtension","title":"JWTExtension","text":"<pre><code>JWTExtension(\n    jam: Jam,\n    app: Optional[Flask] = None,\n    header_name: Optional[str] = \"Authorization\",\n    cookie_name: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>JamExtension</code></p> <p>JWT extension fot flask.</p> <p>Parameters:</p> Name Type Description Default <code>jam</code> <code>Jam</code> <p>Jam instance</p> required <code>app</code> <code>Flask | None</code> <p>Flask app</p> <code>None</code> <code>header_name</code> <code>str | None</code> <p>Header with access token</p> <code>'Authorization'</code> <code>cookie_name</code> <code>str | None</code> <p>Cookie with access token</p> <code>None</code> <p>Methods:</p> Name Description <code>init_app</code> <p>Flask app init.</p>"},{"location":"api/ext/flask/extensions/#jam.ext.flask.extensions.JWTExtension.init_app","title":"init_app","text":"<pre><code>init_app(app: Flask) -&gt; None\n</code></pre> <p>Flask app init.</p>"},{"location":"api/ext/flask/extensions/#jam.ext.flask.extensions.JamExtension","title":"JamExtension","text":"<pre><code>JamExtension(jam: Jam, app: Optional[Flask] = None)\n</code></pre> <p>Base jam extension.</p> <p>Simply adds instance jam to app.extensions.</p> <p>Parameters:</p> Name Type Description Default <code>jam</code> <code>jam</code> <p>Jam instance</p> required <code>app</code> <code>Flask | None</code> <p>Flask app</p> <code>None</code> <p>Methods:</p> Name Description <code>init_app</code> <p>Flask app init.</p>"},{"location":"api/ext/flask/extensions/#jam.ext.flask.extensions.JamExtension.init_app","title":"init_app","text":"<pre><code>init_app(app: Flask) -&gt; None\n</code></pre> <p>Flask app init.</p>"},{"location":"api/ext/flask/extensions/#jam.ext.flask.extensions.SessionExtension","title":"SessionExtension","text":"<pre><code>SessionExtension(\n    jam: Jam,\n    app: Optional[Flask] = None,\n    header_name: Optional[str] = None,\n    cookie_name: Optional[str] = \"sessionId\",\n)\n</code></pre> <p>               Bases: <code>JamExtension</code></p> <p>Session extension for Jam.</p> <p>Parameters:</p> Name Type Description Default <code>jam</code> <code>Jam</code> <p>Jam instance</p> required <code>app</code> <code>Flask | None</code> <p>Flask app</p> <code>None</code> <code>header_name</code> <code>str | None</code> <p>Session id header</p> <code>None</code> <code>cookie_name</code> <code>str | None</code> <p>Session id cookie</p> <code>'sessionId'</code> <p>Methods:</p> Name Description <code>init_app</code> <p>Flask app init.</p>"},{"location":"api/ext/flask/extensions/#jam.ext.flask.extensions.SessionExtension.init_app","title":"init_app","text":"<pre><code>init_app(app: Flask) -&gt; None\n</code></pre> <p>Flask app init.</p>"},{"location":"api/ext/litestar/middlewares/","title":"jam.ext.litestar.middlewares","text":"<p>FILE PATH: <code>jam/ext/litestat/middlewares.py</code></p>"},{"location":"api/ext/litestar/middlewares/#jam.ext.litestar.middlewares","title":"middlewares","text":"<p>Classes:</p> Name Description <code>JamJWTMiddleware</code> <p>JWT Middleware.</p> <code>JamSessionsMiddleware</code> <p>Jam sessions middleware for litestar.</p>"},{"location":"api/ext/litestar/middlewares/#jam.ext.litestar.middlewares.JamJWTMiddleware","title":"JamJWTMiddleware","text":"<p>               Bases: <code>AbstractAuthenticationMiddleware</code></p> <p>JWT Middleware.</p> <p>Methods:</p> Name Description <code>authenticate_request</code> <p>Auth request.</p>"},{"location":"api/ext/litestar/middlewares/#jam.ext.litestar.middlewares.JamJWTMiddleware.authenticate_request","title":"authenticate_request  <code>async</code>","text":"<pre><code>authenticate_request(\n    connection: ASGIConnection,\n) -&gt; AuthenticationResult\n</code></pre> <p>Auth request.</p>"},{"location":"api/ext/litestar/middlewares/#jam.ext.litestar.middlewares.JamSessionsMiddleware","title":"JamSessionsMiddleware","text":"<p>               Bases: <code>AbstractAuthenticationMiddleware</code></p> <p>Jam sessions middleware for litestar.</p> <p>Methods:</p> Name Description <code>authenticate_request</code> <p>Auth request.</p>"},{"location":"api/ext/litestar/middlewares/#jam.ext.litestar.middlewares.JamSessionsMiddleware.authenticate_request","title":"authenticate_request  <code>async</code>","text":"<pre><code>authenticate_request(\n    connection: ASGIConnection,\n) -&gt; AuthenticationResult\n</code></pre> <p>Auth request.</p>"},{"location":"api/ext/litestar/plugins/","title":"jam.ext.litestar.plugins","text":"<p>FILE PATH: <code>jam/ext/litestar/plugins.md</code></p>"},{"location":"api/ext/litestar/plugins/#jam.ext.litestar.plugins","title":"plugins","text":"<p>Classes:</p> Name Description <code>JWTPlugin</code> <p>JWT Plugin for litestar.</p> <code>JamPlugin</code> <p>Simple Jam plugin for litestar.</p> <code>SessionsPlugin</code> <p>Server side sessions plugin for litestar.</p>"},{"location":"api/ext/litestar/plugins/#jam.ext.litestar.plugins.JWTPlugin","title":"JWTPlugin","text":"<pre><code>JWTPlugin(\n    jam: BaseJam,\n    cookie_name: Optional[str] = None,\n    header_name: Optional[str] = \"Authorization\",\n    user_dataclass: Any = User,\n    auth_dataclass: Any = Auth,\n)\n</code></pre> <p>               Bases: <code>InitPlugin</code></p> <p>JWT Plugin for litestar.</p> <p>Parameters:</p> Name Type Description Default <code>jam</code> <code>BaseJam</code> <p>Jam instance</p> required <code>cookie_name</code> <code>str</code> <p>Cookie name for token check</p> <code>None</code> <code>header_name</code> <code>str</code> <p>Header name for token check</p> <code>'Authorization'</code> <code>user_dataclass</code> <code>Any</code> <p>Specific user dataclass</p> <code>User</code> <code>auth_dataclass</code> <code>Any</code> <p>Specific auth dataclass</p> <code>Auth</code> <p>Methods:</p> Name Description <code>on_app_init</code> <p>Init app config.</p>"},{"location":"api/ext/litestar/plugins/#jam.ext.litestar.plugins.JWTPlugin.on_app_init","title":"on_app_init","text":"<pre><code>on_app_init(app_config: AppConfig) -&gt; AppConfig\n</code></pre> <p>Init app config.</p>"},{"location":"api/ext/litestar/plugins/#jam.ext.litestar.plugins.JamPlugin","title":"JamPlugin","text":"<pre><code>JamPlugin(jam: BaseJam, dependency_key: str = 'jam')\n</code></pre> <p>               Bases: <code>InitPlugin</code></p> <p>Simple Jam plugin for litestar.</p> <p>The plugin adds Jam to Litestar DI.</p> Example <p>from litestar import Litestar from jam import Jam from jam.ext.litestar import JamPlugin jam = Jam() app = Litestar(    plugins=[JamPlugin(jam=jam)],    router_handlers=[your_router] )</p> <p>Parameters:</p> Name Type Description Default <code>jam</code> <code>BaseJam</code> <p>Jam instance</p> required <code>dependency_key</code> <code>str</code> <p>Key in Litestar DI</p> <code>'jam'</code> <p>Methods:</p> Name Description <code>on_app_init</code> <p>Litestar init.</p>"},{"location":"api/ext/litestar/plugins/#jam.ext.litestar.plugins.JamPlugin.on_app_init","title":"on_app_init","text":"<pre><code>on_app_init(app_config: AppConfig) -&gt; AppConfig\n</code></pre> <p>Litestar init.</p>"},{"location":"api/ext/litestar/plugins/#jam.ext.litestar.plugins.SessionsPlugin","title":"SessionsPlugin","text":"<pre><code>SessionsPlugin(\n    jam: BaseJam,\n    cookie_name: Optional[str] = None,\n    header_name: Optional[str] = \"Authorization\",\n    user_dataclass: Any = User,\n    auth_dataclass: Any = Auth,\n)\n</code></pre> <p>               Bases: <code>InitPlugin</code></p> <p>Server side sessions plugin for litestar.</p> <p>Parameters:</p> Name Type Description Default <code>jam</code> <code>BaseJam</code> <p>Jam instance</p> required <code>cookie_name</code> <code>str</code> <p>Cookie name for token check</p> <code>None</code> <code>header_name</code> <code>str</code> <p>Header name for token check</p> <code>'Authorization'</code> <code>user_dataclass</code> <code>Any</code> <p>Specific user dataclass</p> <code>User</code> <code>auth_dataclass</code> <code>Any</code> <p>Specific auth dataclass</p> <code>Auth</code> <p>Methods:</p> Name Description <code>on_app_init</code> <p>Init application.</p>"},{"location":"api/ext/litestar/plugins/#jam.ext.litestar.plugins.SessionsPlugin.on_app_init","title":"on_app_init","text":"<pre><code>on_app_init(app_config: AppConfig) -&gt; AppConfig\n</code></pre> <p>Init application.</p>"},{"location":"api/ext/litestar/value/","title":"jam.ext.litestar.value","text":"<p>FILE PATH: <code>jam/ext/litestra/value.md</code></p>"},{"location":"api/ext/litestar/value/#jam.ext.litestar.value","title":"value","text":"<p>Classes:</p> Name Description <code>Auth</code> <p>Auth model.</p> <code>AuthMiddlewareSettings</code> <p>Setting for jam middleware.</p> <code>User</code> <p>User model.</p>"},{"location":"api/ext/litestar/value/#jam.ext.litestar.value.Auth","title":"Auth  <code>dataclass</code>","text":"<pre><code>Auth(token: str)\n</code></pre> <p>Auth model.</p>"},{"location":"api/ext/litestar/value/#jam.ext.litestar.value.AuthMiddlewareSettings","title":"AuthMiddlewareSettings  <code>dataclass</code>","text":"<pre><code>AuthMiddlewareSettings(\n    cookie_name: Optional[str],\n    header_name: Optional[str],\n    user_dataclass: Any,\n    auth_dataclass: Any,\n)\n</code></pre> <p>Setting for jam middleware.</p>"},{"location":"api/ext/litestar/value/#jam.ext.litestar.value.User","title":"User  <code>dataclass</code>","text":"<pre><code>User(payload: dict[str, Any])\n</code></pre> <p>User model.</p>"},{"location":"api/ext/starlette/auth_backends/","title":"jam.ext.starlette.auth_backends","text":"<p>FILE PATH: <code>jam/ext/starlette/auth_backends.py</code></p>"},{"location":"api/ext/starlette/auth_backends/#jam.ext.starlette.auth_backends","title":"auth_backends","text":"<p>Classes:</p> Name Description <code>JWTBackend</code> <p>JWT Backend for Starlette AuthenticationMiddleware.</p> <code>SessionBackend</code> <p>Sessions backend for starlette.</p>"},{"location":"api/ext/starlette/auth_backends/#jam.ext.starlette.auth_backends.JWTBackend","title":"JWTBackend","text":"<pre><code>JWTBackend(\n    jam: BaseJam,\n    cookie_name: Optional[str] = None,\n    header_name: Optional[str] = \"Authorization\",\n)\n</code></pre> <p>               Bases: <code>AuthenticationBackend</code></p> <p>JWT Backend for Starlette AuthenticationMiddleware.</p> <p>Parameters:</p> Name Type Description Default <code>jam</code> <code>BaseJam</code> <p>Jam instance</p> required <code>cookie_name</code> <code>str | None</code> <p>Access token cookie name</p> <code>None</code> <code>header_name</code> <code>str | None</code> <p>Access token header name</p> <code>'Authorization'</code> <p>Methods:</p> Name Description <code>authenticate</code> <p>Starlette authentication handler.</p>"},{"location":"api/ext/starlette/auth_backends/#jam.ext.starlette.auth_backends.JWTBackend.authenticate","title":"authenticate  <code>async</code>","text":"<pre><code>authenticate(\n    conn: HTTPConnection,\n) -&gt; Optional[tuple[AuthCredentials, BaseUser]]\n</code></pre> <p>Starlette authentication handler.</p>"},{"location":"api/ext/starlette/auth_backends/#jam.ext.starlette.auth_backends.SessionBackend","title":"SessionBackend","text":"<pre><code>SessionBackend(\n    jam: BaseJam,\n    cookie_name: Optional[str] = \"sessionId\",\n    header_name: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>AuthenticationBackend</code></p> <p>Sessions backend for starlette.</p> <p>Parameters:</p> Name Type Description Default <code>jam</code> <code>BaseJam</code> <p>Jam instance</p> required <code>cookie_name</code> <code>str | None</code> <p>Session id cookie name</p> <code>'sessionId'</code> <code>header_name</code> <code>str | None</code> <p>Session id header name</p> <code>None</code> <p>Methods:</p> Name Description <code>authenticate</code> <p>Starlette authentication handler.</p>"},{"location":"api/ext/starlette/auth_backends/#jam.ext.starlette.auth_backends.SessionBackend.authenticate","title":"authenticate  <code>async</code>","text":"<pre><code>authenticate(\n    conn: HTTPConnection,\n) -&gt; Optional[tuple[AuthCredentials, BaseUser]]\n</code></pre> <p>Starlette authentication handler.</p>"},{"location":"api/ext/starlette/value/","title":"jam.ext.starlette.value","text":"<p>FILE PATH: <code>jam/ext/starlette/value.py</code></p>"},{"location":"api/ext/starlette/value/#jam.ext.starlette.value","title":"value","text":"<p>Classes:</p> Name Description <code>Payload</code> <p>Auth payload.</p>"},{"location":"api/ext/starlette/value/#jam.ext.starlette.value.Payload","title":"Payload","text":"<pre><code>Payload(payload: dict[str, Any])\n</code></pre> <p>               Bases: <code>BaseUser</code></p> <p>Auth payload.</p> <p>Attributes:</p> Name Type Description <code>is_authenticated</code> <code>bool</code> <p>Auth checker.</p>"},{"location":"api/ext/starlette/value/#jam.ext.starlette.value.Payload.is_authenticated","title":"is_authenticated  <code>property</code>","text":"<pre><code>is_authenticated: bool\n</code></pre> <p>Auth checker.</p>"},{"location":"api/jwt/lists/","title":"jam.jwt.lists","text":"<p>Module for managing white and black lists.</p> <p>See: https://jam.makridenko.ru/jwt/lists/what/</p>"},{"location":"api/jwt/lists/#instances","title":"Instances","text":"<ul> <li><code>BaseJWTList</code></li> </ul>"},{"location":"api/jwt/lists/#modules","title":"Modules","text":"<ul> <li><code>json</code></li> <li><code>redis</code></li> </ul> <p>FILE PATH: <code>jam/jwt/lists/__init__.py</code></p>"},{"location":"api/jwt/tools/","title":"jam.jwt.tools","text":"<p>FILE PATH: <code>jam/jwt/tools.py</code></p>"},{"location":"api/jwt/tools/#jam.jwt.tools","title":"tools","text":"<p>Functions:</p> Name Description <code>__gen_jwt__</code> <p>Method for generating JWT token with different algorithms.</p> <code>__payload_maker__</code> <p>Tool for making base payload.</p> <code>__validate_jwt__</code> <p>Validate a JWT token and return the payload if valid.</p>"},{"location":"api/jwt/tools/#jam.jwt.tools.__gen_jwt__","title":"__gen_jwt__","text":"<pre><code>__gen_jwt__(\n    header: dict[str, Any],\n    payload: dict[str, Any],\n    secret: Optional[str] = None,\n    private_key: Optional[str] = None,\n) -&gt; str\n</code></pre> <p>Method for generating JWT token with different algorithms.</p> <p>Example: <pre><code>token = __gen_jwt__(\n    header={\n        \"alg\": \"HS256\",\n        \"type\": \"jwt\"\n    },\n    payload={\n        \"id\": 1\n    },\n    secret=\"SUPER_SECRET\"\n)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>dict[str, str]</code> <p>Dict with JWT headers</p> required <code>payload</code> <code>dict[str, Any]</code> <p>Custom JWT payload</p> required <code>secret</code> <code>str | None</code> <p>Secret key for HMAC algorithms</p> <code>None</code> <code>private_key</code> <code>str | None</code> <p>Private key for RSA algorithms</p> <code>None</code> <p>Raises:</p> Type Description <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None</p> <code>EmtpyPrivateKey</code> <p>If RSA algorithm is selected, but private key None</p> <p>Returns:</p> Type Description <code>str</code> <p>Access/refresh token</p>"},{"location":"api/jwt/tools/#jam.jwt.tools.__payload_maker__","title":"__payload_maker__","text":"<pre><code>__payload_maker__(\n    exp: Optional[int], **data\n) -&gt; dict[str, Any]\n</code></pre> <p>Tool for making base payload.</p> <p>Parameters:</p> Name Type Description Default <code>exp</code> <code>int | None</code> <p>Token expire</p> required <code>**data</code> <p>Data for payload</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>(dict[str, Any])</p>"},{"location":"api/jwt/tools/#jam.jwt.tools.__validate_jwt__","title":"__validate_jwt__","text":"<pre><code>__validate_jwt__(\n    token: str,\n    check_exp: bool = False,\n    secret: Optional[str] = None,\n    public_key: Optional[str] = None,\n) -&gt; dict[str, Any]\n</code></pre> <p>Validate a JWT token and return the payload if valid.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The JWT token to validate.</p> required <code>check_exp</code> <code>bool</code> <p>true to check token lifetime.</p> <code>False</code> <code>secret</code> <code>str | None</code> <p>Secret key for HMAC algorithms.</p> <code>None</code> <code>public_key</code> <code>str | None</code> <p>Public key for RSA algorithms.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The payload if the token is valid.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the token is invalid.</p> <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None.</p> <code>EmtpyPublicKey</code> <p>If RSA algorithm is selected, but public key None.</p> <code>NotFoundSomeInPayload</code> <p>If 'exp' not found in payload.</p> <code>TokenLifeTimeExpired</code> <p>If token has expired.</p>"},{"location":"api/jwt/types/","title":"jam.jwt.types","text":"<p>FILE PATH: <code>jam/jwt/types.py</code></p>"},{"location":"api/jwt/types/#jam.jwt.types","title":"types","text":"<p>Classes:</p> Name Description <code>BaseListConfig</code> <p>Base config typedict.</p> <code>CustomListConfig</code> <p>Custom list config.</p> <code>JSONListConfig</code> <p>Json lists config.</p> <code>RedisListConfig</code> <p>Redis lists config.</p>"},{"location":"api/jwt/types/#jam.jwt.types.BaseListConfig","title":"BaseListConfig","text":"<p>               Bases: <code>TypedDict</code></p> <p>Base config typedict.</p>"},{"location":"api/jwt/types/#jam.jwt.types.CustomListConfig","title":"CustomListConfig","text":"<p>               Bases: <code>BaseListConfig</code></p> <p>Custom list config.</p>"},{"location":"api/jwt/types/#jam.jwt.types.JSONListConfig","title":"JSONListConfig","text":"<p>               Bases: <code>BaseListConfig</code></p> <p>Json lists config.</p>"},{"location":"api/jwt/types/#jam.jwt.types.RedisListConfig","title":"RedisListConfig","text":"<p>               Bases: <code>BaseListConfig</code></p> <p>Redis lists config.</p>"},{"location":"api/jwt/utils/","title":"jam.jwt.__utils__","text":"<p>FILE PATH: <code>jam/jwt/__utils__.py</code></p>"},{"location":"api/jwt/utils/#jam.jwt.__utils__","title":"__utils__","text":"<p>Functions:</p> Name Description <code>__base64url_decode__</code> <p>Decodes a URL-safe Base64 encoded string back to bytes.</p> <code>__base64url_encode__</code> <p>Encodes data using URL-safe Base64 encoding.</p>"},{"location":"api/jwt/utils/#jam.jwt.__utils__.__base64url_decode__","title":"__base64url_decode__","text":"<pre><code>__base64url_decode__(data: str) -&gt; bytes\n</code></pre> <p>Decodes a URL-safe Base64 encoded string back to bytes.</p> <p>Automatically adds the necessary padding characters ('=') before decoding.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The Base64url encoded string to decode.</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>The decoded byte data.</p>"},{"location":"api/jwt/utils/#jam.jwt.__utils__.__base64url_encode__","title":"__base64url_encode__","text":"<pre><code>__base64url_encode__(data: bytes) -&gt; str\n</code></pre> <p>Encodes data using URL-safe Base64 encoding.</p> <p>Removes padding characters ('=') typically added in standard Base64 encoding.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>The data to encode.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A URL-safe Base64 encoded string without padding.</p>"},{"location":"api/jwt/lists/base_jwt_list/","title":"jam.jwt.lists.BaseJWTList","text":"<p>FILE PATH: <code>jam/jwt/lists/__abc_list_repo__.py</code></p>"},{"location":"api/jwt/lists/base_jwt_list/#jam.jwt.lists.__abc_list_repo__.BaseJWTList","title":"BaseJWTList","text":"<pre><code>BaseJWTList(list_type: Literal['white', 'black'])\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract class for lists manipulation.</p> <p>Methods:</p> Name Description <code>add</code> <p>Method for adding token to list.</p> <code>check</code> <p>Method for checking if a token is present in the list.</p> <code>delete</code> <p>Method for removing a token from a list.</p>"},{"location":"api/jwt/lists/base_jwt_list/#jam.jwt.lists.__abc_list_repo__.BaseJWTList.add","title":"add  <code>abstractmethod</code>","text":"<pre><code>add(token: str) -&gt; Any\n</code></pre> <p>Method for adding token to list.</p>"},{"location":"api/jwt/lists/base_jwt_list/#jam.jwt.lists.__abc_list_repo__.BaseJWTList.check","title":"check  <code>abstractmethod</code>","text":"<pre><code>check(token: str) -&gt; Any\n</code></pre> <p>Method for checking if a token is present in the list.</p>"},{"location":"api/jwt/lists/base_jwt_list/#jam.jwt.lists.__abc_list_repo__.BaseJWTList.delete","title":"delete  <code>abstractmethod</code>","text":"<pre><code>delete(token: str) -&gt; Any\n</code></pre> <p>Method for removing a token from a list.</p>"},{"location":"api/jwt/lists/json/","title":"jam.jwt.lists.json","text":"<p>FILE PATH: <code>jam/jwt/lists/json.py</code></p>"},{"location":"api/jwt/lists/json/#jam.jwt.lists.json","title":"json","text":"<p>Classes:</p> Name Description <code>JSONList</code> <p>Black/White list in JSON format, not recommended for blacklists  because it is not convenient to control token lifetime.</p>"},{"location":"api/jwt/lists/json/#jam.jwt.lists.json.JSONList","title":"JSONList","text":"<pre><code>JSONList(\n    type: Literal[\"white\", \"black\"],\n    json_path: str = \"whitelist.json\",\n)\n</code></pre> <p>               Bases: <code>BaseJWTList</code></p> <p>Black/White list in JSON format, not recommended for blacklists  because it is not convenient to control token lifetime.</p> <p>Dependency required: <code>pip install jamlib[json]</code></p> <p>Attributes:</p> Name Type Description <code>__list__</code> <code>TinyDB</code> <p>TinyDB instance</p> <p>Methods:</p> Name Description <code>add</code> <p>adding token to list</p> <code>check</code> <p>check token in list</p> <code>delete</code> <p>removing token from list</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['white', 'black']</code> <p>Type of list</p> required <code>json_path</code> <code>str</code> <p>Path to .json file</p> <code>'whitelist.json'</code>"},{"location":"api/jwt/lists/json/#jam.jwt.lists.json.JSONList.add","title":"add","text":"<pre><code>add(token: str) -&gt; None\n</code></pre> <p>Method for adding token to list.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Your JWT token</p> required <p>Returns:</p> Type Description <code>None</code> <p>(None)</p>"},{"location":"api/jwt/lists/json/#jam.jwt.lists.json.JSONList.check","title":"check","text":"<pre><code>check(token: str) -&gt; bool\n</code></pre> <p>Method for checking if a token is present in list.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Your jwt token</p> required <p>Returns:</p> Type Description <code>bool</code> <p>(bool)</p>"},{"location":"api/jwt/lists/json/#jam.jwt.lists.json.JSONList.delete","title":"delete","text":"<pre><code>delete(token: str) -&gt; None\n</code></pre> <p>Method for removing token from list.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Your jwt token</p> required <p>Returns:</p> Type Description <code>None</code> <p>(None)</p>"},{"location":"api/jwt/lists/redis/","title":"jam.jwt.lists.redis","text":"<p>FILE PATH: <code>jam/jwt/lists/redis.py</code></p>"},{"location":"api/jwt/lists/redis/#jam.jwt.lists.redis","title":"redis","text":"<p>Classes:</p> Name Description <code>RedisList</code> <p>Black/White lists in Redis, most optimal format.</p>"},{"location":"api/jwt/lists/redis/#jam.jwt.lists.redis.RedisList","title":"RedisList","text":"<pre><code>RedisList(\n    type: Literal[\"white\", \"black\"],\n    redis_uri: Union[str, Redis],\n    in_list_life_time: Optional[int] = None,\n)\n</code></pre> <p>               Bases: <code>BaseJWTList</code></p> <p>Black/White lists in Redis, most optimal format.</p> <p>Dependency required: <code>pip install jamlib[redis]</code></p> <p>Attributes:</p> Name Type Description <code>__list__</code> <code>Redis</code> <p>Redis instance</p> <code>exp</code> <code>int | None</code> <p>Token lifetime</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>Literal['white', 'black']</code> <p>Type og list</p> required <code>redis_uri</code> <code>str</code> <p>Uri to redis connect</p> required <code>in_list_life_time</code> <code>int | None</code> <p>The lifetime of a token in the list</p> <code>None</code> <p>Methods:</p> Name Description <code>add</code> <p>Method for adding token to list.</p> <code>check</code> <p>Method for checking if a token is present in the list.</p> <code>delete</code> <p>Method for removing a token from a list.</p>"},{"location":"api/jwt/lists/redis/#jam.jwt.lists.redis.RedisList.add","title":"add","text":"<pre><code>add(token: str) -&gt; None\n</code></pre> <p>Method for adding token to list.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Your JWT token</p> required <p>Returns:</p> Type Description <code>None</code> <p>(None)</p>"},{"location":"api/jwt/lists/redis/#jam.jwt.lists.redis.RedisList.check","title":"check","text":"<pre><code>check(token: str) -&gt; bool\n</code></pre> <p>Method for checking if a token is present in the list.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Your JWT token</p> required <p>Returns:</p> Type Description <code>bool</code> <p>(bool)</p>"},{"location":"api/jwt/lists/redis/#jam.jwt.lists.redis.RedisList.delete","title":"delete","text":"<pre><code>delete(token: str) -&gt; None\n</code></pre> <p>Method for removing a token from a list.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Your JWT token</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/modules/base_module/","title":"Base module","text":""},{"location":"api/modules/base_module/#jam.modules.BaseModule","title":"BaseModule","text":"<pre><code>BaseModule(module_type: str = 'custom')\n</code></pre> <p>The base module from which all other modules inherit.</p> <p>Parameters:</p> Name Type Description Default <code>module_type</code> <code>str</code> <p>Type of module</p> <code>'custom'</code>"},{"location":"api/modules/jwt_module/","title":"jam.modules.JWTModule","text":""},{"location":"api/modules/jwt_module/#jam.modules.JWTModule","title":"JWTModule","text":"<pre><code>JWTModule(\n    alg: Literal[\n        \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\"\n    ] = \"HS256\",\n    secret_key: Optional[str] = getenv(\n        \"JAM_JWT_SECRET_KEY\", None\n    ),\n    public_key: Optional[str] = getenv(\n        \"JAM_JWT_PUBLIC_KEY\", None\n    ),\n    private_key: Optional[str] = getenv(\n        \"JAM_JWT_PRIVATE_KEY\", None\n    ),\n    expire: int = 3600,\n    list: Optional[dict[str, Any]] = None,\n)\n</code></pre> <p>               Bases: <code>BaseModule</code></p> <p>Module for JWT auth.</p> <p>Methods:</p> Name Description <code>make_payload</code> <p>int | None, **data): Creating a generic payload for a token</p> <p>Parameters:</p> Name Type Description Default <code>alg</code> <code>Literal['HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512', 'PS512', 'PS384', 'PS512']</code> <p>Algorithm for token encryption</p> <code>'HS256'</code> <code>secret_key</code> <code>str | None</code> <p>Secret key for HMAC enecryption</p> <code>getenv('JAM_JWT_SECRET_KEY', None)</code> <code>private_key</code> <code>str | None</code> <p>Private key for RSA enecryption</p> <code>getenv('JAM_JWT_PRIVATE_KEY', None)</code> <code>public_key</code> <code>str | None</code> <p>Public key for RSA</p> <code>getenv('JAM_JWT_PUBLIC_KEY', None)</code> <code>expire</code> <code>int</code> <p>Token lifetime in seconds</p> <code>3600</code> <code>list</code> <code>dict[str, Any]</code> <p>List config</p> <code>None</code>"},{"location":"api/modules/jwt_module/#jam.modules.JWTModule.gen_token","title":"gen_token","text":"<pre><code>gen_token(**payload) -&gt; str\n</code></pre> <p>Creating a new token.</p> <p>Parameters:</p> Name Type Description Default <code>**payload</code> <p>Payload with information</p> <code>{}</code> <p>Raises:</p> Type Description <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None</p> <code>EmtpyPrivateKey</code> <p>If RSA algorithm is selected, but private key None</p>"},{"location":"api/modules/jwt_module/#jam.modules.JWTModule.make_payload","title":"make_payload","text":"<pre><code>make_payload(\n    exp: Optional[int] = None, **data\n) -&gt; dict[str, Any]\n</code></pre> <p>Payload maker tool.</p> <p>Parameters:</p> Name Type Description Default <code>exp</code> <code>Optional[int]</code> <p>If none exp = JWTModule.exp</p> <code>None</code> <code>**data</code> <p>Custom data</p> <code>{}</code>"},{"location":"api/modules/jwt_module/#jam.modules.JWTModule.validate_payload","title":"validate_payload","text":"<pre><code>validate_payload(\n    token: str,\n    check_exp: bool = False,\n    check_list: bool = True,\n) -&gt; dict[str, Any]\n</code></pre> <p>A method for verifying a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The token to check</p> required <code>check_exp</code> <code>bool</code> <p>Check for expiration?</p> <code>False</code> <code>check_list</code> <code>bool</code> <p>Check if there is a black/white list</p> <code>True</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the token is invalid.</p> <code>EmptySecretKey</code> <p>If the HMAC algorithm is selected, but the secret key is None.</p> <code>EmtpyPublicKey</code> <p>If RSA algorithm is selected, but public key None.</p> <code>NotFoundSomeInPayload</code> <p>If 'exp' not found in payload.</p> <code>TokenLifeTimeExpired</code> <p>If token has expired.</p> <code>TokenNotInWhiteList</code> <p>If the list type is white, but the token is  not there</p> <code>TokenInBlackList</code> <p>If the list type is black and the token is there</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Payload from token</p>"},{"location":"api/modules/session_module/","title":"jam.modules.SessionModule","text":""},{"location":"api/modules/session_module/#jam.modules.SessionModule","title":"SessionModule","text":"<pre><code>SessionModule(\n    sessions_type: Literal[\"redis\", \"json\", \"custom\"],\n    id_factory: Callable[[], str] = lambda: str(uuid4()),\n    is_session_crypt: bool = False,\n    session_aes_secret: Optional[bytes] = None,\n    **module_kwargs: Any\n)\n</code></pre> <p>               Bases: <code>BaseModule</code></p> <p>Module for session management.</p> <p>Parameters:</p> Name Type Description Default <code>sessions_type</code> <code>Literal['redis', 'json']</code> <p>Type of session storage.</p> required <code>id_factory</code> <code>Callable[[], str]</code> <p>A callable that generates unique IDs. Defaults to a UUID factory.</p> <code>lambda: str(uuid4())</code> <code>is_session_crypt</code> <code>bool</code> <p>If True, session keys will be encoded. Defaults to False.</p> <code>False</code> <code>session_aes_secret</code> <code>Optional[bytes]</code> <p>AES secret for encoding session keys.</p> <code>None</code> <code>**module_kwargs</code> <code>Any</code> <p>Additional keyword arguments for the session module. See  <code>{}</code> <p>Methods:</p> Name Description <code>clear</code> <p>Clear all sessions by key.</p> <code>create</code> <p>Create a new session with the given session key and data.</p> <code>delete</code> <p>Delete a session by its key or ID.</p> <code>get</code> <p>Retrieve a session by its key or ID.</p> <code>rework</code> <p>Reworks a session and returns its new ID.</p> <code>update</code> <p>Update an existing session with new data.</p>"},{"location":"api/modules/session_module/#jam.modules.SessionModule.clear","title":"clear","text":"<pre><code>clear(session_key: str) -&gt; None\n</code></pre> <p>Clear all sessions by key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The session key to clear.</p> required <p>Raises:</p> Type Description <code>SessionNotFoundError</code> <p>If the session does not exist.</p>"},{"location":"api/modules/session_module/#jam.modules.SessionModule.create","title":"create","text":"<pre><code>create(session_key: str, data: dict) -&gt; str\n</code></pre> <p>Create a new session with the given session key and data.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The key for the session.</p> required <code>data</code> <code>dict</code> <p>The data to be stored in the session.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The ID of the created session.</p>"},{"location":"api/modules/session_module/#jam.modules.SessionModule.delete","title":"delete","text":"<pre><code>delete(session_id: str) -&gt; None\n</code></pre> <p>Delete a session by its key or ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to delete.</p> required <p>Raises:</p> Type Description <code>SessionNotFoundError</code> <p>If the session does not exist.</p>"},{"location":"api/modules/session_module/#jam.modules.SessionModule.get","title":"get","text":"<pre><code>get(session_id: str) -&gt; Optional[dict]\n</code></pre> <p>Retrieve a session by its key or ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to retrieve.</p> required <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>dict | None: The data stored in the session.</p> <p>Raises:</p> Type Description <code>SessionNotFoundError</code> <p>If the session does not exist.</p>"},{"location":"api/modules/session_module/#jam.modules.SessionModule.rework","title":"rework","text":"<pre><code>rework(session_id: str) -&gt; str\n</code></pre> <p>Reworks a session and returns its new ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to rework.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The new ID of the reworked session.</p> <p>Raises:</p> Type Description <code>SessionNotFoundError</code> <p>If the session does not exist.</p>"},{"location":"api/modules/session_module/#jam.modules.SessionModule.update","title":"update","text":"<pre><code>update(session_id: str, data: dict) -&gt; None\n</code></pre> <p>Update an existing session with new data.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to update.</p> required <code>data</code> <code>dict</code> <p>The new data to be stored in the session.</p> required <p>Raises:</p> Type Description <code>SessionNotFoundError</code> <p>If the session does not exist.</p>"},{"location":"api/oauth2/base_client/","title":"jam.oauth2.__abc_oauth2_repo__","text":"<p>FILE PATH: <code>jam/oauth2/__abc_oauth2_repo__.py</code></p>"},{"location":"api/oauth2/base_client/#jam.oauth2.__abc_oauth2_repo__","title":"__abc_oauth2_repo__","text":"<p>Classes:</p> Name Description <code>BaseOAuth2Client</code> <p>Base OAuth2 client instance.</p>"},{"location":"api/oauth2/base_client/#jam.oauth2.__abc_oauth2_repo__.BaseOAuth2Client","title":"BaseOAuth2Client","text":"<pre><code>BaseOAuth2Client(\n    client_id: str,\n    client_secret: str,\n    auth_url: str,\n    token_url: str,\n    redirect_url: str,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base OAuth2 client instance.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>ID or your client</p> required <code>client_secret</code> <code>str</code> <p>Secret key for your application</p> required <code>auth_url</code> <code>str</code> <p>App auth url</p> required <code>token_url</code> <code>str</code> <p>App token url</p> required <code>redirect_url</code> <code>str</code> <p>Your app url</p> required <p>Methods:</p> Name Description <code>client_credentials_flow</code> <p>Obtain access token using client credentials flow (no user interaction).</p> <code>fetch_token</code> <p>Exchange code for access token.</p> <code>get_authorization_url</code> <p>Get OAuth2 url.</p> <code>refresh_token</code> <p>Update access token.</p>"},{"location":"api/oauth2/base_client/#jam.oauth2.__abc_oauth2_repo__.BaseOAuth2Client.client_credentials_flow","title":"client_credentials_flow  <code>abstractmethod</code>","text":"<pre><code>client_credentials_flow(\n    scope: Optional[list[str]] = None,\n) -&gt; dict[str, Any]\n</code></pre> <p>Obtain access token using client credentials flow (no user interaction).</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>Optional[list[str]]</code> <p>Auth scope</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>JSON with access token</p>"},{"location":"api/oauth2/base_client/#jam.oauth2.__abc_oauth2_repo__.BaseOAuth2Client.fetch_token","title":"fetch_token  <code>abstractmethod</code>","text":"<pre><code>fetch_token(code: str) -&gt; str\n</code></pre> <p>Exchange code for access token.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>Auth code</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Access token</p>"},{"location":"api/oauth2/base_client/#jam.oauth2.__abc_oauth2_repo__.BaseOAuth2Client.get_authorization_url","title":"get_authorization_url  <code>abstractmethod</code>","text":"<pre><code>get_authorization_url(scope: list[str]) -&gt; str\n</code></pre> <p>Get OAuth2 url.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>list[str]</code> <p>Auth scope</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>URL for auth</p>"},{"location":"api/oauth2/base_client/#jam.oauth2.__abc_oauth2_repo__.BaseOAuth2Client.refresh_token","title":"refresh_token  <code>abstractmethod</code>","text":"<pre><code>refresh_token(refresh_token: str) -&gt; str\n</code></pre> <p>Update access token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>Refresh token</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>New access token</p>"},{"location":"api/oauth2/base_client/#jam.oauth2.__abc_oauth2_repo__.__BaseOAuth2Server","title":"__BaseOAuth2Server","text":"<pre><code>__BaseOAuth2Server(\n    app_url: str,\n    code_factory: Callable[[], str] = lambda: token_urlsafe(\n        8\n    ),\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base OAuth2 server instance.</p> <p>Parameters:</p> Name Type Description Default <code>app_url</code> <code>str</code> <p>URL of your app</p> required <code>code_factory</code> <code>Callable[[], str]</code> <p>Factory for code generation</p> <code>lambda: token_urlsafe(8)</code>"},{"location":"api/oauth2/builtin/","title":"jam.oauth2.builtin","text":"<p>Built-in OAuth2 providers.</p>"},{"location":"api/oauth2/builtin/#modules","title":"Modules","text":"<ul> <li><code>github</code></li> <li><code>gitlab</code></li> <li><code>google</code></li> <li><code>yandex</code></li> </ul> <p>FILE PATH: <code>jam/oauth2/builtin/__init__.py</code></p>"},{"location":"api/oauth2/client/","title":"jam.oauth2.client","text":"<p>FILE PATH: <code>jam/oauth2/client.py</code></p>"},{"location":"api/oauth2/client/#jam.oauth2.client","title":"client","text":"<p>Classes:</p> Name Description <code>OAuth2Client</code> <p>Universal OAuth2 client implementation.</p>"},{"location":"api/oauth2/client/#jam.oauth2.client.OAuth2Client","title":"OAuth2Client","text":"<pre><code>OAuth2Client(\n    client_id: str,\n    client_secret: str,\n    auth_url: str,\n    token_url: str,\n    redirect_url: str,\n)\n</code></pre> <p>               Bases: <code>BaseOAuth2Client</code></p> <p>Universal OAuth2 client implementation.</p> <p>Methods:</p> Name Description <code>client_credentials_flow</code> <p>Obtain access token using client credentials flow (no user interaction).</p> <code>fetch_token</code> <p>Exchange authorization code for access token.</p> <code>get_authorization_url</code> <p>Generate full OAuth2 authorization URL.</p> <code>refresh_token</code> <p>Use refresh token to obtain a new access token.</p>"},{"location":"api/oauth2/client/#jam.oauth2.client.OAuth2Client.__http","title":"__http","text":"<pre><code>__http(url: str)\n</code></pre> <p>Create HTTPS connection context manager.</p>"},{"location":"api/oauth2/client/#jam.oauth2.client.OAuth2Client.__post_form","title":"__post_form","text":"<pre><code>__post_form(\n    url: str, params: dict[str, Any]\n) -&gt; dict[str, Any]\n</code></pre> <p>Send POST form and parse JSON response.</p>"},{"location":"api/oauth2/client/#jam.oauth2.client.OAuth2Client.client_credentials_flow","title":"client_credentials_flow","text":"<pre><code>client_credentials_flow(\n    scope: Optional[list[str]] = None, **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Obtain access token using client credentials flow (no user interaction).</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>list[str] | None</code> <p>Auth scope</p> <code>None</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>JSON with access token</p>"},{"location":"api/oauth2/client/#jam.oauth2.client.OAuth2Client.fetch_token","title":"fetch_token","text":"<pre><code>fetch_token(\n    code: str,\n    grant_type: str = \"authorization_code\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Exchange authorization code for access token.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>OAuth2 code</p> required <code>grant_type</code> <code>str</code> <p>Type of oauth2 grant</p> <code>'authorization_code'</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>OAuth2 token</p>"},{"location":"api/oauth2/client/#jam.oauth2.client.OAuth2Client.get_authorization_url","title":"get_authorization_url","text":"<pre><code>get_authorization_url(\n    scope: list[str], **extra_params: Any\n) -&gt; str\n</code></pre> <p>Generate full OAuth2 authorization URL.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>list[str]</code> <p>Auth scope</p> required <code>extra_params</code> <code>Any</code> <p>Extra ath params</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Authorization url</p>"},{"location":"api/oauth2/client/#jam.oauth2.client.OAuth2Client.refresh_token","title":"refresh_token","text":"<pre><code>refresh_token(\n    refresh_token: str,\n    grant_type: str = \"refresh_token\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Use refresh token to obtain a new access token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>Refresh token</p> required <code>grant_type</code> <code>str</code> <p>Grant type</p> <code>'refresh_token'</code> <code>extra_params</code> <code>Any</code> <p>Extra auth params if needed</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>Refresh token</p>"},{"location":"api/oauth2/builtin/github/","title":"jam.oauth2.builtin.github","text":"<p>FILE PATH: <code>jam/oauth2/builtin/github.py</code></p>"},{"location":"api/oauth2/builtin/github/#jam.oauth2.builtin.github","title":"github","text":"<p>Classes:</p> Name Description <code>GitHubOAuth2Client</code> <p>Rady to use GitHub OAuth2 provider.</p>"},{"location":"api/oauth2/builtin/github/#jam.oauth2.builtin.github.GitHubOAuth2Client","title":"GitHubOAuth2Client","text":"<pre><code>GitHubOAuth2Client(\n    client_id: str, client_secret: str, redirect_url: str\n)\n</code></pre> <p>               Bases: <code>OAuth2Client</code></p> <p>Rady to use GitHub OAuth2 provider.</p> <p>See: https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>ID of your app</p> required <code>client_secret</code> <code>str</code> <p>Secret key</p> required <code>redirect_url</code> <code>str</code> <p>URL for your app</p> required"},{"location":"api/oauth2/builtin/gitlab/","title":"jam.oauth2.builtin.gitlab","text":"<p>FILE PATH: <code>jam/oauth2/builtin/gitlab.py</code></p>"},{"location":"api/oauth2/builtin/gitlab/#jam.oauth2.builtin.gitlab","title":"gitlab","text":"<p>Classes:</p> Name Description <code>GitLabOAuth2Client</code> <p>Ready to use GitLab OAuth2 provider.</p>"},{"location":"api/oauth2/builtin/gitlab/#jam.oauth2.builtin.gitlab.GitLabOAuth2Client","title":"GitLabOAuth2Client","text":"<pre><code>GitLabOAuth2Client(\n    client_id: str, client_secret: str, redirect_url: str\n)\n</code></pre> <p>               Bases: <code>OAuth2Client</code></p> <p>Ready to use GitLab OAuth2 provider.</p> <p>See: https://docs.gitlab.com/api/oauth2/</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>Client ID</p> required <code>client_secret</code> <code>str</code> <p>Secret key</p> required <code>redirect_url</code> <code>str</code> <p>Your app url</p> required"},{"location":"api/oauth2/builtin/google/","title":"jam.oauth2.builtin.google","text":"<p>FILE PATH: <code>jam/oauth2/builtin/google.py</code></p>"},{"location":"api/oauth2/builtin/google/#jam.oauth2.builtin.google","title":"google","text":"<p>Classes:</p> Name Description <code>GoogleOAuth2Client</code> <p>Ready to use Google OAuth2 provider.</p>"},{"location":"api/oauth2/builtin/google/#jam.oauth2.builtin.google.GoogleOAuth2Client","title":"GoogleOAuth2Client","text":"<pre><code>GoogleOAuth2Client(\n    client_id: str, client_secret: str, redirect_url: str\n)\n</code></pre> <p>               Bases: <code>OAuth2Client</code></p> <p>Ready to use Google OAuth2 provider.</p> <p>See: https://developers.google.com/identity/protocols/oauth2</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>Client ID</p> required <code>client_secret</code> <code>str</code> <p>Secret key</p> required <code>redirect_url</code> <code>str</code> <p>URL for your app</p> required"},{"location":"api/oauth2/builtin/yandex/","title":"jam.oauth2.builtin.yandex","text":"<p>FILE PATH: <code>jam/oauth2/builtin/yandex.md</code></p>"},{"location":"api/oauth2/builtin/yandex/#jam.oauth2.builtin.yandex","title":"yandex","text":"<p>Classes:</p> Name Description <code>YandexOAuth2Client</code> <p>Ready to use yandex oauth2 client.</p>"},{"location":"api/oauth2/builtin/yandex/#jam.oauth2.builtin.yandex.YandexOAuth2Client","title":"YandexOAuth2Client","text":"<pre><code>YandexOAuth2Client(\n    client_id: str, client_secret: str, redirect_url: str\n)\n</code></pre> <p>               Bases: <code>OAuth2Client</code></p> <p>Ready to use yandex oauth2 client.</p> <p>See: https://yandex.ru/dev/id/doc</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>Client ID</p> required <code>client_secret</code> <code>str</code> <p>Secret key</p> required <code>redirect_url</code> <code>str</code> <p>Your app URL</p> required"},{"location":"api/otp/base_otp/","title":"jam.otp.BaseOTP","text":"<p>FILE PATH: <code>jam/otp/__abc_module__.py</code></p>"},{"location":"api/otp/base_otp/#jam.otp.__abc_module__.BaseOTP","title":"BaseOTP","text":"<pre><code>BaseOTP(\n    secret: Union[bytes, str],\n    digits: int = 6,\n    digest: Literal[\"sha1\", \"sha256\", \"sha512\"] = \"sha1\",\n)\n</code></pre> <p>Base *OTP.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>bytes | str</code> <p>Secret key(str or Byte32).</p> required <code>digits</code> <code>int</code> <p>Number of digits in the code. Default is 6.</p> <code>6</code> <code>digest</code> <code>str</code> <p>Hash algorithm (sha1, sha256, sha512). Default is <code>sha1</code>.</p> <code>'sha1'</code> <p>Methods:</p> Name Description <code>provisioning_uri</code> <p>Generates an otpauth:// URI for Google Authenticator.</p>"},{"location":"api/otp/base_otp/#jam.otp.__abc_module__.BaseOTP.provisioning_uri","title":"provisioning_uri","text":"<pre><code>provisioning_uri(\n    name: str,\n    issuer: str,\n    type_: str = \"totp\",\n    counter: Optional[int] = None,\n) -&gt; str\n</code></pre> <p>Generates an otpauth:// URI for Google Authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Account name (e.g., email).</p> required <code>issuer</code> <code>str</code> <p>Service name (e.g., \"GitHub\").</p> required <code>type_</code> <code>str</code> <p>OTP type (\u201ctotp\u201d or 'hotp'). Default is \"totp\".</p> <code>'totp'</code> <code>counter</code> <code>int | None</code> <p>Counter (for HOTP). Default is None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string of the form \"otpauth://...\"</p>"},{"location":"api/otp/hotp/","title":"jam.otp.HOTP","text":"<p>FILE PATH: <code>jam/otp/hotp.py</code></p>"},{"location":"api/otp/hotp/#jam.otp.hotp.HOTP","title":"HOTP","text":"<pre><code>HOTP(\n    secret: Union[bytes, str],\n    digits: int = 6,\n    digest: Literal[\"sha1\", \"sha256\", \"sha512\"] = \"sha1\",\n)\n</code></pre> <p>               Bases: <code>BaseOTP</code></p> <p>HOTP instance.</p> <p>Methods:</p> Name Description <code>at</code> <p>Generates a HOTP code for the specified counter.</p> <code>verify</code> <p>Verify HOTP-code.</p>"},{"location":"api/otp/hotp/#jam.otp.hotp.HOTP.at","title":"at","text":"<pre><code>at(factor: int) -&gt; str\n</code></pre> <p>Generates a HOTP code for the specified counter.</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>int</code> <p>Counter (increases after each use).</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>HOTP code (fixed-length string).</p>"},{"location":"api/otp/hotp/#jam.otp.hotp.HOTP.verify","title":"verify","text":"<pre><code>verify(code: str, factor: int, look_ahead: int = 1) -&gt; bool\n</code></pre> <p>Verify HOTP-code.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>Code.</p> required <code>factor</code> <code>int</code> <p>Now counter.</p> required <code>look_ahead</code> <code>int</code> <p>Allowable forward offset (to compensate for desynchronization). Default is 1..</p> <code>1</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the code matches, otherwise False.</p>"},{"location":"api/otp/totp/","title":"jam.otp.TOTP","text":"<p>FILE PATH: <code>jam/otp/totp.py</code></p>"},{"location":"api/otp/totp/#jam.otp.totp.TOTP","title":"TOTP","text":"<pre><code>TOTP(\n    secret: Union[bytes, str],\n    digits: int = 6,\n    digest: Literal[\"sha1\", \"sha256\", \"sha512\"] = \"sha1\",\n    interval: int = 30,\n)\n</code></pre> <p>               Bases: <code>BaseOTP</code></p> <p>TOTP (Time-based One-Time Password, RFC6238).</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>bytes | str</code> <p>Secret key.</p> required <code>digits</code> <code>int</code> <p>Number of digits in the code. Default is 6.</p> <code>6</code> <code>digest</code> <code>str</code> <p>Hashing algorithm. Default is \"sha1\".</p> <code>'sha1'</code> <code>interval</code> <code>int</code> <p>Time interval in seconds. Default is 30.</p> <code>30</code> <p>Methods:</p> Name Description <code>at</code> <p>Generates a TOTP code for a specified time.</p> <code>verify</code> <p>Checks the TOTP code, taking into account the acceptable window.</p> <p>Attributes:</p> Name Type Description <code>now</code> <code>str</code> <p>Returns the current TOTP code.</p>"},{"location":"api/otp/totp/#jam.otp.totp.TOTP.now","title":"now  <code>property</code>","text":"<pre><code>now: str\n</code></pre> <p>Returns the current TOTP code.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>TOTP code for the current time.</p>"},{"location":"api/otp/totp/#jam.otp.totp.TOTP.at","title":"at","text":"<pre><code>at(factor: Optional[int] = None) -&gt; str\n</code></pre> <p>Generates a TOTP code for a specified time.</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>int | None</code> <p>Time in UNIX seconds. If None, the current time is used. Default is None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>TOTP code (fixed-length string).</p>"},{"location":"api/otp/totp/#jam.otp.totp.TOTP.verify","title":"verify","text":"<pre><code>verify(\n    code: str,\n    factor: Optional[int] = None,\n    look_ahead: int = 1,\n) -&gt; bool\n</code></pre> <p>Checks the TOTP code, taking into account the acceptable window.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The code entered.</p> required <code>factor</code> <code>int | None</code> <p>Time in UNIX seconds. If None, the current time. Default is None.</p> <code>None</code> <code>look_ahead</code> <code>int</code> <p>Acceptable deviation in intervals (\u00b1window). Default is 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the code matches, otherwise False.</p>"},{"location":"api/sessions/base_session_module/","title":"jam.sessions.BaseSessionModule","text":"<p>FILE PATH: <code>jam/sessions/__abc_session_repo__.py</code></p>"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule","title":"BaseSessionModule","text":"<pre><code>BaseSessionModule(\n    id_factory: Callable[[], str] = lambda: str(uuid4()),\n    is_session_crypt: bool = False,\n    session_aes_secret: Optional[bytes] = None,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for session management modules.</p> <p>You can create your own module for sessions. For example:</p> <pre><code>from jam.sessions import BaseSessionModule\n\nclass CustomSessionModule(BaseSessionModule):\n    def __init__(self, some_param: str) -&gt; None:\n        super().__init__(\n            is_session_crypt=True,\n            session_aes_secret=b'your-32-byte-base64-encoded-key'\n        )\n\n    # Your initialization code here\n    def create(session_key: str) -&gt; str:\n        ...\n\n    def get(session_id: str) -&gt; dict:\n        ...\n\n    def delete(session_id: str) -&gt; None:\n        ...\n\n    def update(session_id: str, data: dict) -&gt; None:\n        ...\n\n    def rework(session_id: str) -&gt; str:\n        ...\n\n    def clear(session_key: str) -&gt; None:\n        ...\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id_factory</code> <code>Callable[str]</code> <p>A callable that generates unique IDs. Defaults to a UUID factory.</p> <code>lambda: str(uuid4())</code> <code>is_session_crypt</code> <code>bool</code> <p>If True, session keys will be encoded. Defaults to False.</p> <code>False</code> <code>session_aes_secret</code> <code>Optional[bytes]</code> <p>AES secret for encoding session keys.</p> <code>None</code> <p>Methods:</p> Name Description <code>__decode_session_data__</code> <p>Decode session data.</p> <code>__decode_session_id__</code> <p>Decode the session using AES decryption.</p> <code>__decode_session_id_if_needed__</code> <p>Decode the session ID if it is encoded.</p> <code>__encode_session_data__</code> <p>Encode session data.</p> <code>__encode_session_id__</code> <p>Encode the session using AES encryption.</p> <code>__encode_session_id_if_needed__</code> <p>Encode the session ID if it is not already encoded.</p> <code>clear</code> <p>Clear all sessions by key.</p> <code>create</code> <p>Create a new session with the given session key and data.</p> <code>delete</code> <p>Delete a session by its key or ID.</p> <code>get</code> <p>Retrieve a session by its key or ID.</p> <code>rework</code> <p>Rework a session and return its new ID.</p> <code>update</code> <p>Update an existing session with new data.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Return the unique ID use id_factory.</p>"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre> <p>Return the unique ID use id_factory.</p>"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule.__decode_session_data__","title":"__decode_session_data__","text":"<pre><code>__decode_session_data__(data: str) -&gt; dict\n</code></pre> <p>Decode session data.</p>"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule.__decode_session_id__","title":"__decode_session_id__","text":"<pre><code>__decode_session_id__(data: str) -&gt; str\n</code></pre> <p>Decode the session using AES decryption.</p>"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule.__decode_session_id_if_needed__","title":"__decode_session_id_if_needed__","text":"<pre><code>__decode_session_id_if_needed__(data: str) -&gt; str\n</code></pre> <p>Decode the session ID if it is encoded.</p>"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule.__encode_session_data__","title":"__encode_session_data__","text":"<pre><code>__encode_session_data__(data: dict) -&gt; str\n</code></pre> <p>Encode session data.</p>"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule.__encode_session_id__","title":"__encode_session_id__","text":"<pre><code>__encode_session_id__(data: str) -&gt; str\n</code></pre> <p>Encode the session using AES encryption.</p>"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule.__encode_session_id_if_needed__","title":"__encode_session_id_if_needed__","text":"<pre><code>__encode_session_id_if_needed__(data: str) -&gt; str\n</code></pre> <p>Encode the session ID if it is not already encoded.</p>"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule.clear","title":"clear  <code>abstractmethod</code>","text":"<pre><code>clear(\n    session_key: str,\n) -&gt; Union[None, Coroutine[Any, Any, None]]\n</code></pre> <p>Clear all sessions by key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The key for the sessions to clear.</p> required"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule.create","title":"create  <code>abstractmethod</code>","text":"<pre><code>create(\n    session_key: str, data: dict\n) -&gt; Union[str, Coroutine[Any, Any, str]]\n</code></pre> <p>Create a new session with the given session key and data.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The key for the session.</p> required <code>data</code> <code>dict</code> <p>The data to be stored in the session.</p> required"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule.delete","title":"delete  <code>abstractmethod</code>","text":"<pre><code>delete(\n    session_id: str,\n) -&gt; Optional[Coroutine[Any, Any, None]]\n</code></pre> <p>Delete a session by its key or ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session.</p> required"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule.get","title":"get  <code>abstractmethod</code>","text":"<pre><code>get(session_id: str) -&gt; Any\n</code></pre> <p>Retrieve a session by its key or ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The session data if found, otherwise None.</p>"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule.rework","title":"rework  <code>abstractmethod</code>","text":"<pre><code>rework(\n    session_id: str,\n) -&gt; Union[str, Coroutine[Any, Any, str]]\n</code></pre> <p>Rework a session and return its new ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to rework.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>Union[str, Coroutine[Any, Any, str]]</code> <p>The new session ID.</p>"},{"location":"api/sessions/base_session_module/#jam.sessions.__abc_session_repo__.BaseSessionModule.update","title":"update  <code>abstractmethod</code>","text":"<pre><code>update(\n    session_id: str, data: dict\n) -&gt; Union[None, Coroutine[Any, Any, None]]\n</code></pre> <p>Update an existing session with new data.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to update.</p> required <code>data</code> <code>dict</code> <p>The new data to be stored in the session.</p> required"},{"location":"api/sessions/json/","title":"jam.sessions.json","text":"<p>FILE PATH: <code>jam/sessions/json.py</code></p>"},{"location":"api/sessions/json/#jam.sessions.json","title":"json","text":"<p>Classes:</p> Name Description <code>JSONSessions</code> <p>Session management module for JSON storage.</p>"},{"location":"api/sessions/json/#jam.sessions.json.JSONSessions","title":"JSONSessions","text":"<pre><code>JSONSessions(\n    json_path: str = \"sessions.json\",\n    is_session_crypt: bool = False,\n    session_aes_secret: Optional[bytes] = None,\n    id_factory: Callable[[], str] = lambda: str(uuid4()),\n)\n</code></pre> <p>               Bases: <code>BaseSessionModule</code></p> <p>Session management module for JSON storage.</p> <p>Parameters:</p> Name Type Description Default <code>json_path</code> <code>str</code> <p>Path to the JSON file where sessions will be stored.</p> <code>'sessions.json'</code> <code>is_session_crypt</code> <code>bool</code> <p>If True, session keys will be encoded.</p> <code>False</code> <code>session_aes_secret</code> <code>Optional[bytes]</code> <p>AES secret for encoding session keys. Required if <code>is_session_crypt</code> is True.</p> <code>None</code> <code>id_factory</code> <code>Callable[[], str]</code> <p>A callable that generates unique IDs. Defaults to a UUID factory.</p> <code>lambda: str(uuid4())</code> <p>Methods:</p> Name Description <code>clear</code> <p>Clear all sessions for a given session key.</p> <code>create</code> <p>Create a new session.</p> <code>delete</code> <p>Delete a session by its ID.</p> <code>get</code> <p>Retrieve session data by session ID.</p> <code>rework</code> <p>Rework (regenerate) a session ID.</p> <code>update</code> <p>Update session data by its ID.</p>"},{"location":"api/sessions/json/#jam.sessions.json.JSONSessions.clear","title":"clear","text":"<pre><code>clear(session_key: str) -&gt; None\n</code></pre> <p>Clear all sessions for a given session key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The session key to clear.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/sessions/json/#jam.sessions.json.JSONSessions.create","title":"create","text":"<pre><code>create(session_key: str, data: dict) -&gt; str\n</code></pre> <p>Create a new session.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The session key.</p> required <code>data</code> <code>dict</code> <p>The data to be stored in the session.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The ID of the created session.</p>"},{"location":"api/sessions/json/#jam.sessions.json.JSONSessions.delete","title":"delete","text":"<pre><code>delete(session_id: str) -&gt; None\n</code></pre> <p>Delete a session by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to delete.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/sessions/json/#jam.sessions.json.JSONSessions.get","title":"get","text":"<pre><code>get(session_id) -&gt; Optional[dict]\n</code></pre> <p>Retrieve session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to retrieve.</p> required <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>dict | None: The session data if found, otherwise None.</p>"},{"location":"api/sessions/json/#jam.sessions.json.JSONSessions.rework","title":"rework","text":"<pre><code>rework(session_id: str) -&gt; str\n</code></pre> <p>Rework (regenerate) a session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The current session ID to be reworked.</p> required <p>Raises:</p> Type Description <code>SessionNotFoundError</code> <p>If session not found</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The new session ID.</p>"},{"location":"api/sessions/json/#jam.sessions.json.JSONSessions.update","title":"update","text":"<pre><code>update(session_id: str, data: dict) -&gt; None\n</code></pre> <p>Update session data by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to update.</p> required <code>data</code> <code>dict</code> <p>The new data to store in the session.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/sessions/redis/","title":"jam.sessions.redis","text":"<p>FILE PATH: <code>jam/sessions/redis.py</code></p>"},{"location":"api/sessions/redis/#jam.sessions.redis","title":"redis","text":"<p>Classes:</p> Name Description <code>RedisSessions</code> <p>Redis session management module.</p>"},{"location":"api/sessions/redis/#jam.sessions.redis.RedisSessions","title":"RedisSessions","text":"<pre><code>RedisSessions(\n    redis_uri: Union[\n        str, Redis\n    ] = \"redis://localhost:6379/0\",\n    redis_sessions_key: str = \"sessions\",\n    default_ttl: Optional[int] = 3600,\n    is_session_crypt: bool = False,\n    session_aes_secret: Optional[bytes] = None,\n    id_factory: Callable[[], str] = lambda: str(uuid4()),\n)\n</code></pre> <p>               Bases: <code>BaseSessionModule</code></p> <p>Redis session management module.</p> <p>Parameters:</p> Name Type Description Default <code>redis_uri</code> <code>str | Redis</code> <p>The URI for the Redis server.</p> <code>'redis://localhost:6379/0'</code> <code>redis_sessions_key</code> <code>str</code> <p>The key under which sessions are stored in Redis.</p> <code>'sessions'</code> <code>default_ttl</code> <code>Optional[int]</code> <p>Default time-to-live for sessions in seconds. Defaults to 3600 seconds (1 hour).</p> <code>3600</code> <code>is_session_crypt</code> <code>bool</code> <p>If True, session keys will be encoded.</p> <code>False</code> <code>session_aes_secret</code> <code>Optional[bytes]</code> <p>AES secret for encoding session keys. Required if <code>is_session_key_crypt</code> is True.</p> <code>None</code> <code>id_factory</code> <code>Callable[[], str]</code> <p>A callable that generates unique IDs. Defaults to a UUID factory.</p> <code>lambda: str(uuid4())</code> <p>Methods:</p> Name Description <code>clear</code> <p>Clear all sessions for a given session key.</p> <code>create</code> <p>Create a new session with the given session key and data.</p> <code>delete</code> <p>Delete a session by its ID.</p> <code>get</code> <p>Retrieve a session by its key or ID.</p> <code>rework</code> <p>Rework a session and return its new ID.</p> <code>update</code> <p>Update an existing session with new data.</p>"},{"location":"api/sessions/redis/#jam.sessions.redis.RedisSessions.clear","title":"clear","text":"<pre><code>clear(session_key: str) -&gt; None\n</code></pre> <p>Clear all sessions for a given session key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The session key to clear.</p> required"},{"location":"api/sessions/redis/#jam.sessions.redis.RedisSessions.create","title":"create","text":"<pre><code>create(session_key: str, data: dict) -&gt; str\n</code></pre> <p>Create a new session with the given session key and data.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The key for the session.</p> required <code>data</code> <code>dict</code> <p>The data to be stored in the session.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The unique ID of the created session.</p>"},{"location":"api/sessions/redis/#jam.sessions.redis.RedisSessions.delete","title":"delete","text":"<pre><code>delete(session_id: str) -&gt; None\n</code></pre> <p>Delete a session by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The session ID.</p> required"},{"location":"api/sessions/redis/#jam.sessions.redis.RedisSessions.get","title":"get","text":"<pre><code>get(session_id: str) -&gt; Optional[dict]\n</code></pre> <p>Retrieve a session by its key or ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The session key or ID.</p> required <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>dict | None: The session data if found, otherwise None.</p>"},{"location":"api/sessions/redis/#jam.sessions.redis.RedisSessions.rework","title":"rework","text":"<pre><code>rework(session_id: str) -&gt; str\n</code></pre> <p>Rework a session and return its new ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to rework.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The new session ID.</p>"},{"location":"api/sessions/redis/#jam.sessions.redis.RedisSessions.update","title":"update","text":"<pre><code>update(session_id: str, data: dict) -&gt; None\n</code></pre> <p>Update an existing session with new data.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to update.</p> required <code>data</code> <code>dict</code> <p>The new data to be stored in the session.</p> required"},{"location":"api/tests/clients/","title":"jam.tests.clients","text":"<p>FILE PATH: <code>jam/tests/clients.py</code></p>"},{"location":"api/tests/clients/#jam.tests.clients","title":"clients","text":"<p>Classes:</p> Name Description <code>TestAsyncJam</code> <p>A test async client for Jam.</p> <code>TestJam</code> <p>A test client for Jam.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam","title":"TestAsyncJam","text":"<pre><code>TestAsyncJam(\n    config: Optional[Union[str, dict[str, Any]]] = None,\n    pointer: str = \"jam\",\n)\n</code></pre> <p>               Bases: <code>Jam</code></p> <p>A test async client for Jam.</p> Example <pre><code>import pytest\nimport pytest_asyncio\nimport asyncio\nfrom jam.tests import TestAsyncJam\nfrom jam.tests.fakers import invalid_token\n\n@pytest_asyncio.fixture\nasync def client() -&gt; TestAsyncJam:\n    return TestAsyncJam()\n\n@pytest.mark.asyncio\nasync def test_gen_jwt_token(client) -&gt; None:\n    payload = {\"user_id\": 1, \"role\": \"admin\"}\n    token = await client.gen_jwt_token(payload)\n    assert isinstance(token, str)\n    assert token.count(\".\") == 2  # JWT tokens have two dots\n\n@pytest.mark.asyncio\nasync def test_verify_jwt_token(client) -&gt; None:\n    payload = {\"user_id\": 1, \"role\": \"admin\"}\n    token = await client.gen_jwt_token(payload)\n    verified_payload = await client.verify_jwt_token(token, check_exp=False, check_list=False)\n    assert verified_payload == payload\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>str | dict[str, Any] | None</code> <p>Jam configuration.</p> <code>None</code> <code>pointer</code> <code>str</code> <p>Pointer for the client instance.</p> <code>'jam'</code> <p>Methods:</p> Name Description <code>clear_sessions</code> <p>Clear all sessions associated with a specific session key.</p> <code>create_session</code> <p>Create new session.</p> <code>delete_session</code> <p>Delete a session by its ID.</p> <code>gen_jwt_token</code> <p>Generate a fake JWT token for testing purposes.</p> <code>get_otp_code</code> <p>Generates a OTP code.</p> <code>get_otp_uri</code> <p>Generates an otpauth:// URI for Google Authenticator.</p> <code>get_session</code> <p>Retrieve session data by session ID.</p> <code>jwt_create_token</code> <p>Generate a fake JWT token for testing purposes.</p> <code>jwt_make_payload</code> <p>Payload maker tool.</p> <code>jwt_verify_token</code> <p>Verify JWT token.</p> <code>make_payload</code> <p>Payload maker tool.</p> <code>oauth2_client_credentials_flow</code> <p>Fake client MtM flow.</p> <code>oauth2_fetch_token</code> <p>Fake fetch token.</p> <code>oauth2_get_authorized_url</code> <p>Test oauth2 URL method.</p> <code>oauth2_refresh_token</code> <p>Fake refresh token.</p> <code>otp_code</code> <p>Generates a OTP code.</p> <code>otp_uri</code> <p>Generates an otpauth:// URI for Google Authenticator.</p> <code>otp_verify_code</code> <p>Verifies a given OTP code.</p> <code>rework_session</code> <p>Rework an existing session key to a new one.</p> <code>session_clear</code> <p>Clear all sessions associated with a specific session key.</p> <code>session_create</code> <p>Create new session.</p> <code>session_delete</code> <p>Delete a session by its ID.</p> <code>session_get</code> <p>Retrieve session data by session ID.</p> <code>session_rework</code> <p>Rework an existing session key to a new one.</p> <code>session_update</code> <p>Update session data by session ID.</p> <code>update_session</code> <p>Update session data by session ID.</p> <code>verify_jwt_token</code> <p>Verify JWT token.</p> <code>verify_otp_code</code> <p>Verifies a given OTP code.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.clear_sessions","title":"clear_sessions  <code>async</code>","text":"<pre><code>clear_sessions(session_key: str) -&gt; None\n</code></pre> <p>Clear all sessions associated with a specific session key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The session key whose sessions are to be cleared.</p> required"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.create_session","title":"create_session  <code>async</code>","text":"<pre><code>create_session(\n    session_key: str, data: dict[str, Any]\n) -&gt; str\n</code></pre> <p>Create new session.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The key for the session.</p> required <code>data</code> <code>dict</code> <p>The data to store in the session.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake session ID.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.delete_session","title":"delete_session  <code>async</code>","text":"<pre><code>delete_session(session_id: str) -&gt; None\n</code></pre> <p>Delete a session by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to delete.</p> required"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.gen_jwt_token","title":"gen_jwt_token  <code>async</code>","text":"<pre><code>gen_jwt_token(payload: dict[str, Any]) -&gt; str\n</code></pre> <p>Generate a fake JWT token for testing purposes.</p> <p>This token ALWAYS validates successfully.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>dict[str, Any]</code> <p>Payload to include in the JWT token.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake JWT token.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.get_otp_code","title":"get_otp_code  <code>async</code>","text":"<pre><code>get_otp_code(\n    secret: str, factor: Optional[int] = None\n) -&gt; str\n</code></pre> <p>Generates a OTP code.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret key used to generate the OTP code.</p> required <code>factor</code> <code>int | None</code> <p>An optional factor to influence the OTP generation.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake OTP code.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.get_otp_uri","title":"get_otp_uri  <code>async</code>","text":"<pre><code>get_otp_uri(\n    secret: str,\n    name: Optional[str] = None,\n    issuer: Optional[str] = None,\n    counter: Optional[int] = None,\n) -&gt; str\n</code></pre> <p>Generates an otpauth:// URI for Google Authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret key used to generate the OTP URI.</p> required <code>name</code> <code>str | None</code> <p>An optional name for the OTP account.</p> <code>None</code> <code>issuer</code> <code>str | None</code> <p>An optional issuer for the OTP account.</p> <code>None</code> <code>counter</code> <code>int | None</code> <p>An optional counter for HOTP.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake otpauth:// URI.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.get_session","title":"get_session  <code>async</code>","text":"<pre><code>get_session(session_id: str) -&gt; Optional[dict[str, Any]]\n</code></pre> <p>Retrieve session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to retrieve.</p> required <p>Returns:</p> Type Description <code>Optional[dict[str, Any]]</code> <p>dict | None: The session data if found, otherwise None.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.jwt_create_token","title":"jwt_create_token  <code>async</code>","text":"<pre><code>jwt_create_token(payload: dict[str, Any]) -&gt; str\n</code></pre> <p>Generate a fake JWT token for testing purposes.</p> <p>This token ALWAYS validates successfully.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>dict[str, Any]</code> <p>Payload to include in the JWT token.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake JWT token.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.jwt_make_payload","title":"jwt_make_payload  <code>async</code>","text":"<pre><code>jwt_make_payload(\n    exp: Optional[int], data: dict[str, Any]\n) -&gt; dict[str, Any]\n</code></pre> <p>Payload maker tool.</p> <p>Parameters:</p> Name Type Description Default <code>exp</code> <code>int</code> <p>Expire</p> required <code>data</code> <code>dict[str, Any]</code> <p>Arbitrary keyword arguments to include in the payload.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A dictionary representing the payload.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.jwt_verify_token","title":"jwt_verify_token  <code>async</code>","text":"<pre><code>jwt_verify_token(\n    token: str,\n    check_exp: bool = True,\n    check_list: bool = True,\n) -&gt; dict[str, Any]\n</code></pre> <p>Verify JWT token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>JWT token to verify.</p> required <code>check_exp</code> <code>bool</code> <p>Whether to check the expiration time.</p> <code>True</code> <code>check_list</code> <code>bool</code> <p>Whether to check against a blacklist.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The payload of the verified JWT token.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the token format is invalid.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.make_payload","title":"make_payload  <code>async</code>","text":"<pre><code>make_payload(**payload: dict[str, Any]) -&gt; dict[str, Any]\n</code></pre> <p>Payload maker tool.</p> <p>Parameters:</p> Name Type Description Default <code>**payload</code> <code>dict[str, Any]</code> <p>Arbitrary keyword arguments to include in the payload.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A dictionary representing the payload.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.oauth2_client_credentials_flow","title":"oauth2_client_credentials_flow  <code>async</code>","text":"<pre><code>oauth2_client_credentials_flow(\n    scope: Optional[list[str]] = None, **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Fake client MtM flow.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.oauth2_fetch_token","title":"oauth2_fetch_token  <code>async</code>","text":"<pre><code>oauth2_fetch_token(\n    provider: str,\n    code: str,\n    grant_type: str = \"authorization_code\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Fake fetch token.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.oauth2_get_authorized_url","title":"oauth2_get_authorized_url  <code>async</code>","text":"<pre><code>oauth2_get_authorized_url(\n    provider: str, scope: list[str], **extra_params: Any\n) -&gt; str\n</code></pre> <p>Test oauth2 URL method.</p> <p>Return FAKE url</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.oauth2_refresh_token","title":"oauth2_refresh_token  <code>async</code>","text":"<pre><code>oauth2_refresh_token(\n    provider: str,\n    refresh_token: str,\n    grant_type: str = \"refresh_token\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Fake refresh token.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.otp_code","title":"otp_code  <code>async</code>","text":"<pre><code>otp_code(\n    secret: Union[str, bytes], factor: Optional[int] = None\n) -&gt; str\n</code></pre> <p>Generates a OTP code.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret key used to generate the OTP code.</p> required <code>factor</code> <code>int | None</code> <p>An optional factor to influence the OTP generation.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake OTP code.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.otp_uri","title":"otp_uri  <code>async</code>","text":"<pre><code>otp_uri(\n    secret: str,\n    name: Optional[str] = None,\n    issuer: Optional[str] = None,\n    counter: Optional[int] = None,\n) -&gt; str\n</code></pre> <p>Generates an otpauth:// URI for Google Authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret key used to generate the OTP URI.</p> required <code>name</code> <code>str | None</code> <p>An optional name for the OTP account.</p> <code>None</code> <code>issuer</code> <code>str | None</code> <p>An optional issuer for the OTP account.</p> <code>None</code> <code>counter</code> <code>int | None</code> <p>An optional counter for HOTP.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake otpauth:// URI.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.otp_verify_code","title":"otp_verify_code  <code>async</code>","text":"<pre><code>otp_verify_code(\n    secret: Union[str, bytes],\n    code: str,\n    factor: Optional[int] = None,\n    look_ahead: Optional[int] = 1,\n) -&gt; bool\n</code></pre> <p>Verifies a given OTP code.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret key used to verify the OTP code.</p> required <code>code</code> <code>str</code> <p>The OTP code to verify.</p> required <code>factor</code> <code>int | None</code> <p>An optional factor that was used during OTP generation.</p> <code>None</code> <code>look_ahead</code> <code>int | None</code> <p>An optional look-ahead window for verification.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the OTP code is valid, False otherwise.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.rework_session","title":"rework_session  <code>async</code>","text":"<pre><code>rework_session(old_session_key: str) -&gt; str\n</code></pre> <p>Rework an existing session key to a new one.</p> <p>Parameters:</p> Name Type Description Default <code>old_session_key</code> <code>str</code> <p>The old session key to be reworked.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A new fake session ID.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.session_clear","title":"session_clear  <code>async</code>","text":"<pre><code>session_clear(session_key: str) -&gt; None\n</code></pre> <p>Clear all sessions associated with a specific session key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The session key whose sessions are to be cleared.</p> required"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.session_create","title":"session_create  <code>async</code>","text":"<pre><code>session_create(\n    session_key: str, data: dict[str, Any]\n) -&gt; str\n</code></pre> <p>Create new session.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The key for the session.</p> required <code>data</code> <code>dict</code> <p>The data to store in the session.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake session ID.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.session_delete","title":"session_delete  <code>async</code>","text":"<pre><code>session_delete(session_id: str) -&gt; None\n</code></pre> <p>Delete a session by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to delete.</p> required"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.session_get","title":"session_get  <code>async</code>","text":"<pre><code>session_get(session_id: str) -&gt; Optional[dict[str, Any]]\n</code></pre> <p>Retrieve session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to retrieve.</p> required <p>Returns:</p> Type Description <code>Optional[dict[str, Any]]</code> <p>dict | None: The session data if found, otherwise None.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.session_rework","title":"session_rework  <code>async</code>","text":"<pre><code>session_rework(old_session_id: str) -&gt; str\n</code></pre> <p>Rework an existing session key to a new one.</p> <p>Parameters:</p> Name Type Description Default <code>old_session_id</code> <code>str</code> <p>The old session id to be reworked.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A new fake session ID.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.session_update","title":"session_update  <code>async</code>","text":"<pre><code>session_update(\n    session_id: str, data: dict[str, Any]\n) -&gt; None\n</code></pre> <p>Update session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to update.</p> required <code>data</code> <code>dict</code> <p>The new data for the session.</p> required"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.update_session","title":"update_session  <code>async</code>","text":"<pre><code>update_session(session_id: str, data: dict) -&gt; None\n</code></pre> <p>Update session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to update.</p> required <code>data</code> <code>dict</code> <p>The new data for the session.</p> required"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.verify_jwt_token","title":"verify_jwt_token  <code>async</code>","text":"<pre><code>verify_jwt_token(\n    token: str,\n    check_exp: bool = True,\n    check_list: bool = True,\n) -&gt; dict[str, Any]\n</code></pre> <p>Verify JWT token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>JWT token to verify.</p> required <code>check_exp</code> <code>bool</code> <p>Whether to check the expiration time.</p> <code>True</code> <code>check_list</code> <code>bool</code> <p>Whether to check against a blacklist.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The payload of the verified JWT token.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the token format is invalid.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestAsyncJam.verify_otp_code","title":"verify_otp_code  <code>async</code>","text":"<pre><code>verify_otp_code(\n    secret: str,\n    code: str,\n    factor: Optional[int] = None,\n    look_ahead: Optional[int] = None,\n) -&gt; bool\n</code></pre> <p>Verifies a given OTP code.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret key used to verify the OTP code.</p> required <code>code</code> <code>str</code> <p>The OTP code to verify.</p> required <code>factor</code> <code>int | None</code> <p>An optional factor that was used during OTP generation.</p> <code>None</code> <code>look_ahead</code> <code>int | None</code> <p>An optional look-ahead window for verification.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the OTP code is valid, False otherwise.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam","title":"TestJam","text":"<pre><code>TestJam(\n    config: Optional[Union[str, dict[str, Any]]] = None,\n    pointer: str = \"jam\",\n)\n</code></pre> <p>               Bases: <code>Jam</code></p> <p>A test client for Jam.</p> <p>Examples:</p> <pre><code>import pytest\nfrom jam.tests import TestJam\nfrom jam.tests.fakers import invalid_token\n\n@pytest.fixture\ndef client() -&gt; TestJam:\n    return TestJam()\n\ndef test_gen_jwt_token(client) -&gt; None:\n    payload = {\"user_id\": 1, \"role\": \"admin\"}\n    token = client.gen_jwt_token(payload)\n    assert isinstance(token, str)\n    assert token.count(\".\") == 2  # JWT tokens have two dots\n\ndef test_verify_jwt_token(client) -&gt; None:\n    payload = {\"user_id\": 1, \"role\": \"admin\"}\n    token = client.gen_jwt_token(payload)\n    verified_payload = client.verify_jwt_token(token, check_exp=False, check_list=False)\n    assert verified_payload == payload\n\ndef test_invalid_jwt_token(client) -&gt; None:\n    token = invalid_token()\n    with pytest.raises(ValueError):\n        client.verify_jwt_token(token, check_exp=False, check_list=False)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>str | dict[str, Any] | None</code> <p>Jam configuration.</p> <code>None</code> <code>pointer</code> <code>str</code> <p>Pointer for the client instance.</p> <code>'jam'</code> <p>Methods:</p> Name Description <code>clear_sessions</code> <p>Clear all sessions associated with a specific session key.</p> <code>create_session</code> <p>Create new session.</p> <code>delete_session</code> <p>Delete a session by its ID.</p> <code>gen_jwt_token</code> <p>Generate a fake JWT token for testing purposes.</p> <code>get_otp_code</code> <p>Generates a OTP code.</p> <code>get_otp_uri</code> <p>Generates an otpauth:// URI for Google Authenticator.</p> <code>get_session</code> <p>Retrieve session data by session ID.</p> <code>jwt_create_token</code> <p>Generate a fake JWT token for testing purposes.</p> <code>jwt_make_payload</code> <p>Payload maker tool.</p> <code>jwt_verify_token</code> <p>Verify JWT token.</p> <code>make_payload</code> <p>Payload maker tool.</p> <code>oauth2_client_credentials_flow</code> <p>Fake client MtM flow.</p> <code>oauth2_fetch_token</code> <p>Fake fetch token.</p> <code>oauth2_get_authorized_url</code> <p>Test oauth2 URL method.</p> <code>oauth2_refresh_token</code> <p>Fake refresh token.</p> <code>otp_code</code> <p>Generates a OTP code.</p> <code>otp_uri</code> <p>Generates an otpauth:// URI for Google Authenticator.</p> <code>otp_verify_code</code> <p>Verifies a given OTP code.</p> <code>rework_session</code> <p>Rework an existing session key to a new one.</p> <code>session_clear</code> <p>Clear all sessions associated with a specific session key.</p> <code>session_create</code> <p>Create new session.</p> <code>session_delete</code> <p>Delete a session by its ID.</p> <code>session_get</code> <p>Retrieve session data by session ID.</p> <code>session_rework</code> <p>Rework an existing session key to a new one.</p> <code>session_update</code> <p>Update session data by session ID.</p> <code>update_session</code> <p>Update session data by session ID.</p> <code>verify_jwt_token</code> <p>Verify JWT token.</p> <code>verify_otp_code</code> <p>Verifies a given OTP code.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.clear_sessions","title":"clear_sessions","text":"<pre><code>clear_sessions(session_key: str) -&gt; None\n</code></pre> <p>Clear all sessions associated with a specific session key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The session key whose sessions are to be cleared.</p> required"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.create_session","title":"create_session","text":"<pre><code>create_session(\n    session_key: str, data: dict[str, Any]\n) -&gt; str\n</code></pre> <p>Create new session.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The key for the session.</p> required <code>data</code> <code>dict</code> <p>The data to store in the session.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake session ID.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.delete_session","title":"delete_session","text":"<pre><code>delete_session(session_id: str) -&gt; None\n</code></pre> <p>Delete a session by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to delete.</p> required"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.gen_jwt_token","title":"gen_jwt_token","text":"<pre><code>gen_jwt_token(payload: dict[str, Any]) -&gt; str\n</code></pre> <p>Generate a fake JWT token for testing purposes.</p> <p>This token ALWAYS validates successfully.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>dict[str, Any]</code> <p>Payload to include in the JWT token.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake JWT token.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.get_otp_code","title":"get_otp_code","text":"<pre><code>get_otp_code(\n    secret: str, factor: Optional[int] = None\n) -&gt; str\n</code></pre> <p>Generates a OTP code.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret key used to generate the OTP code.</p> required <code>factor</code> <code>int | None</code> <p>An optional factor to influence the OTP generation.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake OTP code.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.get_otp_uri","title":"get_otp_uri","text":"<pre><code>get_otp_uri(\n    secret: str,\n    name: Optional[str] = None,\n    issuer: Optional[str] = None,\n    counter: Optional[int] = None,\n) -&gt; str\n</code></pre> <p>Generates an otpauth:// URI for Google Authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret key used to generate the OTP URI.</p> required <code>name</code> <code>str | None</code> <p>An optional name for the OTP account.</p> <code>None</code> <code>issuer</code> <code>str | None</code> <p>An optional issuer for the OTP account.</p> <code>None</code> <code>counter</code> <code>int | None</code> <p>An optional counter for HOTP.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake otpauth:// URI.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.get_session","title":"get_session","text":"<pre><code>get_session(session_id: str) -&gt; Optional[dict[str, Any]]\n</code></pre> <p>Retrieve session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to retrieve.</p> required <p>Returns:</p> Type Description <code>Optional[dict[str, Any]]</code> <p>dict | None: The session data if found, otherwise None.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.jwt_create_token","title":"jwt_create_token","text":"<pre><code>jwt_create_token(payload: dict[str, Any]) -&gt; str\n</code></pre> <p>Generate a fake JWT token for testing purposes.</p> <p>This token ALWAYS validates successfully.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>dict[str, Any]</code> <p>Payload to include in the JWT token.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake JWT token.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.jwt_make_payload","title":"jwt_make_payload","text":"<pre><code>jwt_make_payload(\n    exp: Optional[int], data: dict[str, Any]\n) -&gt; dict[str, Any]\n</code></pre> <p>Payload maker tool.</p> <p>Parameters:</p> Name Type Description Default <code>exp</code> <code>int | None</code> <p>Expire</p> required <code>data</code> <code>dict[str, Any]</code> <p>Arbitrary keyword arguments to include in the payload.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A dictionary representing the payload.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.jwt_verify_token","title":"jwt_verify_token","text":"<pre><code>jwt_verify_token(\n    token: str,\n    check_exp: bool = True,\n    check_list: bool = True,\n) -&gt; dict[str, Any]\n</code></pre> <p>Verify JWT token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>JWT token to verify.</p> required <code>check_exp</code> <code>bool</code> <p>Whether to check the expiration time.</p> <code>True</code> <code>check_list</code> <code>bool</code> <p>Whether to check against a blacklist.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The payload of the verified JWT token.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the token format is invalid.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.make_payload","title":"make_payload","text":"<pre><code>make_payload(**payload: dict[str, Any]) -&gt; dict[str, Any]\n</code></pre> <p>Payload maker tool.</p> <p>Parameters:</p> Name Type Description Default <code>**payload</code> <code>dict[str, Any]</code> <p>Arbitrary keyword arguments to include in the payload.</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A dictionary representing the payload.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.oauth2_client_credentials_flow","title":"oauth2_client_credentials_flow","text":"<pre><code>oauth2_client_credentials_flow(\n    scope: Optional[list[str]] = None, **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Fake client MtM flow.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.oauth2_fetch_token","title":"oauth2_fetch_token","text":"<pre><code>oauth2_fetch_token(\n    provider: str,\n    code: str,\n    grant_type: str = \"authorization_code\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Fake fetch token.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.oauth2_get_authorized_url","title":"oauth2_get_authorized_url","text":"<pre><code>oauth2_get_authorized_url(\n    provider: str, scope: list[str], **extra_params: Any\n) -&gt; str\n</code></pre> <p>Test oauth2 URL method.</p> <p>Return FAKE url</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.oauth2_refresh_token","title":"oauth2_refresh_token","text":"<pre><code>oauth2_refresh_token(\n    provider: str,\n    refresh_token: str,\n    grant_type: str = \"refresh_token\",\n    **extra_params: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Fake refresh token.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.otp_code","title":"otp_code","text":"<pre><code>otp_code(\n    secret: Union[str, bytes], factor: Optional[int] = None\n) -&gt; str\n</code></pre> <p>Generates a OTP code.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret key used to generate the OTP code.</p> required <code>factor</code> <code>int | None</code> <p>An optional factor to influence the OTP generation.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake OTP code.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.otp_uri","title":"otp_uri","text":"<pre><code>otp_uri(\n    secret: str,\n    name: Optional[str] = None,\n    issuer: Optional[str] = None,\n    counter: Optional[int] = None,\n) -&gt; str\n</code></pre> <p>Generates an otpauth:// URI for Google Authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret key used to generate the OTP URI.</p> required <code>name</code> <code>str | None</code> <p>An optional name for the OTP account.</p> <code>None</code> <code>issuer</code> <code>str | None</code> <p>An optional issuer for the OTP account.</p> <code>None</code> <code>counter</code> <code>int | None</code> <p>An optional counter for HOTP.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake otpauth:// URI.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.otp_verify_code","title":"otp_verify_code","text":"<pre><code>otp_verify_code(\n    secret: Union[str, bytes],\n    code: str,\n    factor: Optional[int] = None,\n    look_ahead: Optional[int] = 1,\n) -&gt; bool\n</code></pre> <p>Verifies a given OTP code.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret key used to verify the OTP code.</p> required <code>code</code> <code>str</code> <p>The OTP code to verify.</p> required <code>factor</code> <code>int | None</code> <p>An optional factor that was used during OTP generation.</p> <code>None</code> <code>look_ahead</code> <code>int | None</code> <p>An optional look-ahead window for verification.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the OTP code is valid, False otherwise.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.rework_session","title":"rework_session","text":"<pre><code>rework_session(old_session_key: str) -&gt; str\n</code></pre> <p>Rework an existing session key to a new one.</p> <p>Parameters:</p> Name Type Description Default <code>old_session_key</code> <code>str</code> <p>The old session key to be reworked.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A new fake session ID.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.session_clear","title":"session_clear","text":"<pre><code>session_clear(session_key: str) -&gt; None\n</code></pre> <p>Clear all sessions associated with a specific session key.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The session key whose sessions are to be cleared.</p> required"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.session_create","title":"session_create","text":"<pre><code>session_create(\n    session_key: str, data: dict[str, Any]\n) -&gt; str\n</code></pre> <p>Create new session.</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>str</code> <p>The key for the session.</p> required <code>data</code> <code>dict</code> <p>The data to store in the session.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake session ID.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.session_delete","title":"session_delete","text":"<pre><code>session_delete(session_id: str) -&gt; None\n</code></pre> <p>Delete a session by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to delete.</p> required"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.session_get","title":"session_get","text":"<pre><code>session_get(session_id: str) -&gt; Optional[dict[str, Any]]\n</code></pre> <p>Retrieve session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to retrieve.</p> required <p>Returns:</p> Type Description <code>Optional[dict[str, Any]]</code> <p>dict | None: The session data if found, otherwise None.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.session_rework","title":"session_rework","text":"<pre><code>session_rework(old_session_id: str) -&gt; str\n</code></pre> <p>Rework an existing session key to a new one.</p> <p>Parameters:</p> Name Type Description Default <code>old_session_id</code> <code>str</code> <p>The old session id to be reworked.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A new fake session ID.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.session_update","title":"session_update","text":"<pre><code>session_update(\n    session_id: str, data: dict[str, Any]\n) -&gt; None\n</code></pre> <p>Update session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to update.</p> required <code>data</code> <code>dict</code> <p>The new data for the session.</p> required"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.update_session","title":"update_session","text":"<pre><code>update_session(session_id: str, data: dict) -&gt; None\n</code></pre> <p>Update session data by session ID.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>The ID of the session to update.</p> required <code>data</code> <code>dict</code> <p>The new data for the session.</p> required"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.verify_jwt_token","title":"verify_jwt_token","text":"<pre><code>verify_jwt_token(\n    token: str,\n    check_exp: bool = True,\n    check_list: bool = True,\n) -&gt; dict[str, Any]\n</code></pre> <p>Verify JWT token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>JWT token to verify.</p> required <code>check_exp</code> <code>bool</code> <p>Whether to check the expiration time.</p> <code>True</code> <code>check_list</code> <code>bool</code> <p>Whether to check against a blacklist.</p> <code>True</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The payload of the verified JWT token.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the token format is invalid.</p>"},{"location":"api/tests/clients/#jam.tests.clients.TestJam.verify_otp_code","title":"verify_otp_code","text":"<pre><code>verify_otp_code(\n    secret: str,\n    code: str,\n    factor: Optional[int] = None,\n    look_ahead: Optional[int] = None,\n) -&gt; bool\n</code></pre> <p>Verifies a given OTP code.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret key used to verify the OTP code.</p> required <code>code</code> <code>str</code> <p>The OTP code to verify.</p> required <code>factor</code> <code>int | None</code> <p>An optional factor that was used during OTP generation.</p> <code>None</code> <code>look_ahead</code> <code>int | None</code> <p>An optional look-ahead window for verification.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the OTP code is valid, False otherwise.</p>"},{"location":"api/tests/fakers/","title":"jam.tests.fakers","text":"<p>FILE PATH: <code>jam/tests/fakers.py</code></p>"},{"location":"api/tests/fakers/#jam.tests.fakers","title":"fakers","text":"<p>Functions:</p> Name Description <code>fake_jwt_token</code> <p>Generate a fake JWT token for testing purposes.</p> <code>fake_oauth2_token</code> <p>Return VALID fake oauth2 token.</p> <code>invalid_oauth2_token</code> <p>Invalid OAuth2 token.</p> <code>invalid_token</code> <p>Generate an invalid JWT token for testing purposes.</p>"},{"location":"api/tests/fakers/#jam.tests.fakers.fake_jwt_token","title":"fake_jwt_token","text":"<pre><code>fake_jwt_token(payload: Optional[dict[str, Any]]) -&gt; str\n</code></pre> <p>Generate a fake JWT token for testing purposes.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A fake JWT token.</p>"},{"location":"api/tests/fakers/#jam.tests.fakers.fake_oauth2_token","title":"fake_oauth2_token","text":"<pre><code>fake_oauth2_token() -&gt; str\n</code></pre> <p>Return VALID fake oauth2 token.</p>"},{"location":"api/tests/fakers/#jam.tests.fakers.invalid_oauth2_token","title":"invalid_oauth2_token","text":"<pre><code>invalid_oauth2_token() -&gt; str\n</code></pre> <p>Invalid OAuth2 token.</p>"},{"location":"api/tests/fakers/#jam.tests.fakers.invalid_token","title":"invalid_token","text":"<pre><code>invalid_token() -&gt; str\n</code></pre> <p>Generate an invalid JWT token for testing purposes.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>An invalid JWT token.</p>"},{"location":"api/utils/aes/","title":"jam.utils.aes","text":"<p>FILE PATH: <code>jam/utils/aes.py</code></p>"},{"location":"api/utils/aes/#jam.utils.aes","title":"aes","text":"<p>Functions:</p> Name Description <code>generate_aes_key</code> <p>Generate a new AES key.</p>"},{"location":"api/utils/aes/#jam.utils.aes.generate_aes_key","title":"generate_aes_key","text":"<pre><code>generate_aes_key() -&gt; bytes\n</code></pre> <p>Generate a new AES key.</p>"},{"location":"api/utils/config_maker/","title":"jam.utils.config_maker","text":"<p>FILE PATH: <code>jam/utils/config_maker.md</code></p>"},{"location":"api/utils/config_maker/#jam.utils.config_maker","title":"config_maker","text":"<p>Functions:</p> Name Description <code>__config_maker__</code> <p>Base config masker.</p> <code>__module_loader__</code> <p>Loader custom modules from config.</p> <code>__toml_config_parser__</code> <p>Private method for parsing TOML config.</p> <code>__yaml_config_parser__</code> <p>Private method for parsing YML config with env substitution.</p>"},{"location":"api/utils/config_maker/#jam.utils.config_maker.__config_maker__","title":"__config_maker__","text":"<pre><code>__config_maker__(\n    config: Union[str, dict[str, Any]],\n    pointer: str = GENERIC_POINTER,\n) -&gt; dict[str, Any]\n</code></pre> <p>Base config masker.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Union[str, dict[str, Any]</code> <p>Config dict or file path</p> required <code>pointer</code> <code>str</code> <p>Pointer to config read</p> <code>GENERIC_POINTER</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Parsed config</p>"},{"location":"api/utils/config_maker/#jam.utils.config_maker.__module_loader__","title":"__module_loader__","text":"<pre><code>__module_loader__(path: str) -&gt; Callable\n</code></pre> <p>Loader custom modules from config.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to module. For example: <code>my_app.classes.SomeClass</code></p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If path not str</p> <p>Returns:</p> Type Description <code>Callable</code> <p>Callable</p>"},{"location":"api/utils/config_maker/#jam.utils.config_maker.__toml_config_parser__","title":"__toml_config_parser__","text":"<pre><code>__toml_config_parser__(\n    path: str = \"pyproject.toml\",\n    pointer: str = GENERIC_POINTER,\n) -&gt; dict[str, Any]\n</code></pre> <p>Private method for parsing TOML config.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to config.toml</p> <code>'pyproject.toml'</code> <code>pointer</code> <code>str</code> <p>Pointer to config read</p> <code>GENERIC_POINTER</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If file not found</p> <code>ValueError</code> <p>If invalid TOML file</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dict with config param</p>"},{"location":"api/utils/config_maker/#jam.utils.config_maker.__yaml_config_parser__","title":"__yaml_config_parser__","text":"<pre><code>__yaml_config_parser__(\n    path: str, pointer: str = GENERIC_POINTER\n) -&gt; dict[str, Any]\n</code></pre> <p>Private method for parsing YML config with env substitution.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to config.yml</p> required <code>pointer</code> <code>str</code> <p>Pointer to config section to read.</p> <code>GENERIC_POINTER</code> <p>Raises:</p> Type Description <code>ImportError</code> <p>If pyyaml not installed</p> <code>FileNotFoundError</code> <p>If file not found</p> <code>ValueError</code> <p>If invalid YAML</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Parsed YAML section with environment variable substitution.</p>"},{"location":"api/utils/otp_keys/","title":"jam.utils.otp_keys","text":"<p>FILE PATH: <code>jam/utils/otp_keys.py</code></p>"},{"location":"api/utils/otp_keys/#jam.utils.otp_keys","title":"otp_keys","text":"<p>Functions:</p> Name Description <code>generate_otp_key</code> <p>Generate generic OTP secret key.</p> <code>otp_key_from_string</code> <p>Generate OTP-valid key from string.</p>"},{"location":"api/utils/otp_keys/#jam.utils.otp_keys.generate_otp_key","title":"generate_otp_key","text":"<pre><code>generate_otp_key(entropy_bits: int = 128) -&gt; str\n</code></pre> <p>Generate generic OTP secret key.</p> <p>Parameters:</p> Name Type Description Default <code>entropy_bits</code> <code>int</code> <p>Entropy bits to key</p> <code>128</code> <p>Returns:</p> Type Description <code>str</code> <p>str</p>"},{"location":"api/utils/otp_keys/#jam.utils.otp_keys.otp_key_from_string","title":"otp_key_from_string","text":"<pre><code>otp_key_from_string(s: str) -&gt; str\n</code></pre> <p>Generate OTP-valid key from string.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>str</code> <p>String for key</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <code>str</code> <p>OTP key</p> Example <pre><code>&gt;&gt;&gt; from jam.utils import otp_key_from_string\n&gt;&gt;&gt; user_email: str = \"some.email@mail.com\"\n&gt;&gt;&gt; key = otp_key_from_string(user_email)\n&gt;&gt;&gt; print(key)\n'O54O6YRKTH3IPNEBIUMKMK3FZ35OF6Q5'\n</code></pre>"},{"location":"api/utils/rsa/","title":"jam.utils.rsa","text":"<p>FILE PATH: <code>jam/utils/rsa.py</code></p>"},{"location":"api/utils/rsa/#jam.utils.rsa","title":"rsa","text":"<p>Functions:</p> Name Description <code>generate_rsa_key_pair</code> <p>RSA key generation utility.</p>"},{"location":"api/utils/rsa/#jam.utils.rsa.generate_rsa_key_pair","title":"generate_rsa_key_pair","text":"<pre><code>generate_rsa_key_pair(\n    key_size: int = 2048,\n) -&gt; dict[str, str]\n</code></pre> <p>RSA key generation utility.</p> <p>Parameters:</p> Name Type Description Default <code>key_size</code> <code>int</code> <p>Size of RSA key</p> <code>2048</code> <p>Returns:</p> Type Description <code>dict</code> <p>with public and private keys in format:</p> <pre><code>{\n    \"public\": \"some_key\",\n    \"private\": \"key\"\n}\n</code></pre>"},{"location":"api/utils/salt_hash/","title":"jam.utils.salt_hash","text":"<p>FILE PATH: <code>jam/utils/salt_hash.py</code></p>"},{"location":"api/utils/salt_hash/#jam.utils.salt_hash","title":"salt_hash","text":"<p>Utilities for secure password hashing and verification. Uses PBKDF2-HMAC-SHA256 with salt and constant-time comparison.</p> <p>Functions:</p> Name Description <code>check_password</code> <p>Verifies a password by recalculating the hash and comparing it to the stored hash.</p> <code>deserialize_hash</code> <p>Splits a stored string into salt and hash.</p> <code>hash_password</code> <p>Hashes a password with a salt using PBKDF2-HMAC-SHA256.</p> <code>serialize_hash</code> <p>Combines salt and hash into a single string for database storage.</p>"},{"location":"api/utils/salt_hash/#jam.utils.salt_hash.check_password","title":"check_password","text":"<pre><code>check_password(\n    password: str,\n    salt_hex: str,\n    hash_hex: str,\n    iterations: int = 100000,\n) -&gt; bool\n</code></pre> <p>Verifies a password by recalculating the hash and comparing it to the stored hash.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>Password to verify.</p> required <code>salt_hex</code> <code>str</code> <p>Hex representation of the salt.</p> required <code>hash_hex</code> <code>str</code> <p>Hex representation of the stored hash.</p> required <code>iterations</code> <code>int</code> <p>Number of PBKDF2 iterations, must match the hashing call.</p> <code>100000</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the password is correct, False otherwise.</p> Example <pre><code>&gt;&gt;&gt; salt, hash_ = hash_password(\"my_password\")\n&gt;&gt;&gt; check_password(\"my_password\", salt, hash_)\nTrue\n&gt;&gt;&gt; check_password(\"wrong_password\", salt, hash_)\nFalse\n\n# Using custom iterations\n&gt;&gt;&gt; salt, hash_ = hash_password(\"my_password\", iterations=150_000)\n&gt;&gt;&gt; check_password(\"my_password\", salt, hash_, iterations=150_000)\nTrue\n</code></pre>"},{"location":"api/utils/salt_hash/#jam.utils.salt_hash.deserialize_hash","title":"deserialize_hash","text":"<pre><code>deserialize_hash(data: str) -&gt; tuple[str, str]\n</code></pre> <p>Splits a stored string into salt and hash.</p> Example <pre><code>&gt;&gt;&gt; salt, hash_ = deserialize_hash(\"abcdef1234$9876543210\")\n&gt;&gt;&gt; isinstance(salt, str)\nTrue\n&gt;&gt;&gt; isinstance(hash_, str)\nTrue\n</code></pre>"},{"location":"api/utils/salt_hash/#jam.utils.salt_hash.hash_password","title":"hash_password","text":"<pre><code>hash_password(\n    password: str,\n    salt: Optional[bytes] = None,\n    iterations: int = 100000,\n    salt_size: int = 16,\n) -&gt; tuple[str, str]\n</code></pre> <p>Hashes a password with a salt using PBKDF2-HMAC-SHA256.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>Password to hash.</p> required <code>salt</code> <code>bytes | None</code> <p>Salt. If None, a random salt is generated.</p> <code>None</code> <code>iterations</code> <code>int</code> <p>Number of PBKDF2 iterations.</p> <code>100000</code> <code>salt_size</code> <code>int</code> <p>Size of the random salt in bytes.</p> <code>16</code> <p>Returns:</p> Type Description <code>tuple[str, str]</code> <p>tuple[str, str]: (hex_salt, hex_hash)</p> Example <pre><code>&gt;&gt;&gt; salt, hash_ = hash_password(\"my_password\")\n&gt;&gt;&gt; isinstance(salt, str)\nTrue\n&gt;&gt;&gt; isinstance(hash_, str)\nTrue\n\n# Using custom iterations and salt size\n&gt;&gt;&gt; salt, hash_ = hash_password(\"my_password\", iterations=150_000, salt_size=24)\n</code></pre>"},{"location":"api/utils/salt_hash/#jam.utils.salt_hash.serialize_hash","title":"serialize_hash","text":"<pre><code>serialize_hash(salt_hex: str, hash_hex: str) -&gt; str\n</code></pre> <p>Combines salt and hash into a single string for database storage.</p> Example <pre><code>&gt;&gt;&gt; salt, hash_ = hash_password(\"my_password\")\n&gt;&gt;&gt; serialized = serialize_hash(salt, hash_)\n&gt;&gt;&gt; isinstance(serialized, str)\nTrue\n</code></pre>"},{"location":"api/utils/xor/","title":"jam.utils.xor","text":"<p>FILE PATH: <code>jam/utils/xor.py</code></p>"},{"location":"api/utils/xor/#jam.utils.xor","title":"xor","text":"<p>Functions:</p> Name Description <code>xor_my_data</code> <p>Encrypts a string using a secret key with the XOR cipher.</p>"},{"location":"api/utils/xor/#jam.utils.xor.xor_my_data","title":"xor_my_data","text":"<pre><code>xor_my_data(data: str, key: str) -&gt; str\n</code></pre> <p>Encrypts a string using a secret key with the XOR cipher.</p> <p>This function performs an XOR operation on each byte of the input data with the corresponding byte of the key. If the key is shorter than the data, it wraps around and continues from the beginning of the key. If you need to decrypt data, use the same function with the same secret key. XOR is a symmetric operation.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The plain text string to be encrypted.</p> required <code>key</code> <code>str</code> <p>The secret key used for encryption.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The encrypted data represented as a hexadecimal string.</p> Example <pre><code>&gt;&gt;&gt; encrypted = xor_my_data(\"Hello, World!\", \"secretkey\")\n&gt;&gt;&gt; print(encrypted)\n&lt;...encrypted hex string...&gt;\n</code></pre>"},{"location":"breaking_changes/jam114_to_200/","title":"Breaking changes 1.1.4 to 2.0.0","text":""},{"location":"breaking_changes/jam114_to_200/#instance","title":"Instance","text":"<p>With the introduction of a more convenient configuration format, it was decided to move <code>auth_type</code> to the config.</p> <p>Old format: <pre><code>from jam import Jam\n\njam = Jam(auth_type=\"jwt\", config=config)\n</code></pre></p> <p>New format: <pre><code>from jam import Jam\n\n'''config.yml\njam:\n  auth_type: jwt\n  alg: HS256\n  secret_key: SECRET_KEY\n  expire: 3600\n'''\n\njam = Jam(config=\"config.yml\")\n</code></pre> More about configurations: jam.makridenko.ru/config</p>"},{"location":"breaking_changes/jam114_to_200/#configuring-jwt-lists","title":"Configuring JWT lists","text":"<p>Previously, lists were configured by passing an instance of the <code>jam.jwt.lists.*</code> class: <pre><code>from jam import Jam\nfrom jam.jwt.lists.json import JSONList\n\nconfig = {\n    \"alg\": \"HS256\",\n    \"secret_key\": \"some_key\",\n    \"expire\": 3600,\n    \"list\": JSONList(type=\"black\", json_path=\"blacklist.json\")\n}\njam = Jam(auth_type=\"jwt\", config=config)\n</code></pre></p> <p>Now, custom settings are passed for standard <code>redis</code> and <code>json</code> lists. Example in <code>dict</code> configuration: <pre><code>from jam import Jam\n\nconfig = {\n    \"alg\": \"HS256\",\n    \"secret_key\": \"some_key\",\n    \"expire\": 3600,\n    \"list\": {\n        \"type\": \"black\",\n        \"backend\": \"redis\",\n        \"redis_uri\": \"redis://0.0.0.0:6379/0\"\n    }\n}\n\njam = Jam(config=config)\n</code></pre></p> <p>For custom lists: <pre><code>from jam import Jam\n\nconfig = {\n    \"alg\": \"HS256\",\n    \"secret_key\": \"some_key\",\n    \"expire\": 3600,\n    \"list\": {\n        \"type\": \"black\",\n        \"backend\": \"custom\",\n        \"custom_module\": \"app.some_module.SomeModule\",\n        \"param1\": \"val1\",\n        \"param2\": 123\n    }\n}\n\njam = Jam(config=config)\n</code></pre></p>"},{"location":"breaking_changes/jam114_to_200/#renaming-abclist","title":"Renaming <code>ABCList</code>","text":"<p>It was decided to name all abstract modules <code>Base&lt;NAME&gt;</code>, so <code>ABCList</code> was renamed to <code>BaseJWTList</code>. More details: <code>jam.jwt.list.__abc_list_repo__</code></p>"},{"location":"breaking_changes/jam114_to_200/#renaming-__abstractinstance","title":"Renaming <code>__AbstractInstance</code>:","text":"<p>It was decided to name all abstract modules <code>Base&lt;NAME&gt;</code>, so <code>__AbstractInstance</code> was renamed to <code>BaseJam</code>. More details: <code>jam.__abc_instances__.BaseJam</code></p>"},{"location":"breaking_changes/jam114_to_200/#removal-of-jamutilsmake_jwt_config","title":"Removal of <code>jam.utils.make_jwt_config</code>","text":"<p>Configuration is now done by writing config files, so a separate function is no longer needed.</p>"},{"location":"breaking_changes/jam114_to_200/#optional-dependencies","title":"Optional dependencies","text":"<p>Renamed: * <code>pip install jamlib[json-lists]</code> -&gt; <code>pip install jamlib[json]</code> * <code>pip install jamlib[redis-lists]</code> -&gt; <code>pip install jamlib[redis]</code></p>"},{"location":"extensions/fastapi/","title":"Jam + FastAPI = <3","text":"<p>FastAPI is fully compatible with Starlette, so use the Starlette integration. For convenience, there is an alias in <code>jam.ext</code> imports, so you can do: <pre><code>from jam.ext.fastapi import JWTBackend, SessionBackend\n</code></pre> Instead of: <pre><code>from jam.ext.starlette import JWTBackend, SessionBackend\n</code></pre></p>"},{"location":"extensions/flask/","title":"Jam + Flask = <3","text":"<p>Integration with Flask is done in the form of extension classes, which are recommended in the official documentation.</p>"},{"location":"extensions/flask/#jam-extension","title":"Jam Extension","text":"<p>This is a simple extension that does not check tokens/sessions like <code>JWTExtension</code> and <code>SessionExtension</code>. It is needed for easy access to jam inside routes, via <code>current_app.extensions[\u201cjam\u201d]</code>:</p> <p>Tip</p> <p>For more convenient operation, it is recommended to use <code>JamExtension</code> in conjunction with another extension, for example <code>JamExtension</code> + <code>JWTExtension</code>.</p> <pre><code>from flask import current_app\n\n@app.route(\"/login\")\ndef login(some_param, some_param2):\n    jam = current_app.extensions[\"jam\"]\n    # some logic\n    token = jam.gen_jwt_token(payload)\n</code></pre> <p>Example of integration with your Flask application: <pre><code>from flask import Flask\n\nfrom jam import Jam\nfrom jam.ext.flask import JamExtension\n\njam = Jam()\n\ndef create_app() -&gt; Flask:\n    app = Flask(__name__)\n    jam_ext = JamExtension(jam)\n    jam_ext.init_app(app)\n    return app\n</code></pre></p>"},{"location":"extensions/flask/#jwt-extension","title":"JWT Extension","text":"<p>This extension checks tokens from the header or cookie and writes the payload to the route context.</p>"},{"location":"extensions/flask/#setup-extension","title":"Setup extension","text":""},{"location":"extensions/flask/#jam-jam","title":"<code>jam</code>: <code>Jam</code>","text":"<p>Jam instance.</p>"},{"location":"extensions/flask/#app-flask-none-none","title":"<code>app</code>: <code>Flask | None = None</code>","text":"<p>Flask app instance.</p>"},{"location":"extensions/flask/#cookie_name-str-none","title":"<code>cookie_name</code>: <code>str | None</code>","text":"<p>The cookie name for the access token. If passed, <code>Extension</code> will read the token from it. If <code>None</code> is passed, <code>Extension</code> will read the <code>header</code>.</p>"},{"location":"extensions/flask/#header_name-str-none","title":"<code>header_name</code>: <code>str | None</code>","text":"<p>The name of the header for the access token. If passed, <code>Extension</code> will read the token from the header. If <code>None</code> is passed, <code>Extension</code> will read the <code>cookie</code>.</p> <p>Tip</p> <p><code>JWTExtension</code> expects the header to be in the format: <code>Bearer &lt;token&gt;</code></p> <pre><code>from flask import Flask\n\nfrom jam import Jam\nfrom jam.ext.flask import JWTExtension\n\n\napp = Flask(__name__)\njam = Jam()\njwt_ext = JWTExtension(jam, header_name=\"Authorization\", cookie_name=None)\njwt_ext.init_app(app)\n</code></pre>"},{"location":"extensions/flask/#usage-example","title":"Usage example","text":"<pre><code>from flask import Flask, g, request, Response, abort\n\nfrom jam import Jam\nfrom jam.ext.flask import JWTExtension\n\napp = Flask(__name__)\njam = Jam()\njwt_ext = JWTExtension(jam, header_name='Authorization', cookie_name=None)\njwt_ext.init_app(app)\n\n\n@app.route(\"/login\")\ndef login(username, password) -&gt; Response:\n    # some logic\n    payload = jam.make_payload(**{\"user\": 1})\n    token = jam.gen_jwt_token(payload)\n    response = Response(token)\n    return response\n\n\n@app.route(\"/get_user\")\ndef get_user() -&gt; Response:\n    payload = g.payload\n    if not payload:\n        abort(403)\n    response = Response(payload)\n    return response\n</code></pre>"},{"location":"extensions/flask/#session-extension","title":"Session Extension","text":"<p>This extension checks sessions ids from the header or cookie and writes the payload to the route context.</p>"},{"location":"extensions/flask/#setup-extension_1","title":"Setup extension","text":""},{"location":"extensions/flask/#jam-jam_1","title":"<code>jam</code>: <code>Jam</code>","text":"<p>Jam instance.</p>"},{"location":"extensions/flask/#app-flask-none-none_1","title":"<code>app</code>: <code>Flask | None = None</code>","text":"<p>Flask app instance.</p>"},{"location":"extensions/flask/#cookie_name-str-none_1","title":"<code>cookie_name</code>: <code>str | None</code>","text":"<p>The cookie name for the session id. If passed, <code>Extension</code> will read the session id from it. If <code>None</code> is passed, <code>Extension</code> will read the <code>header</code>.</p>"},{"location":"extensions/flask/#header_name-str-none_1","title":"<code>header_name</code>: <code>str | None</code>","text":"<p>The name of the header for the session id. If passed, <code>Extension</code> will read the session id from the header. If <code>None</code> is passed, <code>Extension</code> will read the <code>cookie</code>.</p> <p>Tip</p> <p><code>SessionExtension</code> expects the header to be in the format: <code>Bearer &lt;token&gt;</code></p> <pre><code>from flask import Flask\n\nfrom jam import Jam\nfrom jam.ext.flask import SessionExtension\n\n\napp = Flask(__name__)\njam = Jam()\nsession_ext = SessionExtension(jam, header_name=None, cookie_name=\"sessionId\")\nsession_ext.init_app(app)\n</code></pre>"},{"location":"extensions/flask/#usage-example_1","title":"Usage example","text":"<pre><code>from flask import Flask, g, request, Response, abort\n\nfrom jam import Jam\nfrom jam.ext.flask import SessionExtension\n\napp = Flask(__name__)\njam = Jam()\nsession_ext = SessionExtension(jam, header_name=None, cookie_name=\"sessionId\")\nsession_ext.init_app(app)\n\n\n@app.route(\"/login\")\ndef login(username, password) -&gt; Response:\n    # some logic\n    session_id = jam.create_session(\"usern\", {\"user\": 1})\n    response = Response(session_id)\n    response.set_cookie(\"sessionId\", session_id)\n    return response\n\n\n@app.route(\"/get_user\")\ndef get_user() -&gt; Response:\n    payload = g.payload\n    if not payload:\n        abort(403)\n    response = Response(payload)\n    return response\n</code></pre>"},{"location":"extensions/litestar/","title":"Jam + Litestar = <3","text":"<p>Integration with Litestar is implemented by plugins.</p>"},{"location":"extensions/litestar/#jam-plugin","title":"Jam Plugin","text":"<p>This is a simple plugin that does not check tokens/sessions like <code>JWTPlugin</code> and <code>SessionPlugin</code>. It is needed for easy access to jam inside routes, via Litestar DI:</p> <p>Note</p> <p>Litestar automatically injects plugin-provided dependencies into route handlers via its dependency injection (DI) system.</p> <p>Tip</p> <p>For more convenient operation, it is recommended to use <code>JamPlugin</code> in conjunction with other plugins, for example <code>JamPlugin</code> + <code>JWTPlugin</code>.</p> <pre><code>@get(path=\"/login\")\nasync def login(logindto: LoginDTO, jam: Jam) -&gt; bool:\n    # some logic\n    payload = jam.make_payload(**{\"user\": 1})\n    token = jam.gen_jwt_token(payload)\n    return True\n</code></pre> <p>Example of integration with your Litestar application: <pre><code>from litestar import Litestar\n\nfrom jam import Jam\nfrom jam.ext.litestar import JamPlugin\n\n\njam = Jam()\napp = Litestar(\n    plugins=[JamPlugin(jam)]\n)\n</code></pre></p>"},{"location":"extensions/litestar/#jwt-plugin","title":"JWT Plugin","text":"<p>This plugin creates <code>Middleware</code> that checks tokens in cookies/headers and passes the payload to <code>Request</code>.</p>"},{"location":"extensions/litestar/#setup-plugin","title":"Setup plugin","text":""},{"location":"extensions/litestar/#jam-basejam","title":"<code>jam</code>: <code>BaseJam</code>","text":"<p>Jam instance</p>"},{"location":"extensions/litestar/#cookie_name-str-none","title":"<code>cookie_name</code>: <code>str | None</code>","text":"<p>The cookie name for the access token. If passed, plugin will read the token from it. If <code>None</code> is passed, plugin will read the header.</p>"},{"location":"extensions/litestar/#header_name-str-none","title":"<code>header_name</code>: <code>str | None</code>","text":"<p>The name of the header for the access token. If passed, plugin will read the token from the header. If <code>None</code> is passed, plugin will read the cookie.</p> <p>Tip</p> <p><code>JWTPlugin</code> expects the header to be in the format: <code>Bearer &lt;token&gt;</code></p> <p><pre><code>from litestar import Litestar\n\nfrom jam import Jam\nfrom jam.ext.litestar import JWTPlugin\n\njam = Jam()\napp = Litestar(\n    plugins=[JWTPlugin(jam=jam, cookie_name=\"jwt\", header_name=None)]\n)\n</code></pre> After that, if the user has been authorized, their payload can be obtained using <code>request.user.payload</code>: <pre><code>@get(path=\"/user\")\nasync def user(request: Request) -&gt; str:\n    payload = request.user.payload\n    return str(payload)\n</code></pre></p>"},{"location":"extensions/litestar/#usage-example","title":"Usage example","text":"<pre><code>from litestar import Litestar, get, post, Request, Response\nfrom litestar.openapi.spec import Components, SecurityScheme\n\nfrom jam.ext.litestar import JWTPlugin\nfrom jam import Jam\n\n\njam = Jam()\n\n@post(path=\"/auth\")\nasync def auth(username: str, password: str) -&gt; Response:\n    # some logic\n    payload = jam.make_payload(**{\"user\": 1})\n\n    token = jam.gen_jwt_token(payload)\n    response = Response({\"token\": token})\n    response.set_cookie(\"jwt\", token)\n    return response\n\n\n@get(path=\"/user\")\nasync def user(request: Request) -&gt; str:\n    payload = request.user.payload\n    return str(payload)\n\n\napp = Litestar(\n    debug=True,\n    route_handlers=[auth, user],\n    plugins=[\n        JWTPlugin(jam=jam, cookie_name=\"jwt\", header_name=None)\n    ]\n)\n</code></pre>"},{"location":"extensions/litestar/#sessions-plugin","title":"Sessions Plugin","text":"<p>This plugin creates <code>Middleware</code> that checks sessions ids in cookies/headers and passes the payload to <code>Request</code>.</p>"},{"location":"extensions/litestar/#setup-plugin_1","title":"Setup plugin","text":""},{"location":"extensions/litestar/#jam-basejam_1","title":"<code>jam</code>: <code>BaseJam</code>","text":"<p>Jam instance</p>"},{"location":"extensions/litestar/#cookie_name-str-none_1","title":"<code>cookie_name</code>: <code>str | None</code>","text":"<p>The cookie name for the session id. If passed, plugin will read the session id from it. If <code>None</code> is passed, plugin will read the header.</p>"},{"location":"extensions/litestar/#header_name-str-none_1","title":"<code>header_name</code>: <code>str | None</code>","text":"<p>The name of the header for the session id. If passed, plugin will read the session id from the header. If <code>None</code> is passed, plugin will read the cookie.</p> <p>Tip</p> <p><code>SessionPlugin</code> expects the header to be in the format: <code>Bearer &lt;token&gt;</code></p> <p><pre><code>from litestar import Litestar\n\nfrom jam import Jam\nfrom jam.ext.litestar import SessionsPlugin\n\njam = Jam()\napp = Litestar(\n    plugins=[SessionsPlugin(jam=jam, cookie_name=\"sessionId\", header_name=None)]\n)\n</code></pre> After that, if the user has been authorized, their payload can be obtained using <code>request.user.payload</code>: <pre><code>@get(path=\"/user\")\nasync def user(request: Request) -&gt; str:\n    payload = request.user.payload\n    return str(payload)\n</code></pre></p>"},{"location":"extensions/litestar/#usage-example_1","title":"Usage example","text":"<pre><code>from litestar import Litestar, get, post, Request, Response\nfrom litestar.openapi.spec import Components, SecurityScheme\n\nfrom jam.ext.litestar import SessionsPlugin\nfrom jam import Jam\n\n\njam = Jam()\n\n@post(path=\"/auth\")\nasync def auth(username: str, password: str) -&gt; Response:\n    # some logic\n    session_id = jam.create_session(\"username\", {\"user\": 1})\n    response = Response({\"sessionId\": session_id})\n    response.set_cookie(\"sessionId\", session_id)\n    return response\n\n\n@get(path=\"/user\")\nasync def user(request: Request) -&gt; str:\n    payload = request.user.payload\n    return str(payload)\n\n\napp = Litestar(\n    debug=True,\n    route_handlers=[auth, user],\n    plugins=[\n        SessionsPlugin(jam=jam, cookie_name=\"sessionId\", header_name=None)\n    ]\n)\n</code></pre>"},{"location":"extensions/starlette/","title":"Jam + Starlette = <3","text":"<p>The extension with Starlette is implemented by <code>AuthBackend</code>'s for <code>AuthenticationMiddleware</code>.</p> <p>For more detailed information about <code>AuthBackend</code>, <code>AuthMiddleware</code>, and auth* in Starlette in general, see the official documentation.   </p>"},{"location":"extensions/starlette/#jwtbackend","title":"JWTBackend","text":"<p>For jwt auth*, <code>jam.ext.starlette.JWTBackend</code> is used, which needs to be integrated into the standard <code>AuthenticationMiddleware</code>:</p> <pre><code>Middleware(\n    AuthenticationMiddleware,\n    backend=JWTBackend(jam, cookie_name, header_name)\n)\n</code></pre>"},{"location":"extensions/starlette/#middleware-set","title":"Middleware set","text":"<p>Three parameters must be passed to <code>JWTBackend</code>:</p>"},{"location":"extensions/starlette/#jam-basejam","title":"<code>jam</code>: <code>BaseJam</code>","text":"<p>Jam instance.</p>"},{"location":"extensions/starlette/#cookie_name-str-none","title":"<code>cookie_name</code>: <code>str | None</code>","text":"<p>The cookie name for the access token. If passed, <code>Middleware</code> will read the token from it. If <code>None</code> is passed, <code>Middleware</code> will read the <code>header</code>.</p>"},{"location":"extensions/starlette/#header_name-str-none","title":"<code>header_name</code>: <code>str | None</code>","text":"<p>The name of the header for the access token. If passed, <code>Middleware</code> will read the token from the header. If <code>None</code> is passed, <code>Middleware</code> will read the <code>cookie</code>.</p> <p>Tip</p> <p><code>JWTBackend</code> expects the header to be in the format: <code>Bearer &lt;token&gt;</code></p> <pre><code>jam = Jam()\napp = Starlette(\n    routes=routes,\n    middleware=[\n        Middleware(\n            AuthenticationMiddleware,\n            backend=JWTBackend(\n                jam=jam,\n                cookie_name=\"jwt\",\n                header_name=None\n            )\n        )\n    ]\n)\n</code></pre> <p>After that, if the user has been authorized, their payload can be obtained using <code>request.user.payload</code>: <pre><code>def get_user(request: Request) -&gt; Response:\n    user_payload = request.user.payload\n    # another logic\n</code></pre></p>"},{"location":"extensions/starlette/#usage-example","title":"Usage example","text":"<pre><code>from starlette.applications import Starlette\nfrom starlette.routing import Route\nfrom starlette.responses import Response\nfrom starlette.requests import Request\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.authentication import AuthenticationMiddleware\n\nfrom jam import Jam\nfrom jam.ext.starlette import JWTBackend\n\njam = Jam()\n\ndef login() -&gt; Response:\n    # login logic\n    payload = jam.make_payload(**{\"user\": 1})\n    token = jam.gen_jwt_token(payload)\n    response = Response(token)\n    response.set_cookie(\"jwt\", token)\n    return response\n\ndef get_user(request: Request) -&gt; Response:\n    user_payload = request.user.payload\n    return Response(user_payload)\n\n\napp = Starlette(\n    routes=[\n        Route(\"/login\", login),\n        Route(\"/user\", get_user)  \n    ],\n    middleware=[\n        Middleware(\n            AuthenticationMiddleware,\n            backend=JWTBackend(\n                jam=jam,\n                cookie_name=\"jwt\",\n                header_name=None\n            )\n        )\n    ]\n)\n</code></pre>"},{"location":"extensions/starlette/#sessionbackend","title":"SessionBackend","text":"<p>For sessions auth*, <code>jam.ext.starlette.SessionBackend</code>is used, which needs to be integrated into the standard AuthenticationMiddleware: <pre><code>Middleware(\n    AuthenticationMiddleware,\n    backend=SessionBackend(jam, cookie_name, header_name)\n)\n</code></pre></p>"},{"location":"extensions/starlette/#middleware-set_1","title":"Middleware set","text":"<p>Three parameters must be passed to SessionBackend:</p>"},{"location":"extensions/starlette/#jam-basejam_1","title":"<code>jam</code>: <code>BaseJam</code>","text":"<p>The created Jam instance.</p>"},{"location":"extensions/starlette/#cookie_name-str-none_1","title":"<code>cookie_name</code>: <code>str | None</code>","text":"<p>The cookie name for the session id. If passed, <code>Middleware</code> will read the session id from it. If <code>None</code> is passed, <code>Middleware</code> will read the header.</p>"},{"location":"extensions/starlette/#header_name-str-none_1","title":"<code>header_name</code>: <code>str | None</code>","text":"<p>The name of the header for the session id. If passed, <code>Middleware</code> will read the session id from the header. If <code>None</code> is passed, <code>Middleware</code> will read the cookie.</p> <p>Tip</p> <p><code>SessionBackend</code> expects the header to be in the format: <code>Bearer &lt;session_id&gt;</code></p> <pre><code>jam = Jam()\napp = Starlette(\n    routes=routes,\n    middleware=[\n        Middleware(\n            AuthenticationMiddleware,\n            backend=SessionBackend(\n                jam=jam,\n                cookie_name=\"sessionId\",\n                header_name=None\n            )\n        )\n    ]\n)\n</code></pre> <p>After that, if the user has been authorized, their payload can be obtained using <code>request.user.payload</code>: <pre><code>def get_user(request: Request) -&gt; Response:\n    user_payload = request.user.payload\n    # another logic\n</code></pre></p>"},{"location":"extensions/starlette/#usage-example_1","title":"Usage example","text":"<pre><code>from starlette.applications import Starlette\nfrom starlette.routing import Route\nfrom starlette.responses import Response\nfrom starlette.requests import Request\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.authentication import AuthenticationMiddleware\n\nfrom jam import Jam\nfrom jam.ext.starlette import SessionBackend\n\njam = Jam()\n\ndef login() -&gt; Response:\n    # login logic\n    session_id = jam.create_session(\"username\", {\"user\": 1})\n    response = Response(session_id)\n    response.set_cookie(\"sessionId\", session_id)\n    return response\n\ndef get_user(request: Request) -&gt; Response:\n    user_payload = request.user.payload\n    return Response(user_payload)\n\n\napp = Starlette(\n    routes=[\n        Route(\"/login\", login),\n        Route(\"/user\", get_user)  \n    ],\n    middleware=[\n        Middleware(\n            AuthenticationMiddleware,\n            backend=SessionBackend(\n                jam=jam,\n                cookie_name=\"jwt\",\n                header_name=None\n            )\n        )\n    ]\n)\n</code></pre>"},{"location":"jwt/config/","title":"Config","text":""},{"location":"jwt/config/#params","title":"Params","text":""},{"location":"jwt/config/#alg-str","title":"<code>alg</code>: <code>str</code>","text":"<p>Currently available algorithms are <code>HS256</code>, <code>HS384</code>, <code>HS512</code>, <code>RS256</code>, <code>RS384</code>, <code>RS512</code>.</p> <p>For HS* algorithms it is necessary to specify <code>secret_key</code>. It can be generated by the secrets library built into python.</p> <p>For RS* algorithms it is necessary to specify <code>public_key</code> and <code>private_key</code>, you can use jam.utils.generate_rsa_key_pair.</p> <p>Tip</p> <p>By default, Jam reads the <code>JAM_JWT_SECRET_KEY</code>, <code>JAM_JWT_PUBLIC_KEY</code> and <code>JAM_JWT_PRIVATE_KEY</code> environment variables.</p>"},{"location":"jwt/config/#expire-int","title":"<code>expire</code>: <code>int</code>","text":"<p>This is the lifetime of the token in seconds.</p>"},{"location":"jwt/config/#list-hashmap","title":"<code>list</code>: <code>hashmap</code>","text":"<p>Configuration for lists.</p>"},{"location":"jwt/config/#type-str","title":"<code>type</code>: <code>str</code>","text":"<p><code>black</code> or <code>white</code></p>"},{"location":"jwt/config/#backend-str","title":"<code>backend</code>: <code>str</code>","text":"<p><code>redis</code> / <code>json</code> / <code>custom</code></p> <p>See Jam List documentaion.</p>"},{"location":"jwt/config/#example-toml-config","title":"Example <code>toml</code> config:","text":"<pre><code>[jam.jwt]\nalg = \"HS256\"\nsecret_key = \"SECRET\"\nexpire = 3600\n</code></pre>"},{"location":"jwt/instance/","title":"Jam JWT","text":""},{"location":"jwt/instance/#instance","title":"Instance","text":"<pre><code>from jam import Jam\n\njam = Jam(config=config)\n</code></pre>"},{"location":"jwt/instance/#gen-payload","title":"Gen payload","text":"<p>You can either create the payload yourself and pass it to kwargs or use <code>make_payload</code>. <pre><code>jam.jwt_make_payload(**{\"user_id\": 1, \"role\": \"admin\"})\n\n# or if you need to specify a different exp, e.g. for access token\njam.make_payload(exp=600, data={\"user_id\": 1})\n</code></pre> The settings from config will be passed to payload.</p>"},{"location":"jwt/instance/#gen-jwt-token","title":"Gen jwt token","text":"<p><pre><code>token = jam.jwt_create_token(payload)\n</code></pre> and you'll receive a JWT token with your payload.</p>"},{"location":"jwt/instance/#verify-jwt-token","title":"Verify jwt token","text":"<pre><code>jam.jwt_verify_token(\n    token=my_token,\n    check_exp=True,\n    check_list=False\n)\n</code></pre> <p>If everything went well you just get your payload, if the keys didn't match then raise errors. (see API)</p>"},{"location":"jwt/instance/#check_exp","title":"<code>check_exp</code>","text":"<p>If we specify this flag, we check the same way, for the lifetime of the token.</p>"},{"location":"jwt/instance/#check_list","title":"<code>check_list</code>","text":"<p>If you specify this flag, we do a check for lists, see Jam lists documentation.</p>"},{"location":"jwt/lists/how/","title":"How to use Jam lists?","text":"<p>Jam has 2 modules for managing black and white lists.</p> <ul> <li>JSONList - is a module for storing tokens locally as json.</li> <li>RedisList - is a module for storing tokens in Redis.</li> </ul> <p>You can also create your own module VERY easily. See Custom Module.</p>"},{"location":"jwt/lists/json/","title":"JSONList","text":"<p>JSONList is a module to store tokens in json, suitable if you can't use a standalone repository like redis.</p>"},{"location":"jwt/lists/json/#installing-extra-packages","title":"Installing extra packages","text":"pip install jamlib[json]Installed!"},{"location":"jwt/lists/json/#basic-usage","title":"Basic usage","text":""},{"location":"jwt/lists/json/#configuration","title":"Configuration","text":""},{"location":"jwt/lists/json/#type-str","title":"<code>type</code>: <code>str</code>","text":"<p>List type, black or white.</p>"},{"location":"jwt/lists/json/#backend-str","title":"<code>backend</code>: <code>str</code>","text":"<p>Which backend to use for storing the list.</p>"},{"location":"jwt/lists/json/#json_path-str","title":"<code>json_path</code>: <code>str</code>","text":"<p>Path to json file.</p> <p>Example <code>toml</code> config: <pre><code>[jam]\nauth_type = \"jwt\"\nsecret_key = \"SECRET\"\nexpire = 3600\n\n[jam.list]\ntype=\"white\" # or black\nbackend=\"json\"\njson_path=\"my_whitelist.json\"\n</code></pre></p>"},{"location":"jwt/lists/json/#blacklists","title":"Blacklists","text":"<pre><code>from jam import Jam\nfrom jam.exceptions import TokenInBlackList\n\njam = Jam(config=\"config.toml\")\n\nsome_token = \"eyJhbGc0...\"\n\ntry:\n    payload = jam.verify_jwt_token(token=some_token, check_list=True)\n# If the token is in the blacklist\n# during the validation, jam will return an error\nexcept TokenInBlackList:\n    print(\"Token in black list!\")\n\n# To add a token to the blacklist\njam.module.list.add(some_token)\n</code></pre>"},{"location":"jwt/lists/json/#whitelists","title":"Whitelists","text":"<pre><code>from jam import Jam\nfrom jam.exceptions import TokenNotInWhiteList\n\njam = Jam(config=\"config.toml\")\n\n# As soon as you create a new token, it goes on the whitelist\nnew_token = jam.gen_jwt_token({\"user_id\": 1})\n\ntry:\n    jam.verify_jwt_token(token=new_token, check_list=True)\n\n# If the token is not found in the whitelist, jam will return an error\nexcept TokenNotInWhiteList:\n    print(\"Token not in whitelist!\")\n\n# To remove a token from the whitelist\njam.module.list.delete(new_token)\n</code></pre>"},{"location":"jwt/lists/json/#other-methods","title":"Other methods","text":"<pre><code># All methods are valid for both black and white lists\n\ntoken: str = \"some_token\"\n\njam.list.add(token) # Adding a token\njam.list.delete(token) # Deleting a token\nresult: bool = jam.list.check(token) # Check token presence in list\n</code></pre>"},{"location":"jwt/lists/own_module/","title":"Custom Module","text":"<p>If you want to store tokens somewhere else, for example, or validate in some other way, you can easily write your own module.</p> <pre><code>from typing import Literal\nfrom jam.jwt.lists import BaseJWTList\n\nclass MyCustomList(BaseJWTList):\n    def __init__(\n            self,\n            type: Literal[\"white\", \"black\"],\n            some_arg: str\n    ) -&gt; None:\n        super().__init__(list_type=type)\n        self.my_arg = some_arg\n\n    def add(self, token: str) -&gt; None:\n        # some logic for adding a token to the list\n        pass\n\n    def check(self, token: str) -&gt; bool:\n        # some logic to check if the token is in the list\n        pass\n\n    def delete(self, token: str) -&gt; None:\n        # some logic for removing a token from the list\n        pass\n</code></pre> <p>Config: <pre><code>[jam]\nauth_type = \"jwt\"\nsecret_key = \"secret\"\nexpire = 3600\n\n[jam.list]\ntype = \"white\"\nbackend = \"custom\"\ncustom_module = \"my_app.jam_module.MyCustomList\"\nsome_arg = \"some_value\"\n</code></pre></p> <p>And now you can use it as a <code>JSONList</code> or <code>RedisList</code>.</p>"},{"location":"jwt/lists/redis/","title":"RedisList","text":"<p>RedisList is a module for storing tokens in redis, great because you can put the lifetime of a token in the list.</p> <p>You need a running redis instance for this to work.</p>"},{"location":"jwt/lists/redis/#installing-extra-packages","title":"Installing extra packages","text":"pip install jamlib[redis]Installed!"},{"location":"jwt/lists/redis/#basic-usage","title":"Basic usage","text":""},{"location":"jwt/lists/redis/#configuration","title":"Configuration","text":""},{"location":"jwt/lists/redis/#type-str","title":"<code>type</code>: <code>str</code>","text":"<p>List type, black or white.</p>"},{"location":"jwt/lists/redis/#backend-str","title":"<code>backend</code>: <code>str</code>","text":"<p>Which backend to use for storing the list.</p>"},{"location":"jwt/lists/redis/#redis_uri-str","title":"<code>redis_uri</code>: <code>str</code>","text":"<p>URI to redis connection.</p>"},{"location":"jwt/lists/redis/#in_list_life_time-int","title":"<code>in_list_life_time</code>: <code>int</code>","text":"<p>Token lifetime in seconds.</p> <p>Example <code>toml</code> config: <pre><code>[jam]\nauth_type = \"jwt\"\nexpire = 3600\nsecret_key = \"SECRET_KEY\"\n\n[jam.list]\ntype = \"white\" # or black\nbackend = \"redis\"\nredis_uri = \"redis://0.0.0.0:6379/0\"\nin_list_life_time = 3600\n</code></pre></p>"},{"location":"jwt/lists/redis/#blacklists","title":"Blacklists","text":"<pre><code>from jam import Jam\nfrom jam.exceptions import TokenInBlackList\n\njam = Jam(config=\"config.toml\")\n\nsome_token = \"eyJhbGc0...\"\n\ntry:\n    payload = jam.verify_jwt_token(token=some_token, check_list=True)\n# If the token is in the blacklist\n# during the validation, jam will return an error\nexcept TokenInBlackList:\n    print(\"Token in black list!\")\n\n# To add a token to the blacklist\njam.module.list.add(some_token)\n</code></pre>"},{"location":"jwt/lists/redis/#whitelists","title":"Whitelists","text":"<pre><code>from jam import Jam\nfrom jam.exceptions import TokenNotInWhiteList\n\njam = Jam(config=\"config.toml\")\n\n# As soon as you create a new token, it goes on the whitelist\nnew_token = jam.gen_jwt_token({\"user_id\": 1})\n\ntry:\n    jam.verify_jwt_token(token=new_token, check_list=True)\n\n# If the token is not found in the whitelist, jam will return an error\nexcept TokenNotInWhiteList:\n    print(\"Token not in whitelist!\")\n\n# To remove a token from the whitelist\njam.list.delete(new_token)\n</code></pre>"},{"location":"jwt/lists/redis/#other-methods","title":"Other methods","text":"<pre><code># All methods are valid for both black and white lists\n\ntoken: str = \"some_token\"\n\njam.list.add(token) # Adding a token\njam.list.delete(token) # Deleting a token\nresult: bool = jam.list.check(token) # Check token presence in list\n</code></pre>"},{"location":"jwt/lists/what/","title":"What is Jam lists?","text":"<p>Jam lists are optional modules for managing white and black lists.</p>"},{"location":"jwt/lists/what/#what-is-a-blacklist","title":"What is a Blacklist?","text":"<p>A blacklist is a list of invalidated tokens. Even if a token has not yet expired (i.e., <code>exp</code> claim is still valid), it can be manually added to the blacklist to prevent further use.</p>"},{"location":"jwt/lists/what/#common-use-cases","title":"Common use cases:","text":"<ul> <li>A user logs out \u2014 their token is blacklisted.</li> <li>A token is compromised \u2014 it must be immediately revoked.</li> <li>A user's access rights change \u2014 old tokens may no longer be valid.</li> </ul>"},{"location":"jwt/lists/what/#what-is-a-whitelist","title":"What is a Whitelist?","text":"<p>A whitelist is a list of explicitly approved tokens. Only tokens that are present in this list are considered valid. All others are automatically rejected.</p>"},{"location":"jwt/lists/what/#common-use-cases_1","title":"Common use cases:","text":"<ul> <li>High-security environments where only verified sessions should work.</li> <li>Limiting the number of active sessions per user.</li> <li>Centralized control over all active tokens.</li> </ul>"},{"location":"jwt/lists/what/#when-to-use-blacklist-vs-whitelist","title":"When to Use Blacklist vs. Whitelist","text":"Scenario Recommended List Type Standard login/logout behavior Blacklist High-security systems with strict session control Whitelist Immediate token revocation needed Blacklist Tokens are rarely issued and must be tightly controlled Whitelist Scalable APIs with minimal storage overhead Blacklist (or none)"},{"location":"oauth2/builtins/","title":"Built-in clients","text":"<p>Jam has several built-in OAuth2 clients that do not require you to write the API yourself. Each client is configured in the same way:</p> <p><pre><code>config = {\n    \"auth_type\": \"oauth2\",\n    \"providers\": {\n        \"&lt;provider_name&gt;\": {\n            \"client_id\": \"ID\",\n            \"client_secret\": \"SECRET\",\n            \"redirect_url\": \"https://example.com\"\n            # No other parameters are required.\n        }\n    }\n}\n</code></pre> For more details, see the configuration documentation.</p>"},{"location":"oauth2/builtins/#clients","title":"Clients:","text":""},{"location":"oauth2/builtins/#github","title":"GitHub","text":"<p>Provider name: <code>github</code></p> <p>GitHub OAuth2 documentation</p>"},{"location":"oauth2/builtins/#gitlab","title":"GitLab","text":"<p>Provider name: <code>gitlab</code></p> <p>GitLab OAuth2 documentation</p>"},{"location":"oauth2/builtins/#google","title":"Google","text":"<p>Provider name: <code>google</code></p> <p>Google cloud documentation</p>"},{"location":"oauth2/builtins/#yandex","title":"Yandex","text":"<p>Provider name: <code>yandex</code></p> <p>Yandex ID documentation</p>"},{"location":"oauth2/config/","title":"Config","text":""},{"location":"oauth2/config/#params","title":"Params","text":""},{"location":"oauth2/config/#providers-hashmap","title":"<code>providers</code>: <code>hashmap</code>","text":"<p>There may be several providers, which are configured according to the following principle: <code>\"&lt;provider-name&gt;\": {&lt;settings&gt;}</code></p>"},{"location":"oauth2/config/#cliend_id-str","title":"<code>cliend_id</code>: <code>str</code>","text":"<p>Your OAuth2 client ID</p>"},{"location":"oauth2/config/#client_secret-str","title":"<code>client_secret</code>: <code>str</code>","text":"<p>Secret of your OAuth2 client</p>"},{"location":"oauth2/config/#auth_url-str","title":"<code>auth_url</code>: <code>str</code>","text":"<p>URL for obtaining an authorization code. Not used in built-in clients.</p>"},{"location":"oauth2/config/#token_url-str","title":"<code>token_url</code>: <code>str</code>","text":"<p>URL for obtaining tokens. Not used in built-in clients.</p>"},{"location":"oauth2/config/#redirect_url-str","title":"<code>redirect_url</code>: <code>str</code>","text":"<p>URL where the user will be redirected with scope and code.</p>"},{"location":"oauth2/config/#module-str","title":"<code>module</code>: <code>str</code>","text":"<p>Path to the module in the format <code>app.some_modules.MyOAuth2Client</code>, used only in custom modules.</p> <p>Example:</p> <pre><code>jam:\n  oauth2:\n    providers:\n\n      linkedin:  # this is a custom OAuth2Client\n        client_id: LINKEDIN_CLIENT_ID\n        client_secret: LINKEDIN_CLIENT_SECRET\n        auth_url: https://www.linkedin.com/oauth/v2/authorization\n        token_url: https://www.linkedin.com/oauth/v2/accessToken\n        redirect_url: https://example.com/callback/linkedin\n\n      github:  # this is a built-in client\n        client_id: GITHUB_CLIENT_ID\n        client_secret: GITHUB_CLIENT_SECRET\n        redirect_url: https://example.com/callback/github\n\n      twitter:  # this is custom module\n        module: myapp.auth.TwiiterOauth2\n        some_arg: value1\n        another_arg: value2\n</code></pre>"},{"location":"oauth2/custom_module/","title":"Custom module","text":"<p>If you need to extend functionality or change something, you can write your own OAuth2 client and easily implement it in Jam.</p> <p>To do this, you need to write your own class inheriting from <code>jam.oauth2.BaseOAuth2Client</code>:</p> <pre><code>#app/auth/oauth2.py\n\nfrom jam.oauth2 import BaseOAuth2Client\n\n\nclass MyCustomClient(BaseOAuth2Client):\n\n    def __init__(self, some_param: str) -&gt; None:\n        ...\n\n    def refresh_token(self, refresh_token: str) -&gt; str:\n        # some logic\n        ...\n\n    def fetch_token(self, code: str) -&gt; str:\n        # some logic\n        ...\n\n    def get_authorization_url(self, scope: list[str]) -&gt; str:\n        # some logic\n        ...\n\n    def client_credentials_flow(\n        self, scope: Optional[list[str]] = None\n    ) -&gt; dict[str, Any]:\n        # some logic\n        ...\n</code></pre> <p>Now you need to enable your module in the config: <pre><code>[jam]\nauth_type = \"oauth2\"\n\n[jam.providers.providername]\nsome_param = \"some_value\"\nmodule = \"app.auth.oauth2.MyCustomClient\"\n</code></pre></p> <p>And use it: <pre><code>from jam import Jam\n\njam = Jam(config=\"config.toml\")\n\nurl = jam.oauth2_get_authorized_url(\n    provider=\"providername\",\n    scope=[\"email\", \"avatar\"]\n)\n</code></pre></p>"},{"location":"oauth2/instance/","title":"Jam OAuth2","text":""},{"location":"oauth2/instance/#instance","title":"Instance","text":"<pre><code>from jam import Jam\n\njam = Jam(config=config)\n</code></pre>"},{"location":"oauth2/instance/#get-auth-url","title":"Get auth URL","text":"<p>Obtaining a URL for authorization.</p> <pre><code>url = jam.oauth2_get_authorized_url(\n    provider=\"github\",\n    scope=[\"gist\"],\n)\n</code></pre>"},{"location":"oauth2/instance/#provider-str","title":"<code>provider</code>: <code>str</code>","text":"<p>Provider name from config.</p>"},{"location":"oauth2/instance/#scope-liststr","title":"<code>scope</code>: <code>list[str]</code>","text":"<p>The scope is specific to each service; please check your provider's documentation for details.</p>"},{"location":"oauth2/instance/#kwargs-extra_params","title":"kwargs: <code>extra_params</code>","text":"<p>Additional parameters, if needed.</p>"},{"location":"oauth2/instance/#fetch-token","title":"Fetch token","text":"<p>Exchange code for tokens.</p> <pre><code>tokens = jam.oauth2_fetch_token(\n    provider=\"github\",\n    code=\"some_code\",\n    grant_type=\"authorization_code\"\n)\n</code></pre>"},{"location":"oauth2/instance/#provider-str_1","title":"<code>provider</code>: <code>str</code>","text":"<p>Provider name from config.</p>"},{"location":"oauth2/instance/#code-str","title":"<code>code</code>: <code>str</code>","text":"<p>Code received after successful authorization.</p>"},{"location":"oauth2/instance/#grant_type-str-authorization_code","title":"<code>grant_type</code>: <code>str</code> = <code>\"authorization_code\"</code>","text":"<p>OAuth2 grant type.</p>"},{"location":"oauth2/instance/#kwargs-extra_params_1","title":"kwargs: <code>extra_params</code>","text":"<p>Additional parameters, if needed.</p>"},{"location":"oauth2/instance/#refresh-token","title":"Refresh token","text":"<p>Refresh tokens</p> <pre><code>new_tokens = jam.oauth2_refresh_token(\n    provider=\"github\",\n    refresh_token=token,\n    grant_type=\"refresh_token\"\n)\n</code></pre>"},{"location":"oauth2/instance/#provider-str_2","title":"<code>provider</code>: <code>str</code>","text":"<p>Provider name from config.</p>"},{"location":"oauth2/instance/#refresh_token-str","title":"<code>refresh_token</code>: <code>str</code>","text":"<p>Refresh token</p>"},{"location":"oauth2/instance/#grant_type-str-refresh_token","title":"<code>grant_type</code>: <code>str</code> = <code>\"refresh_token\"</code>","text":"<p>OAuth2 grant type.</p>"},{"location":"oauth2/instance/#kwargs-extra_params_2","title":"kwargs: <code>extra_params</code>","text":"<p>Additional parameters, if needed.</p>"},{"location":"oauth2/instance/#machine-to-machine-auth","title":"Machine to Machine auth","text":"<p>Authorization without user involvement.</p> <pre><code>tokens = jam.oauth2_client_credentials_flow(\n    provider=\"github\",\n    scope=[\"gist\"],\n)\n</code></pre>"},{"location":"oauth2/instance/#provider-str_3","title":"<code>provider</code>: <code>str</code>","text":"<p>Provider name from config.</p>"},{"location":"oauth2/instance/#scope-liststr_1","title":"<code>scope</code>: <code>list[str]</code>","text":"<p>The scope is specific to each service; please check your provider's documentation for details.</p>"},{"location":"oauth2/instance/#kwargs-extra_params_3","title":"kwargs: <code>extra_params</code>","text":"<p>Additional parameters, if needed.</p>"},{"location":"otp/config/","title":"Configure OTP","text":""},{"location":"otp/config/#params","title":"Params","text":""},{"location":"otp/config/#type-str","title":"<code>type</code>: str","text":"<p>OTP type: <code>hotp</code> or <code>otp</code>.</p>"},{"location":"otp/config/#digits-int","title":"<code>digits</code>: int","text":"<p>Number of characters in the code.</p>"},{"location":"otp/config/#digest-str","title":"<code>digest</code>: str","text":"<p>Hash type: <code>sha1</code> / <code>sha256</code> / <code>sha512</code>.</p>"},{"location":"otp/config/#interval-int-none","title":"<code>interval</code>: int | None","text":"<p>Code regeneration interval for TOTP.</p>"},{"location":"otp/config/#example-yml-config","title":"Example <code>yml</code> config:","text":"<pre><code>jam:\n  otp:\n    type: \"totp\"  # or hotp\n    digits: 6\n    digest: sha1\n    interval: 30  # only for TOTP\n</code></pre>"},{"location":"otp/hotp/","title":"How to use HOTP","text":"<p>After configuration, HOTP will be available through the main instance:</p> <pre><code>from jam import Jam\n\njam = Jam(config=config)\n\ncode = jam.otp_code(\n    secret=\"USERSECRETKEY\",\n    factor=1  # A counter is used as a factor in HOTP\n)\n</code></pre> <p>Tip</p> <p>In OTP, you need to use the secret specifically for each user and store it securely. You can use: <code>jam.utils.generate_otp_key</code>. We may develop a mechanism for encrypting secrets in the future, but we are not yet sure if there is a demand for it.</p>"},{"location":"otp/hotp/#verify-code","title":"Verify code","text":"<pre><code>result: bool = jam.otp_verify_code(\n    secret=\"USERSECRETKEY\",\n    code=\"123456\",\n    factor=counter,\n    look_ahead=1\n)\n</code></pre>"},{"location":"otp/hotp/#gen-uri-for-auth-apps","title":"Gen URI for auth apps","text":"<p>To make it convenient for users to use your service, it is better to provide a URI for generating codes that can be used in Google Authenticator or any other application.</p> <pre><code>uri = jam.otp_uri(\n    secret=\"USER-SECRET-KEY\",\n    name=\"username/email/or-something\",\n    issuer=\"your-service-name\",\n    counter=999\n)\n\nprint(uri)  # otpauth://hotp/your-service-name%3Ausername?secret=MYSUPERSECRES&amp;issuer=your-service-name&amp;algorithm=SHA1&amp;digits=6&amp;counter=999\n</code></pre>"},{"location":"otp/hotp/#use-hotp-out-of-jamjam","title":"Use HOTP out of <code>jam.Jam</code>","text":"<p>You can use OTP outside the main instance, for example if your framework provides convenient authorization mechanisms but does not provide OTP. To do this, you can use <code>jam.otp.HOTP</code> directly: <pre><code>from jam.otp import HOTP\n\nhotp = HOTP(\n    secret=\"somesecretkey\",\n    digits=6,\n    digest=\"sha1\"\n)\n\ncounter = 0\n\nhotp.at(counter) # 994684\ncounter += 1\nhotp.at(counter)  # 545896\n\nhotp.at(factor=counter)\n\nresult: bool = hotp.verify(code=\"123456\", factor=counter, look_ahead=30)\n</code></pre></p>"},{"location":"otp/hotp_and_totp/","title":"HOTP vs TOTP","text":""},{"location":"otp/hotp_and_totp/#what-is-otp","title":"What is OTP?","text":"<p>OTP stands for One-Time Password. It is used for two-factor authentication or transaction confirmation: the password is valid only once and is often time-limited (e.g., 30\u201360 seconds).</p>"},{"location":"otp/hotp_and_totp/#hotp-and-totp-what-is-the-difference-and-when-to-choose-which-one","title":"HOTP and TOTP: what is the difference and when to choose which one?","text":""},{"location":"otp/hotp_and_totp/#hotp","title":"HOTP","text":"<p>Characteristics:</p> <ul> <li>Code generation is based on a counter rather than time.</li> <li>A code is generated only upon an explicit event (e.g., pressing a button on a hardware token).</li> <li>The server and client must maintain counter synchronization.</li> <li>A code remains valid until it is used, without time-based expiration.</li> </ul> <p>Use cases:</p> Scenario Example Hardware tokens USB token, banking key fob with a button Systems without reliable time sources Devices lacking accurate clocks Small-scale systems with manual entry Internal corporate applications <p>Advantages:</p> <ul> <li>Suitable for offline hardware tokens.</li> <li>Codes do not expire until consumed.</li> </ul> <p>Limitations:</p> <ul> <li>Requires counter synchronization.</li> <li>If multiple codes are skipped, the server must implement a \u201clook-ahead window.\u201d</li> </ul>"},{"location":"otp/hotp_and_totp/#totp","title":"TOTP","text":"<p>Characteristics:</p> <ul> <li>Code generation is based on time (typically 30-second intervals).</li> <li>The server and client must maintain reasonably synchronized clocks.</li> <li>Each code is valid only for a short duration (commonly 30\u201360 seconds).</li> </ul> <p>Use cases:</p> Scenario Example Two-factor authentication (2FA) Google Authenticator, Microsoft Authenticator Mobile applications Token embedded in a smartphone High-security web services GitHub, AWS, online banking applications <p>Advantages:</p> <ul> <li>Codes are automatically refreshed at regular intervals.</li> <li>Does not require counter synchronization, only clock alignment.</li> <li>Widely adopted and familiar to users.</li> </ul> <p>Limitations:</p> <ul> <li>Relies on accurate device time.</li> <li>Significant clock drift renders codes invalid.</li> </ul>"},{"location":"otp/hotp_and_totp/#practical-guidance","title":"Practical Guidance","text":"<ul> <li>HOTP \u2192 Recommended when using hardware tokens or in environments without reliable time synchronization.</li> <li>TOTP \u2192 Recommended when accurate time is available and time-based code rotation is expected (e.g., mobile or web-based authentication).</li> </ul>"},{"location":"otp/totp/","title":"How to use TOTP","text":"<p>After configuration, TOTP will be available through the main instance:</p> <pre><code>from jam import Jam\n\njam = Jam(config=config)\n\ncode = jam.otp_code(\n    secret=\"USERSECRETKEY\"\n)\n</code></pre> <p>Tip</p> <p>In OTP, you need to use the secret specifically for each user and store it securely. You can use: <code>jam.utils.generate_otp_key</code> We may develop a mechanism for encrypting secrets in the future, but we are not yet sure if there is a demand for it.</p>"},{"location":"otp/totp/#verify-code","title":"Verify code","text":"<pre><code>result: bool = jam.otp_verify_code(\n    secret=\"USERSECRETKEY\",\n    code=\"123456\",\n    look_ahead=1\n)\n</code></pre>"},{"location":"otp/totp/#gen-uri-for-auth-apps","title":"Gen URI for auth apps","text":"<p>To make it convenient for users to use your service, it is better to provide a URI for generating codes that can be used in Google Authenticator or any other application.</p> <pre><code>uri = jam.otp_uri(\n    secret=\"USER-SECRET-KEY\",\n    name=\"username/email/or-something\",\n    issuer=\"your-service-name\",\n)\n\nprint(uri)  # otpauth://totp/your-service-name%3Ausername?secret=MYSUPERSECRES&amp;issuer=your-service-name&amp;algorithm=SHA1&amp;digits=6\n</code></pre>"},{"location":"otp/totp/#use-totp-out-of-jamjam","title":"Use TOTP out of <code>jam.Jam</code>","text":"<p>You can use OTP outside the main instance, for example if your framework provides convenient authorization mechanisms but does not provide OTP. To do this, you can use <code>jam.otp.TOTP</code> directly: <pre><code>from jam.otp import TOTP\n\ntotp = TOTP(\n    secret=\"somesecretkey\",\n    digits=6,\n    digest=\"sha1\",\n    interval=30\n)\n\ntotp.now  # \"775934\"\n# or for specific time:\ntotp.at(factor=1756944388)\n\nresult: bool = totp.verify(code=\"123456\", look_ahead=30)\n</code></pre></p>"},{"location":"sessions/config/","title":"Config","text":""},{"location":"sessions/config/#params","title":"Params","text":""},{"location":"sessions/config/#session_type","title":"<code>session_type</code>","text":"<p>Session type. Available options are <code>redis</code>, <code>json</code>, <code>custom</code>. For <code>custom</code>, you will need to specify your session class in the <code>custom_module</code> parameter.</p>"},{"location":"sessions/config/#is_session_crypt","title":"<code>is_session_crypt</code>","text":"<p>Sometimes you need to encrypt the session ID so that it cannot be forged. If you want to encrypt the session ID, set this parameter to <code>True</code> and pass the encryption key in the <code>session_aes_secret</code> parameter.</p>"},{"location":"sessions/config/#session_aes_secret","title":"<code>session_aes_secret</code>","text":"<p>The encryption key for the session ID. Key must be 32 url-safe base64-encoded bytes.  You can use <code>jam.utils.generate_aes_key</code> to generate it.</p> <p>Tip</p> <p>By default, Jam reads the <code>JAM_SESSION_AES_SECRET</code> environment variable.</p>"},{"location":"sessions/config/#example-toml-config","title":"Example <code>toml</code> config:","text":"<pre><code>[jam.session]\nsession_type = \"redis\"\nis_session_crypt = false\nredis_uri = \"redis://0.0.0.0:6379/0\"\n</code></pre>"},{"location":"sessions/config/#redis","title":"Redis","text":"<p>In Redis, sessions are stored as <code>HASH</code>, where <code>name</code> is constructed from <code>&lt;session_path&gt;:&lt;session_key&gt;</code>. The session ID is used as the <code>key</code>, and a serialized JSON object with session data is used as the <code>value</code>.</p>"},{"location":"sessions/config/#redis_uri","title":"<code>redis_uri</code>","text":"<p>URI for connecting to Redis.</p>"},{"location":"sessions/config/#default_ttl","title":"<code>default_ttl</code>","text":"<p>Session lifetime in seconds. The default is 3600 (1 hour). If <code>None</code>, the session will not be deleted.</p>"},{"location":"sessions/config/#session_path","title":"<code>session_path</code>","text":"<p>Prefix for session keys in Redis. The default is <code>sessions</code>.</p> <p>More details: jam.sessions.redis.RedisSessions</p>"},{"location":"sessions/config/#json","title":"JSON","text":"<p>In JSON, sessions are stored as files in the directory specified in the <code>json_path</code> parameter.</p>"},{"location":"sessions/config/#json_path","title":"<code>json_path</code>","text":"<p>The path to the directory where session files will be stored.</p> <p>More details: jam.sessions.json.JsonSessions</p>"},{"location":"sessions/config/#custom","title":"Custom","text":""},{"location":"sessions/config/#custom_module","title":"<code>custom_module</code>","text":"<p>Your custom session module. It must be a subclass of <code>BaseSessionModule</code>.</p>"},{"location":"sessions/config/#other-parameters","title":"Other parameters","text":"<p>For a custom module, simply specify the parameters you need in dict, for example: <pre><code>[jam.session]\nsessions_type = \"custom\"\ncustom_module = \"myapp.custom_session.CustomModule\"\nparam1 = \"value1\"\nparam2 = \"value2\"\n</code></pre></p> <p>See more: Own sessions backend</p>"},{"location":"sessions/instance/","title":"Jam Sessions","text":""},{"location":"sessions/instance/#instance","title":"Instance","text":"<pre><code>from jam import Jam\n\njam = Jam(config=config)\n</code></pre>"},{"location":"sessions/instance/#create-new-session","title":"Create new session","text":"<pre><code>session_id: str = jam.session_create(\n    session_key=\"some_username\", data={\"role\": \"admin\"}\n)\n</code></pre>"},{"location":"sessions/instance/#get-data-from-session","title":"Get data from session","text":"<p><pre><code>data: dict | None = jam.session_key(session_id)\n</code></pre> Returns <code>None</code> if session does not exist or expired.</p>"},{"location":"sessions/instance/#update-session-data","title":"Update session data","text":"<pre><code>jam.session_update(session_id, {\"role\": \"user\"})\n</code></pre>"},{"location":"sessions/instance/#delete-session","title":"Delete session","text":"<pre><code>jam.session_delete(session_id)\n</code></pre>"},{"location":"sessions/instance/#clear-all-user-sessions","title":"Clear all user sessions","text":"<pre><code>jam.session_clear(\"some_username\")\n</code></pre>"},{"location":"sessions/instance/#rework-session","title":"Rework session","text":"<p><pre><code>new_session_id: str = jam.session_rework(session_id)\n</code></pre> Returns new session id and deletes old session.</p>"},{"location":"sessions/own_module/","title":"Custom sessions backend","text":"<p>You can also create your own session module, for example, to store sessions in PSQL or for other purposes. To do this, you need to create your own class inheriting from BaseSessionModule.</p> <p>For example: <pre><code>from jam.sessions import BaseSessionModule\n\n\nclass MyCustomSession(BaseSessionModule):\n    def __init__(self, some_param: str, another_param: int) -&gt; None:\n        super().__init__()\n        self.some_param = some_param\n        self.another_param = another_param\n\n    def create(self, session_key: str, data: dict) -&gt; str:\n        ...\n\n    def get(self, session_id: str) -&gt; dict | None:\n        ...\n\n    def update(self, session_id: str, data: dict) -&gt; None:\n        ...\n\n    def clear(self, session_key: str) -&gt; None:\n        ...\n\n    def rework(self, session_id: str) -&gt; str:\n        ...\n</code></pre></p> <p>After that, it will need to be transferred to the config with your custom parameters.</p> <pre><code>[jam]\nauth_type = \"session\"\nsession_type = \"custom\"\ncustom_module = \"myapp.custom_session.MyCustomSession\"\n# your params\nsome_param = \"value\"\nanother_param = 123\n</code></pre>"},{"location":"sessions/session_crypt/","title":"AES Encryption in Jam","text":"<p>You can use AES encryption to generate a session.</p> <p>To do this, pass the <code>is_session_crypt</code> and <code>session_aes_secret</code> parameters with the encryption key to <code>config</code>. The encryption key can be generated using the <code>jam.utils.generate_aes_key()</code> function.</p> <pre><code>from jam import Jam\nfrom jam.utils import generate_aes_key\n\naes_key = generate_aes_key()\nconfig = {\n    \"session_type\": \"redis\",\n    \"is_session_crypt\": True,\n    \"session_aes_secret\": aes_key,\n    \"redis_uri\": \"redis://localhost:6379/0\",\n    \"session_path\": \"sessions\",\n    \"default_ttl\": 3600,\n}\n\njam = Jam(config=config)\n</code></pre> <p>Now, when generating a session, the session ID and data will be encrypted using AES: <pre><code>session_id: str = jam.create_session(\n    session_key=\"some_username\",\n    data={\"role\": \"admin\"}\n)\nprint(session_id)  # J$_gAAAAABosJAjGhsz_qZScNCZwvQVTgIs45wxvSNmkKUHkOcZG5vTW97wBxnRdO3-3zQWICwYJ6qGCxvZO8uEigLHuLIWpUDYef-FTrgqGNjbx1jAY8wdMqIusLLZR4I8A8VW6r0ugrqB\n</code></pre></p>"},{"location":"utils/key_generations/","title":"Key generators","text":"<p>Jam has several utilities for generating various keys.</p>"},{"location":"utils/key_generations/#aes-keys","title":"AES Keys","text":"<p>For convenient generation of AES keys, there is a utility <code>jam.utils.aes.generate_aes_key</code>: <pre><code>from jam.utils import generate_aes_key\n\nkey: bytes = generate_aes_key()\n</code></pre> Now this key can be used in AES session encryption or somewhere else in your application.</p>"},{"location":"utils/key_generations/#rsa-keys","title":"RSA Keys","text":"<p>To generate an RSA key pair, you can use <code>jam.utils.rsa.generate_rsa_key_pair</code></p> <pre><code>from jam.utils import generate_rsa_key_pair\n\nkeys: dict[str, str] = generate_rsa_key_pair(\n    key_size=2048\n) # you get a dictionary like `{\"private\": KEY, \"public\": KEY}\n</code></pre>"},{"location":"utils/key_generations/#otp-keys","title":"OTP Keys","text":"<p>OTPs have a specific key format, so jam also has a utility for simple key generation.</p> <pre><code>from jam.utils import generate_otp_key\n\nkey = generate_otp_key(entropy_bits=128) # RQTC2QCAFRVB6DETJCZ2CST4PI\n</code></pre> <p>Sometimes you need to generate an OTP key based on specific values, for example, to send a code to an email address during registration. There is a utility for this - <code>otp_key_from_string</code>:</p> <pre><code>from jam.utils import otp_key_from_string\n\nuser_email = \"user@email.com\"\nkey = otp_key_from_string(user_email) # GZUHYNJCATBH3HRCRKNTJUAMRIOTNIAA\n# Now, using this key, you can generate an OTP code or verify it.\n</code></pre>"},{"location":"utils/password_hashing/","title":"Password utils","text":"<p>Since Jam is a library for auth*, it would be nice to secure your passwords, wouldn't it?</p> <p>Jam has utilities for generating a password hash with salt</p>"},{"location":"utils/password_hashing/#generate-password-hash","title":"Generate password hash","text":"<p><pre><code>from jam.utils import hash_password\n\nmy_password = \"qwerty1234\"\n\nsalt, hash_ = hash_password(\n    password=my_password\n)\nprint(salt)  # 865e3c3ae40a822ace7400c1e20aa9f7\nprint(hash_)  # d11a48d3613df679445cdf9a3068e2f5e80b382ea9a5b908a7336d3f989231a9\n</code></pre> To make it convenient to store this hash in a database(for example), you can serialize the hash:</p> <pre><code>from jam.utils import serialize_hash\n\nserialized_hash = serialize_hash(\n    salt_hex=salt, hash_hex=hash_\n)  # 865e3c3ae40a822ace7400c1e20aa9f7$d11a48d3613df679445cdf9a3068e2f5e80b382ea9a5b908a7336d3f989231a9\n</code></pre>"},{"location":"utils/password_hashing/#check-passwords","title":"Check passwords","text":"<p>Now, when a user, for example, wants to log into his account, and we need to verify his password, we use utilities to verify the password with a hash:</p> <p>First you need to deserialize the hash <pre><code>from jam.utils import deserialize_hash\n\nserialized_hash = \"865e3c3ae40a822ace7400c1e20aa9f7$d11a48d3613df679445cdf9a3068e2f5e80b382ea9a5b908a7336d3f989231a9\"\nsalt, hash_ = deserialize_hash(serialized_hash)\n</code></pre></p> <p>And now we can compare passwords. <pre><code>from jam.utils import check_password\n\ninput_while_login_password = \"qwerty1234\"\n\n\nresult: bool = check_password(\n    password=input_while_login_password,\n    salt_hex=salt,\n    hash_hex=hash_\n)  # True\n</code></pre></p>"}]}